
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Wavelet Neural Operator (WNO) Kernel ]
>>> Overview:
The WNO uses wavelet transformations to extract multi-resolution features from input signals.
Wavelet decomposition offers a unique advantage in capturing localized features in both spatial
and frequency domains.

>>> Key Features:
- Multi-resolution analysis via wavelet decomposition.
- Supports both compressive sensing and hierarchical learning.

>>> Reference:
Tripura, T. et al. 'Wavelet neural operator: a neural operator for parametric partial differential equations'.
Link: https://arxiv.org/pdf/2205.02191
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Fourier Neural Operator (FNO) Kernel ]
>>> Overview:
The FNO leverages Fourier Transform to map input data into the spectral domain, where
convolutional operations are performed by truncating high-frequency modes.

>>> Key Features:
- Effective for parameterized Partial Differential Equations (PDEs).
- Reduces computational complexity by retaining only significant modes.

>>> Reference:
Li, Z. et al. 'Fourier Neural Operator for Parametric Partial Differential Equations' (ICLR 2021).
Link: https://arxiv.org/pdf/2010.08895
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 2475585

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7f961abb1460>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7f95ee3d6ba0>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7f95ee3d6ba0>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7f9616ffa1b0>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=3.05, avg_loss=0.5056, train_err=8.0251
Eval: 1024_h1=0.1668, 1024_l2=0.0950
[Rank 0]: saved training state to save/1d_burgers/pure/f-w-l
[1] time=2.52, avg_loss=0.1179, train_err=1.8717
Eval: 1024_h1=0.0847, 1024_l2=0.0572
[2] time=2.52, avg_loss=0.0633, train_err=1.0054
Eval: 1024_h1=0.0739, 1024_l2=0.0609
[3] time=2.53, avg_loss=0.0458, train_err=0.7277
Eval: 1024_h1=0.0391, 1024_l2=0.0200
[4] time=2.52, avg_loss=0.0385, train_err=0.6115
Eval: 1024_h1=0.0392, 1024_l2=0.0281
[5] time=2.52, avg_loss=0.0306, train_err=0.4854
Eval: 1024_h1=0.0463, 1024_l2=0.0337
[6] time=2.52, avg_loss=0.0380, train_err=0.6032
Eval: 1024_h1=0.0483, 1024_l2=0.0427
[7] time=2.52, avg_loss=0.0374, train_err=0.5929
Eval: 1024_h1=0.0291, 1024_l2=0.0162
[8] time=2.52, avg_loss=0.0235, train_err=0.3726
Eval: 1024_h1=0.0314, 1024_l2=0.0131
[9] time=2.52, avg_loss=0.0250, train_err=0.3973
Eval: 1024_h1=0.0319, 1024_l2=0.0337
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=4.07, avg_loss=0.0284, train_err=0.4509
Eval: 1024_h1=0.0409, 1024_l2=0.0132
[11] time=4.05, avg_loss=0.0268, train_err=0.4255
Eval: 1024_h1=0.0230, 1024_l2=0.0217
[12] time=4.04, avg_loss=0.0243, train_err=0.3861
Eval: 1024_h1=0.0530, 1024_l2=0.0453
[13] time=4.04, avg_loss=0.0291, train_err=0.4612
Eval: 1024_h1=0.0234, 1024_l2=0.0150
[14] time=4.04, avg_loss=0.0238, train_err=0.3772
Eval: 1024_h1=0.0315, 1024_l2=0.0285
[15] time=4.04, avg_loss=0.0214, train_err=0.3399
Eval: 1024_h1=0.0234, 1024_l2=0.0175
[16] time=4.04, avg_loss=0.0216, train_err=0.3431
Eval: 1024_h1=0.0168, 1024_l2=0.0130
[17] time=4.04, avg_loss=0.0247, train_err=0.3922
Eval: 1024_h1=0.0297, 1024_l2=0.0312
[18] time=4.05, avg_loss=0.0224, train_err=0.3562
Eval: 1024_h1=0.0194, 1024_l2=0.0190
[19] time=4.06, avg_loss=0.0194, train_err=0.3079
Eval: 1024_h1=0.0251, 1024_l2=0.0180
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=4.05, avg_loss=0.0177, train_err=0.2804
Eval: 1024_h1=0.0170, 1024_l2=0.0093
[21] time=4.04, avg_loss=0.0191, train_err=0.3038
Eval: 1024_h1=0.0161, 1024_l2=0.0156
[22] time=4.04, avg_loss=0.0184, train_err=0.2919
Eval: 1024_h1=0.0271, 1024_l2=0.0236
[23] time=4.04, avg_loss=0.0193, train_err=0.3069
Eval: 1024_h1=0.0261, 1024_l2=0.0166
[24] time=4.05, avg_loss=0.0189, train_err=0.3001
Eval: 1024_h1=0.0314, 1024_l2=0.0263
[25] time=4.04, avg_loss=0.0190, train_err=0.3010
Eval: 1024_h1=0.0207, 1024_l2=0.0144
[26] time=4.05, avg_loss=0.0175, train_err=0.2781
Eval: 1024_h1=0.0204, 1024_l2=0.0170
[27] time=4.04, avg_loss=0.0173, train_err=0.2745
Eval: 1024_h1=0.0204, 1024_l2=0.0213
[28] time=4.04, avg_loss=0.0163, train_err=0.2594
Eval: 1024_h1=0.0240, 1024_l2=0.0216
[29] time=4.04, avg_loss=0.0203, train_err=0.3227
Eval: 1024_h1=0.0189, 1024_l2=0.0095
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=4.04, avg_loss=0.0161, train_err=0.2560
Eval: 1024_h1=0.0276, 1024_l2=0.0206
[31] time=4.05, avg_loss=0.0183, train_err=0.2909
Eval: 1024_h1=0.0220, 1024_l2=0.0223
[32] time=4.04, avg_loss=0.0169, train_err=0.2685
Eval: 1024_h1=0.0196, 1024_l2=0.0177
[33] time=4.04, avg_loss=0.0166, train_err=0.2628
Eval: 1024_h1=0.0198, 1024_l2=0.0147
[34] time=4.03, avg_loss=0.0151, train_err=0.2389
Eval: 1024_h1=0.0145, 1024_l2=0.0117
[35] time=4.04, avg_loss=0.0145, train_err=0.2297
Eval: 1024_h1=0.0179, 1024_l2=0.0118
[36] time=4.04, avg_loss=0.0147, train_err=0.2340
Eval: 1024_h1=0.0191, 1024_l2=0.0196
[37] time=4.04, avg_loss=0.0158, train_err=0.2512
Eval: 1024_h1=0.0155, 1024_l2=0.0094
[38] time=4.05, avg_loss=0.0164, train_err=0.2600
Eval: 1024_h1=0.0153, 1024_l2=0.0230
[39] time=4.04, avg_loss=0.0140, train_err=0.2226
Eval: 1024_h1=0.0135, 1024_l2=0.0094
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=4.05, avg_loss=0.0157, train_err=0.2497
Eval: 1024_h1=0.0159, 1024_l2=0.0107
[41] time=4.04, avg_loss=0.0157, train_err=0.2498
Eval: 1024_h1=0.0154, 1024_l2=0.0171
[42] time=4.04, avg_loss=0.0170, train_err=0.2699
Eval: 1024_h1=0.0227, 1024_l2=0.0194
[43] time=4.05, avg_loss=0.0140, train_err=0.2217
Eval: 1024_h1=0.0298, 1024_l2=0.0234
[44] time=4.04, avg_loss=0.0171, train_err=0.2717
Eval: 1024_h1=0.0290, 1024_l2=0.0244
[45] time=4.03, avg_loss=0.0170, train_err=0.2691
Eval: 1024_h1=0.0145, 1024_l2=0.0103
[46] time=4.05, avg_loss=0.0150, train_err=0.2377
Eval: 1024_h1=0.0175, 1024_l2=0.0085
[47] time=4.05, avg_loss=0.0168, train_err=0.2665
Eval: 1024_h1=0.0164, 1024_l2=0.0096
[48] time=4.04, avg_loss=0.0200, train_err=0.3170
Eval: 1024_h1=0.0189, 1024_l2=0.0124
[49] time=4.03, avg_loss=0.0169, train_err=0.2683
Eval: 1024_h1=0.0162, 1024_l2=0.0107
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=4.03, avg_loss=0.0137, train_err=0.2171
Eval: 1024_h1=0.0141, 1024_l2=0.0119
[Rank 0]: saved training state to save/1d_burgers/pure/f-w-l
[51] time=4.05, avg_loss=0.0132, train_err=0.2093
Eval: 1024_h1=0.0166, 1024_l2=0.0206
[52] time=4.04, avg_loss=0.0159, train_err=0.2522
Eval: 1024_h1=0.0354, 1024_l2=0.0270
[53] time=4.04, avg_loss=0.0260, train_err=0.4132
Eval: 1024_h1=0.0212, 1024_l2=0.0222
[54] time=4.04, avg_loss=0.0152, train_err=0.2416
Eval: 1024_h1=0.0160, 1024_l2=0.0139
[55] time=4.03, avg_loss=0.0158, train_err=0.2501
Eval: 1024_h1=0.0132, 1024_l2=0.0083
[56] time=4.04, avg_loss=0.0145, train_err=0.2303
Eval: 1024_h1=0.0204, 1024_l2=0.0210
[57] time=4.03, avg_loss=0.0148, train_err=0.2349
Eval: 1024_h1=0.0184, 1024_l2=0.0156
[58] time=4.04, avg_loss=0.0143, train_err=0.2265
Eval: 1024_h1=0.0116, 1024_l2=0.0072
[59] time=4.03, avg_loss=0.0133, train_err=0.2104
Eval: 1024_h1=0.0168, 1024_l2=0.0083
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=4.03, avg_loss=0.0168, train_err=0.2668
Eval: 1024_h1=0.0137, 1024_l2=0.0097
[61] time=4.04, avg_loss=0.0141, train_err=0.2233
Eval: 1024_h1=0.0184, 1024_l2=0.0098
[62] time=4.05, avg_loss=0.0164, train_err=0.2601
Eval: 1024_h1=0.0247, 1024_l2=0.0198
[63] time=4.04, avg_loss=0.0148, train_err=0.2349
Eval: 1024_h1=0.0173, 1024_l2=0.0119
[64] time=4.04, avg_loss=0.0156, train_err=0.2475
Eval: 1024_h1=0.0129, 1024_l2=0.0115
[65] time=4.05, avg_loss=0.0115, train_err=0.1818
Eval: 1024_h1=0.0128, 1024_l2=0.0097
[66] time=4.05, avg_loss=0.0167, train_err=0.2653
Eval: 1024_h1=0.0300, 1024_l2=0.0332
[67] time=4.04, avg_loss=0.0179, train_err=0.2838
Eval: 1024_h1=0.0141, 1024_l2=0.0094
[68] time=4.04, avg_loss=0.0141, train_err=0.2244
Eval: 1024_h1=0.0221, 1024_l2=0.0198
[69] time=4.04, avg_loss=0.0142, train_err=0.2260
Eval: 1024_h1=0.0136, 1024_l2=0.0150
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=4.03, avg_loss=0.0126, train_err=0.1998
Eval: 1024_h1=0.0118, 1024_l2=0.0082
[71] time=4.03, avg_loss=0.0138, train_err=0.2195
Eval: 1024_h1=0.0165, 1024_l2=0.0152
[72] time=4.03, avg_loss=0.0150, train_err=0.2381
Eval: 1024_h1=0.0153, 1024_l2=0.0185
[73] time=4.04, avg_loss=0.0145, train_err=0.2307
Eval: 1024_h1=0.0111, 1024_l2=0.0077
[74] time=4.04, avg_loss=0.0126, train_err=0.2007
Eval: 1024_h1=0.0224, 1024_l2=0.0178
[75] time=4.04, avg_loss=0.0136, train_err=0.2159
Eval: 1024_h1=0.0146, 1024_l2=0.0119
[76] time=4.04, avg_loss=0.0133, train_err=0.2113
Eval: 1024_h1=0.0117, 1024_l2=0.0147
[77] time=4.04, avg_loss=0.0115, train_err=0.1829
Eval: 1024_h1=0.0119, 1024_l2=0.0095
[78] time=4.03, avg_loss=0.0142, train_err=0.2261
Eval: 1024_h1=0.0193, 1024_l2=0.0149
[79] time=4.05, avg_loss=0.0137, train_err=0.2182
Eval: 1024_h1=0.0167, 1024_l2=0.0142
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=4.03, avg_loss=0.0134, train_err=0.2133
Eval: 1024_h1=0.0218, 1024_l2=0.0213
[81] time=4.03, avg_loss=0.0133, train_err=0.2106
Eval: 1024_h1=0.0158, 1024_l2=0.0117
[82] time=4.04, avg_loss=0.0143, train_err=0.2266
Eval: 1024_h1=0.0231, 1024_l2=0.0241
[83] time=4.03, avg_loss=0.0173, train_err=0.2745
Eval: 1024_h1=0.0208, 1024_l2=0.0171
[84] time=4.04, avg_loss=0.0163, train_err=0.2590
Eval: 1024_h1=0.0187, 1024_l2=0.0141
[85] time=4.04, avg_loss=0.0138, train_err=0.2188
Eval: 1024_h1=0.0350, 1024_l2=0.0284
[86] time=4.03, avg_loss=0.0195, train_err=0.3089
Eval: 1024_h1=0.0171, 1024_l2=0.0120
[87] time=4.04, avg_loss=0.0137, train_err=0.2178
Eval: 1024_h1=0.0131, 1024_l2=0.0082
[88] time=4.04, avg_loss=0.0111, train_err=0.1755
Eval: 1024_h1=0.0115, 1024_l2=0.0083
[89] time=4.05, avg_loss=0.0112, train_err=0.1779
Eval: 1024_h1=0.0156, 1024_l2=0.0128
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=4.03, avg_loss=0.0144, train_err=0.2291
Eval: 1024_h1=0.0158, 1024_l2=0.0129
[91] time=4.05, avg_loss=0.0115, train_err=0.1819
Eval: 1024_h1=0.0160, 1024_l2=0.0106
[92] time=4.04, avg_loss=0.0124, train_err=0.1960
Eval: 1024_h1=0.0121, 1024_l2=0.0092
[93] time=4.03, avg_loss=0.0136, train_err=0.2164
Eval: 1024_h1=0.0198, 1024_l2=0.0182
[94] time=4.04, avg_loss=0.0120, train_err=0.1904
Eval: 1024_h1=0.0164, 1024_l2=0.0114
[95] time=4.03, avg_loss=0.0126, train_err=0.2002
Eval: 1024_h1=0.0104, 1024_l2=0.0062
[96] time=4.04, avg_loss=0.0144, train_err=0.2284
Eval: 1024_h1=0.0170, 1024_l2=0.0126
[97] time=4.04, avg_loss=0.0119, train_err=0.1888
Eval: 1024_h1=0.0178, 1024_l2=0.0139
[98] time=4.04, avg_loss=0.0126, train_err=0.1995
Eval: 1024_h1=0.0155, 1024_l2=0.0121
[99] time=4.05, avg_loss=0.0134, train_err=0.2130
Eval: 1024_h1=0.0220, 1024_l2=0.0154
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=4.04, avg_loss=0.0085, train_err=0.1354
Eval: 1024_h1=0.0070, 1024_l2=0.0037
[Rank 0]: saved training state to save/1d_burgers/pure/f-w-l
[101] time=4.05, avg_loss=0.0073, train_err=0.1159
Eval: 1024_h1=0.0080, 1024_l2=0.0055
[102] time=4.04, avg_loss=0.0060, train_err=0.0958
Eval: 1024_h1=0.0089, 1024_l2=0.0059
[103] time=4.03, avg_loss=0.0067, train_err=0.1063
Eval: 1024_h1=0.0111, 1024_l2=0.0096
[104] time=4.04, avg_loss=0.0076, train_err=0.1202
Eval: 1024_h1=0.0112, 1024_l2=0.0063
[105] time=4.05, avg_loss=0.0078, train_err=0.1233
Eval: 1024_h1=0.0071, 1024_l2=0.0038
[106] time=4.03, avg_loss=0.0076, train_err=0.1199
Eval: 1024_h1=0.0066, 1024_l2=0.0083
[107] time=4.04, avg_loss=0.0064, train_err=0.1010
Eval: 1024_h1=0.0084, 1024_l2=0.0129
[108] time=4.03, avg_loss=0.0065, train_err=0.1036
Eval: 1024_h1=0.0091, 1024_l2=0.0060
[109] time=4.04, avg_loss=0.0074, train_err=0.1177
Eval: 1024_h1=0.0058, 1024_l2=0.0035
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=4.04, avg_loss=0.0062, train_err=0.0991
Eval: 1024_h1=0.0068, 1024_l2=0.0042
[111] time=4.05, avg_loss=0.0086, train_err=0.1357
Eval: 1024_h1=0.0113, 1024_l2=0.0082
[112] time=4.05, avg_loss=0.0065, train_err=0.1033
Eval: 1024_h1=0.0081, 1024_l2=0.0040
[113] time=4.04, avg_loss=0.0074, train_err=0.1183
Eval: 1024_h1=0.0081, 1024_l2=0.0054
[114] time=4.04, avg_loss=0.0084, train_err=0.1340
Eval: 1024_h1=0.0091, 1024_l2=0.0086
[115] time=4.03, avg_loss=0.0069, train_err=0.1100
Eval: 1024_h1=0.0079, 1024_l2=0.0060
[116] time=4.04, avg_loss=0.0084, train_err=0.1330
Eval: 1024_h1=0.0110, 1024_l2=0.0084
[117] time=4.04, avg_loss=0.0075, train_err=0.1196
Eval: 1024_h1=0.0078, 1024_l2=0.0054
[118] time=4.04, avg_loss=0.0074, train_err=0.1171
Eval: 1024_h1=0.0104, 1024_l2=0.0079
[119] time=4.04, avg_loss=0.0080, train_err=0.1268
Eval: 1024_h1=0.0155, 1024_l2=0.0115
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=4.05, avg_loss=0.0081, train_err=0.1283
Eval: 1024_h1=0.0068, 1024_l2=0.0044
[121] time=4.05, avg_loss=0.0085, train_err=0.1342
Eval: 1024_h1=0.0129, 1024_l2=0.0093
[122] time=4.04, avg_loss=0.0078, train_err=0.1240
Eval: 1024_h1=0.0143, 1024_l2=0.0165
[123] time=4.04, avg_loss=0.0080, train_err=0.1271
Eval: 1024_h1=0.0082, 1024_l2=0.0057
[124] time=4.05, avg_loss=0.0069, train_err=0.1091
Eval: 1024_h1=0.0073, 1024_l2=0.0081
[125] time=4.05, avg_loss=0.0080, train_err=0.1273
Eval: 1024_h1=0.0161, 1024_l2=0.0125
[126] time=4.04, avg_loss=0.0075, train_err=0.1195
Eval: 1024_h1=0.0088, 1024_l2=0.0056
[127] time=4.05, avg_loss=0.0068, train_err=0.1085
Eval: 1024_h1=0.0071, 1024_l2=0.0053
[128] time=4.03, avg_loss=0.0068, train_err=0.1080
Eval: 1024_h1=0.0067, 1024_l2=0.0036
[129] time=4.04, avg_loss=0.0072, train_err=0.1135
Eval: 1024_h1=0.0104, 1024_l2=0.0065
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=4.03, avg_loss=0.0070, train_err=0.1103
Eval: 1024_h1=0.0125, 1024_l2=0.0135
[131] time=4.03, avg_loss=0.0074, train_err=0.1181
Eval: 1024_h1=0.0075, 1024_l2=0.0046
[132] time=4.05, avg_loss=0.0075, train_err=0.1191
Eval: 1024_h1=0.0153, 1024_l2=0.0117
[133] time=4.04, avg_loss=0.0101, train_err=0.1602
Eval: 1024_h1=0.0081, 1024_l2=0.0055
[134] time=4.05, avg_loss=0.0065, train_err=0.1034
Eval: 1024_h1=0.0078, 1024_l2=0.0060
[135] time=4.05, avg_loss=0.0060, train_err=0.0960
Eval: 1024_h1=0.0072, 1024_l2=0.0046
[136] time=4.05, avg_loss=0.0073, train_err=0.1154
Eval: 1024_h1=0.0076, 1024_l2=0.0078
[137] time=4.04, avg_loss=0.0067, train_err=0.1057
Eval: 1024_h1=0.0117, 1024_l2=0.0092
[138] time=4.05, avg_loss=0.0071, train_err=0.1120
Eval: 1024_h1=0.0091, 1024_l2=0.0060
[139] time=4.04, avg_loss=0.0073, train_err=0.1162
Eval: 1024_h1=0.0082, 1024_l2=0.0067
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=4.04, avg_loss=0.0068, train_err=0.1078
Eval: 1024_h1=0.0073, 1024_l2=0.0057
[141] time=4.04, avg_loss=0.0075, train_err=0.1184
Eval: 1024_h1=0.0060, 1024_l2=0.0041
[142] time=4.04, avg_loss=0.0057, train_err=0.0905
Eval: 1024_h1=0.0069, 1024_l2=0.0036
[143] time=4.05, avg_loss=0.0079, train_err=0.1261
Eval: 1024_h1=0.0063, 1024_l2=0.0047
[144] time=4.04, avg_loss=0.0054, train_err=0.0862
Eval: 1024_h1=0.0076, 1024_l2=0.0072
[145] time=4.04, avg_loss=0.0071, train_err=0.1132
Eval: 1024_h1=0.0099, 1024_l2=0.0070
[146] time=4.04, avg_loss=0.0084, train_err=0.1338
Eval: 1024_h1=0.0121, 1024_l2=0.0103
[147] time=4.05, avg_loss=0.0066, train_err=0.1048
Eval: 1024_h1=0.0070, 1024_l2=0.0073
[148] time=4.05, avg_loss=0.0066, train_err=0.1044
Eval: 1024_h1=0.0128, 1024_l2=0.0097
[149] time=4.05, avg_loss=0.0082, train_err=0.1307
Eval: 1024_h1=0.0127, 1024_l2=0.0212
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=4.04, avg_loss=0.0082, train_err=0.1294
Eval: 1024_h1=0.0071, 1024_l2=0.0037
[Rank 0]: saved training state to save/1d_burgers/pure/f-w-l
[151] time=4.07, avg_loss=0.0069, train_err=0.1099
Eval: 1024_h1=0.0063, 1024_l2=0.0042
[152] time=4.04, avg_loss=0.0064, train_err=0.1024
Eval: 1024_h1=0.0070, 1024_l2=0.0055
[153] time=4.04, avg_loss=0.0064, train_err=0.1008
Eval: 1024_h1=0.0071, 1024_l2=0.0040
[154] time=4.06, avg_loss=0.0059, train_err=0.0935
Eval: 1024_h1=0.0103, 1024_l2=0.0085
[155] time=4.04, avg_loss=0.0069, train_err=0.1097
Eval: 1024_h1=0.0091, 1024_l2=0.0078
[156] time=4.05, avg_loss=0.0058, train_err=0.0915
Eval: 1024_h1=0.0084, 1024_l2=0.0064
[157] time=4.04, avg_loss=0.0061, train_err=0.0968
Eval: 1024_h1=0.0075, 1024_l2=0.0049
[158] time=4.04, avg_loss=0.0085, train_err=0.1355
Eval: 1024_h1=0.0079, 1024_l2=0.0054
[159] time=4.03, avg_loss=0.0061, train_err=0.0967
Eval: 1024_h1=0.0087, 1024_l2=0.0053
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=4.04, avg_loss=0.0070, train_err=0.1114
Eval: 1024_h1=0.0108, 1024_l2=0.0081
[161] time=4.05, avg_loss=0.0060, train_err=0.0955
Eval: 1024_h1=0.0091, 1024_l2=0.0046
[162] time=4.05, avg_loss=0.0076, train_err=0.1206
Eval: 1024_h1=0.0096, 1024_l2=0.0120
[163] time=4.06, avg_loss=0.0071, train_err=0.1122
Eval: 1024_h1=0.0153, 1024_l2=0.0122
[164] time=4.04, avg_loss=0.0071, train_err=0.1123
Eval: 1024_h1=0.0087, 1024_l2=0.0057
[165] time=4.05, avg_loss=0.0075, train_err=0.1183
Eval: 1024_h1=0.0062, 1024_l2=0.0050
[166] time=4.03, avg_loss=0.0084, train_err=0.1338
Eval: 1024_h1=0.0113, 1024_l2=0.0130
[167] time=4.06, avg_loss=0.0061, train_err=0.0974
Eval: 1024_h1=0.0083, 1024_l2=0.0057
[168] time=4.05, avg_loss=0.0068, train_err=0.1084
Eval: 1024_h1=0.0078, 1024_l2=0.0096
[169] time=4.04, avg_loss=0.0075, train_err=0.1189
Eval: 1024_h1=0.0072, 1024_l2=0.0045
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=4.05, avg_loss=0.0060, train_err=0.0948
Eval: 1024_h1=0.0078, 1024_l2=0.0070
[171] time=4.04, avg_loss=0.0077, train_err=0.1228
Eval: 1024_h1=0.0074, 1024_l2=0.0054
[172] time=4.04, avg_loss=0.0065, train_err=0.1025
Eval: 1024_h1=0.0110, 1024_l2=0.0062
[173] time=4.05, avg_loss=0.0067, train_err=0.1064
Eval: 1024_h1=0.0061, 1024_l2=0.0037
[174] time=4.05, avg_loss=0.0065, train_err=0.1030
Eval: 1024_h1=0.0080, 1024_l2=0.0058
[175] time=4.04, avg_loss=0.0073, train_err=0.1163
Eval: 1024_h1=0.0096, 1024_l2=0.0080
[176] time=4.05, avg_loss=0.0079, train_err=0.1257
Eval: 1024_h1=0.0064, 1024_l2=0.0051
[177] time=4.05, avg_loss=0.0059, train_err=0.0941
Eval: 1024_h1=0.0060, 1024_l2=0.0043
[178] time=4.05, avg_loss=0.0061, train_err=0.0972
Eval: 1024_h1=0.0062, 1024_l2=0.0035
[179] time=4.05, avg_loss=0.0066, train_err=0.1048
Eval: 1024_h1=0.0084, 1024_l2=0.0052
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=4.04, avg_loss=0.0074, train_err=0.1171
Eval: 1024_h1=0.0104, 1024_l2=0.0078
[181] time=4.03, avg_loss=0.0098, train_err=0.1553
Eval: 1024_h1=0.0112, 1024_l2=0.0096
[182] time=4.03, avg_loss=0.0072, train_err=0.1139
Eval: 1024_h1=0.0092, 1024_l2=0.0066
[183] time=4.03, avg_loss=0.0067, train_err=0.1064
Eval: 1024_h1=0.0116, 1024_l2=0.0080
[184] time=4.03, avg_loss=0.0063, train_err=0.1000
Eval: 1024_h1=0.0066, 1024_l2=0.0059
[185] time=4.04, avg_loss=0.0063, train_err=0.1004
Eval: 1024_h1=0.0069, 1024_l2=0.0043
[186] time=4.04, avg_loss=0.0072, train_err=0.1139
Eval: 1024_h1=0.0109, 1024_l2=0.0069
[187] time=4.03, avg_loss=0.0092, train_err=0.1468
Eval: 1024_h1=0.0070, 1024_l2=0.0074
[188] time=4.05, avg_loss=0.0070, train_err=0.1105
Eval: 1024_h1=0.0119, 1024_l2=0.0097
[189] time=4.03, avg_loss=0.0082, train_err=0.1294
Eval: 1024_h1=0.0119, 1024_l2=0.0077
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=4.04, avg_loss=0.0084, train_err=0.1338
Eval: 1024_h1=0.0087, 1024_l2=0.0073
[191] time=4.05, avg_loss=0.0068, train_err=0.1074
Eval: 1024_h1=0.0082, 1024_l2=0.0057
[192] time=4.04, avg_loss=0.0057, train_err=0.0901
Eval: 1024_h1=0.0085, 1024_l2=0.0086
[193] time=4.04, avg_loss=0.0071, train_err=0.1129
Eval: 1024_h1=0.0062, 1024_l2=0.0046
[194] time=4.03, avg_loss=0.0075, train_err=0.1188
Eval: 1024_h1=0.0107, 1024_l2=0.0094
[195] time=4.04, avg_loss=0.0076, train_err=0.1203
Eval: 1024_h1=0.0099, 1024_l2=0.0060
[196] time=4.04, avg_loss=0.0069, train_err=0.1096
Eval: 1024_h1=0.0077, 1024_l2=0.0060
[197] time=4.04, avg_loss=0.0055, train_err=0.0874
Eval: 1024_h1=0.0092, 1024_l2=0.0060
[198] time=4.03, avg_loss=0.0067, train_err=0.1068
Eval: 1024_h1=0.0125, 1024_l2=0.0106
[199] time=4.04, avg_loss=0.0075, train_err=0.1198
Eval: 1024_h1=0.0088, 1024_l2=0.0075
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=4.03, avg_loss=0.0045, train_err=0.0706
Eval: 1024_h1=0.0042, 1024_l2=0.0025
[Rank 0]: saved training state to save/1d_burgers/pure/f-w-l
[201] time=4.05, avg_loss=0.0037, train_err=0.0586
Eval: 1024_h1=0.0058, 1024_l2=0.0033
[202] time=4.03, avg_loss=0.0039, train_err=0.0614
Eval: 1024_h1=0.0052, 1024_l2=0.0035
[203] time=4.04, avg_loss=0.0042, train_err=0.0664
Eval: 1024_h1=0.0056, 1024_l2=0.0058
[204] time=4.04, avg_loss=0.0033, train_err=0.0520
Eval: 1024_h1=0.0044, 1024_l2=0.0025
[205] time=4.03, avg_loss=0.0035, train_err=0.0555
Eval: 1024_h1=0.0046, 1024_l2=0.0034
[206] time=4.05, avg_loss=0.0036, train_err=0.0572
Eval: 1024_h1=0.0067, 1024_l2=0.0048
[207] time=4.03, avg_loss=0.0038, train_err=0.0603
Eval: 1024_h1=0.0042, 1024_l2=0.0036
[208] time=4.03, avg_loss=0.0040, train_err=0.0631
Eval: 1024_h1=0.0048, 1024_l2=0.0031
[209] time=4.04, avg_loss=0.0040, train_err=0.0628
Eval: 1024_h1=0.0053, 1024_l2=0.0032
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=4.05, avg_loss=0.0033, train_err=0.0525
Eval: 1024_h1=0.0047, 1024_l2=0.0030
[211] time=4.03, avg_loss=0.0037, train_err=0.0592
Eval: 1024_h1=0.0050, 1024_l2=0.0041
[212] time=4.04, avg_loss=0.0035, train_err=0.0549
Eval: 1024_h1=0.0048, 1024_l2=0.0032
[213] time=4.03, avg_loss=0.0034, train_err=0.0538
Eval: 1024_h1=0.0056, 1024_l2=0.0041
[214] time=4.04, avg_loss=0.0037, train_err=0.0584
Eval: 1024_h1=0.0064, 1024_l2=0.0043
[215] time=4.05, avg_loss=0.0037, train_err=0.0589
Eval: 1024_h1=0.0048, 1024_l2=0.0027
[216] time=4.03, avg_loss=0.0041, train_err=0.0655
Eval: 1024_h1=0.0068, 1024_l2=0.0056
[217] time=4.05, avg_loss=0.0039, train_err=0.0616
Eval: 1024_h1=0.0053, 1024_l2=0.0042
[218] time=4.04, avg_loss=0.0039, train_err=0.0622
Eval: 1024_h1=0.0051, 1024_l2=0.0051
[219] time=4.03, avg_loss=0.0041, train_err=0.0656
Eval: 1024_h1=0.0085, 1024_l2=0.0062
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=4.04, avg_loss=0.0051, train_err=0.0805
Eval: 1024_h1=0.0077, 1024_l2=0.0058
[221] time=4.03, avg_loss=0.0042, train_err=0.0671
Eval: 1024_h1=0.0058, 1024_l2=0.0043
[222] time=4.03, avg_loss=0.0037, train_err=0.0592
Eval: 1024_h1=0.0051, 1024_l2=0.0042
[223] time=4.04, avg_loss=0.0036, train_err=0.0577
Eval: 1024_h1=0.0053, 1024_l2=0.0057
[224] time=4.04, avg_loss=0.0036, train_err=0.0577
Eval: 1024_h1=0.0051, 1024_l2=0.0028
[225] time=4.03, avg_loss=0.0039, train_err=0.0620
Eval: 1024_h1=0.0048, 1024_l2=0.0033
[226] time=4.03, avg_loss=0.0038, train_err=0.0596
Eval: 1024_h1=0.0053, 1024_l2=0.0048
[227] time=4.03, avg_loss=0.0039, train_err=0.0626
Eval: 1024_h1=0.0065, 1024_l2=0.0044
[228] time=4.04, avg_loss=0.0038, train_err=0.0608
Eval: 1024_h1=0.0056, 1024_l2=0.0053
[229] time=4.03, avg_loss=0.0039, train_err=0.0624
Eval: 1024_h1=0.0045, 1024_l2=0.0033
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=4.04, avg_loss=0.0034, train_err=0.0546
Eval: 1024_h1=0.0050, 1024_l2=0.0036
[231] time=4.03, avg_loss=0.0047, train_err=0.0752
Eval: 1024_h1=0.0086, 1024_l2=0.0066
[232] time=4.03, avg_loss=0.0047, train_err=0.0746
Eval: 1024_h1=0.0074, 1024_l2=0.0054
[233] time=4.03, avg_loss=0.0040, train_err=0.0637
Eval: 1024_h1=0.0042, 1024_l2=0.0032
[234] time=4.05, avg_loss=0.0032, train_err=0.0503
Eval: 1024_h1=0.0066, 1024_l2=0.0065
[235] time=4.04, avg_loss=0.0041, train_err=0.0646
Eval: 1024_h1=0.0052, 1024_l2=0.0030
[236] time=4.04, avg_loss=0.0040, train_err=0.0635
Eval: 1024_h1=0.0057, 1024_l2=0.0054
[237] time=4.03, avg_loss=0.0034, train_err=0.0540
Eval: 1024_h1=0.0056, 1024_l2=0.0036
[238] time=4.04, avg_loss=0.0041, train_err=0.0659
Eval: 1024_h1=0.0056, 1024_l2=0.0039
[239] time=4.04, avg_loss=0.0035, train_err=0.0563
Eval: 1024_h1=0.0058, 1024_l2=0.0036
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=4.04, avg_loss=0.0041, train_err=0.0655
Eval: 1024_h1=0.0045, 1024_l2=0.0029
[241] time=4.04, avg_loss=0.0039, train_err=0.0612
Eval: 1024_h1=0.0051, 1024_l2=0.0044
[242] time=4.04, avg_loss=0.0036, train_err=0.0565
Eval: 1024_h1=0.0102, 1024_l2=0.0097
[243] time=4.03, avg_loss=0.0048, train_err=0.0760
Eval: 1024_h1=0.0097, 1024_l2=0.0078
[244] time=4.04, avg_loss=0.0050, train_err=0.0793
Eval: 1024_h1=0.0044, 1024_l2=0.0029
[245] time=4.04, avg_loss=0.0031, train_err=0.0493
Eval: 1024_h1=0.0046, 1024_l2=0.0029
[246] time=4.03, avg_loss=0.0038, train_err=0.0609
Eval: 1024_h1=0.0050, 1024_l2=0.0031
[247] time=4.04, avg_loss=0.0038, train_err=0.0600
Eval: 1024_h1=0.0054, 1024_l2=0.0031
[248] time=4.04, avg_loss=0.0045, train_err=0.0718
Eval: 1024_h1=0.0079, 1024_l2=0.0067
[249] time=4.05, avg_loss=0.0044, train_err=0.0702
Eval: 1024_h1=0.0067, 1024_l2=0.0052
{'train_err': 0.07023933662899903, 'avg_loss': 0.004425078207626939, 'avg_lasso_loss': None, 'epoch_train_time': 4.046723902225494, '1024_h1': tensor(0.0067, device='cuda:0'), '1024_l2': tensor(0.0052, device='cuda:0')}
