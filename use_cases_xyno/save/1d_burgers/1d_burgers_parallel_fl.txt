
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Fourier Neural Operator (FNO) Kernel ]
>>> Overview:
The FNO leverages Fourier Transform to map input data into the spectral domain, where
convolutional operations are performed by truncating high-frequency modes.

>>> Key Features:
- Effective for parameterized Partial Differential Equations (PDEs).
- Reduces computational complexity by retaining only significant modes.

>>> Reference:
Li, Z. et al. 'Fourier Neural Operator for Parametric Partial Differential Equations' (ICLR 2021).
Link: https://arxiv.org/pdf/2010.08895
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 1623617

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7faa6f10a870>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7faa4a2a30e0>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7faa4a2a30e0>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7faa4a364d10>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=6.95, avg_loss=0.4310, train_err=6.8412
Eval: 1024_h1=0.1146, 1024_l2=0.0854
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[1] time=6.45, avg_loss=0.1616, train_err=2.5654
Eval: 1024_h1=0.2132, 1024_l2=0.1962
[2] time=6.45, avg_loss=0.1056, train_err=1.6760
Eval: 1024_h1=0.1416, 1024_l2=0.1980
[3] time=6.45, avg_loss=0.0724, train_err=1.1491
Eval: 1024_h1=0.0739, 1024_l2=0.0707
[4] time=6.45, avg_loss=0.0565, train_err=0.8965
Eval: 1024_h1=0.0432, 1024_l2=0.0362
[5] time=6.44, avg_loss=0.0669, train_err=1.0627
Eval: 1024_h1=0.0545, 1024_l2=0.0498
[6] time=6.45, avg_loss=0.0412, train_err=0.6534
Eval: 1024_h1=0.0921, 1024_l2=0.0767
[7] time=6.44, avg_loss=0.0643, train_err=1.0200
Eval: 1024_h1=0.0552, 1024_l2=0.0518
[8] time=6.44, avg_loss=0.0332, train_err=0.5275
Eval: 1024_h1=0.0216, 1024_l2=0.0373
[9] time=6.45, avg_loss=0.0286, train_err=0.4546
Eval: 1024_h1=0.0404, 1024_l2=0.0392
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=12.24, avg_loss=0.0308, train_err=0.4893
Eval: 1024_h1=0.0367, 1024_l2=0.0260
[11] time=12.21, avg_loss=0.0296, train_err=0.4700
Eval: 1024_h1=0.0235, 1024_l2=0.0203
[12] time=12.22, avg_loss=0.0281, train_err=0.4459
Eval: 1024_h1=0.0263, 1024_l2=0.0230
[13] time=12.21, avg_loss=0.0309, train_err=0.4912
Eval: 1024_h1=0.0477, 1024_l2=0.0366
[14] time=12.22, avg_loss=0.0273, train_err=0.4335
Eval: 1024_h1=0.0219, 1024_l2=0.0196
[15] time=12.22, avg_loss=0.0244, train_err=0.3868
Eval: 1024_h1=0.0248, 1024_l2=0.0182
[16] time=12.22, avg_loss=0.0270, train_err=0.4279
Eval: 1024_h1=0.0474, 1024_l2=0.0391
[17] time=12.21, avg_loss=0.0226, train_err=0.3588
Eval: 1024_h1=0.0253, 1024_l2=0.0264
[18] time=12.22, avg_loss=0.0255, train_err=0.4043
Eval: 1024_h1=0.0237, 1024_l2=0.0165
[19] time=12.22, avg_loss=0.0534, train_err=0.8478
Eval: 1024_h1=0.0774, 1024_l2=0.0669
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=12.21, avg_loss=0.0367, train_err=0.5823
Eval: 1024_h1=0.0274, 1024_l2=0.0240
[21] time=12.22, avg_loss=0.0307, train_err=0.4877
Eval: 1024_h1=0.0607, 1024_l2=0.0605
[22] time=12.21, avg_loss=0.0344, train_err=0.5457
Eval: 1024_h1=0.0773, 1024_l2=0.0614
[23] time=12.21, avg_loss=0.0272, train_err=0.4315
Eval: 1024_h1=0.0400, 1024_l2=0.0351
[24] time=12.21, avg_loss=0.0285, train_err=0.4520
Eval: 1024_h1=0.0441, 1024_l2=0.0374
[25] time=12.21, avg_loss=0.0233, train_err=0.3697
Eval: 1024_h1=0.0197, 1024_l2=0.0214
[26] time=12.21, avg_loss=0.0218, train_err=0.3466
Eval: 1024_h1=0.0205, 1024_l2=0.0251
[27] time=12.21, avg_loss=0.0198, train_err=0.3143
Eval: 1024_h1=0.0165, 1024_l2=0.0177
[28] time=12.21, avg_loss=0.0232, train_err=0.3680
Eval: 1024_h1=0.0166, 1024_l2=0.0125
[29] time=12.22, avg_loss=0.0237, train_err=0.3766
Eval: 1024_h1=0.0456, 1024_l2=0.0374
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=12.22, avg_loss=0.0279, train_err=0.4431
Eval: 1024_h1=0.0304, 1024_l2=0.0254
[31] time=12.21, avg_loss=0.0209, train_err=0.3325
Eval: 1024_h1=0.0197, 1024_l2=0.0164
[32] time=12.21, avg_loss=0.0176, train_err=0.2796
Eval: 1024_h1=0.0159, 1024_l2=0.0160
[33] time=12.21, avg_loss=0.0254, train_err=0.4033
Eval: 1024_h1=0.0192, 1024_l2=0.0201
[34] time=12.21, avg_loss=0.0223, train_err=0.3545
Eval: 1024_h1=0.0173, 1024_l2=0.0271
[35] time=12.21, avg_loss=0.0169, train_err=0.2688
Eval: 1024_h1=0.0200, 1024_l2=0.0158
[36] time=12.21, avg_loss=0.0191, train_err=0.3033
Eval: 1024_h1=0.0169, 1024_l2=0.0154
[37] time=12.21, avg_loss=0.0194, train_err=0.3085
Eval: 1024_h1=0.0244, 1024_l2=0.0213
[38] time=12.22, avg_loss=0.0193, train_err=0.3056
Eval: 1024_h1=0.0112, 1024_l2=0.0117
[39] time=12.21, avg_loss=0.0184, train_err=0.2919
Eval: 1024_h1=0.0132, 1024_l2=0.0103
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=12.21, avg_loss=0.0232, train_err=0.3682
Eval: 1024_h1=0.0433, 1024_l2=0.0387
[41] time=12.21, avg_loss=0.0189, train_err=0.2997
Eval: 1024_h1=0.0156, 1024_l2=0.0162
[42] time=12.21, avg_loss=0.0192, train_err=0.3053
Eval: 1024_h1=0.0369, 1024_l2=0.0365
[43] time=12.21, avg_loss=0.0187, train_err=0.2969
Eval: 1024_h1=0.0283, 1024_l2=0.0165
[44] time=12.21, avg_loss=0.0171, train_err=0.2720
Eval: 1024_h1=0.0227, 1024_l2=0.0222
[45] time=12.21, avg_loss=0.0161, train_err=0.2562
Eval: 1024_h1=0.0134, 1024_l2=0.0127
[46] time=12.21, avg_loss=0.0169, train_err=0.2681
Eval: 1024_h1=0.0372, 1024_l2=0.0271
[47] time=12.21, avg_loss=0.0207, train_err=0.3281
Eval: 1024_h1=0.0404, 1024_l2=0.0390
[48] time=12.21, avg_loss=0.0442, train_err=0.7021
Eval: 1024_h1=0.0336, 1024_l2=0.0320
[49] time=12.21, avg_loss=0.0287, train_err=0.4560
Eval: 1024_h1=0.0358, 1024_l2=0.0455
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=12.22, avg_loss=0.0258, train_err=0.4100
Eval: 1024_h1=0.0183, 1024_l2=0.0155
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[51] time=12.22, avg_loss=0.0168, train_err=0.2673
Eval: 1024_h1=0.0384, 1024_l2=0.0261
[52] time=12.21, avg_loss=0.0204, train_err=0.3239
Eval: 1024_h1=0.0367, 1024_l2=0.0288
[53] time=12.21, avg_loss=0.0213, train_err=0.3380
Eval: 1024_h1=0.0333, 1024_l2=0.0325
[54] time=12.21, avg_loss=0.0193, train_err=0.3064
Eval: 1024_h1=0.0217, 1024_l2=0.0138
[55] time=12.22, avg_loss=0.0443, train_err=0.7025
Eval: 1024_h1=0.0470, 1024_l2=0.0505
[56] time=12.22, avg_loss=0.0305, train_err=0.4837
Eval: 1024_h1=0.0127, 1024_l2=0.0128
[57] time=12.21, avg_loss=0.0193, train_err=0.3070
Eval: 1024_h1=0.0352, 1024_l2=0.0310
[58] time=12.22, avg_loss=0.0185, train_err=0.2929
Eval: 1024_h1=0.0141, 1024_l2=0.0173
[59] time=12.21, avg_loss=0.0145, train_err=0.2295
Eval: 1024_h1=0.0119, 1024_l2=0.0104
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=12.21, avg_loss=0.0141, train_err=0.2234
Eval: 1024_h1=0.0103, 1024_l2=0.0101
[61] time=12.21, avg_loss=0.0170, train_err=0.2699
Eval: 1024_h1=0.0105, 1024_l2=0.0106
[62] time=12.21, avg_loss=0.0188, train_err=0.2991
Eval: 1024_h1=0.0215, 1024_l2=0.0165
[63] time=12.22, avg_loss=0.0179, train_err=0.2847
Eval: 1024_h1=0.0134, 1024_l2=0.0130
[64] time=12.21, avg_loss=0.0176, train_err=0.2789
Eval: 1024_h1=0.0220, 1024_l2=0.0148
[65] time=12.21, avg_loss=0.0223, train_err=0.3544
Eval: 1024_h1=0.0567, 1024_l2=0.0541
[66] time=12.21, avg_loss=0.0191, train_err=0.3027
Eval: 1024_h1=0.0139, 1024_l2=0.0088
[67] time=12.22, avg_loss=0.0261, train_err=0.4138
Eval: 1024_h1=0.0246, 1024_l2=0.0279
[68] time=12.21, avg_loss=0.0168, train_err=0.2674
Eval: 1024_h1=0.0150, 1024_l2=0.0116
[69] time=12.21, avg_loss=0.0171, train_err=0.2720
Eval: 1024_h1=0.0356, 1024_l2=0.0291
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=12.22, avg_loss=0.0192, train_err=0.3049
Eval: 1024_h1=0.0336, 1024_l2=0.0237
[71] time=12.21, avg_loss=0.0187, train_err=0.2973
Eval: 1024_h1=0.0136, 1024_l2=0.0116
[72] time=12.21, avg_loss=0.0171, train_err=0.2718
Eval: 1024_h1=0.0182, 1024_l2=0.0160
[73] time=12.21, avg_loss=0.0170, train_err=0.2705
Eval: 1024_h1=0.0211, 1024_l2=0.0185
[74] time=12.21, avg_loss=0.0170, train_err=0.2702
Eval: 1024_h1=0.0157, 1024_l2=0.0149
[75] time=12.12, avg_loss=0.0167, train_err=0.2647
Eval: 1024_h1=0.0400, 1024_l2=0.0356
[76] time=12.11, avg_loss=0.0173, train_err=0.2739
Eval: 1024_h1=0.0147, 1024_l2=0.0145
[77] time=12.11, avg_loss=0.0176, train_err=0.2799
Eval: 1024_h1=0.0277, 1024_l2=0.0213
[78] time=12.11, avg_loss=0.0153, train_err=0.2425
Eval: 1024_h1=0.0187, 1024_l2=0.0153
[79] time=12.12, avg_loss=0.0149, train_err=0.2359
Eval: 1024_h1=0.0142, 1024_l2=0.0094
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=12.12, avg_loss=0.0180, train_err=0.2851
Eval: 1024_h1=0.0167, 1024_l2=0.0143
[81] time=12.12, avg_loss=0.0134, train_err=0.2125
Eval: 1024_h1=0.0310, 1024_l2=0.0215
[82] time=12.12, avg_loss=0.0164, train_err=0.2597
Eval: 1024_h1=0.0161, 1024_l2=0.0157
[83] time=12.11, avg_loss=0.0144, train_err=0.2290
Eval: 1024_h1=0.0174, 1024_l2=0.0180
[84] time=12.12, avg_loss=0.0172, train_err=0.2737
Eval: 1024_h1=0.0128, 1024_l2=0.0085
[85] time=12.12, avg_loss=0.0163, train_err=0.2594
Eval: 1024_h1=0.0193, 1024_l2=0.0230
[86] time=12.11, avg_loss=0.0146, train_err=0.2312
Eval: 1024_h1=0.0261, 1024_l2=0.0192
[87] time=12.12, avg_loss=0.0196, train_err=0.3119
Eval: 1024_h1=0.0128, 1024_l2=0.0090
[88] time=12.12, avg_loss=0.0299, train_err=0.4747
Eval: 1024_h1=0.0179, 1024_l2=0.0112
[89] time=12.12, avg_loss=0.0150, train_err=0.2388
Eval: 1024_h1=0.0155, 1024_l2=0.0098
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=12.12, avg_loss=0.0116, train_err=0.1846
Eval: 1024_h1=0.0104, 1024_l2=0.0085
[91] time=12.11, avg_loss=0.0123, train_err=0.1960
Eval: 1024_h1=0.0196, 1024_l2=0.0228
[92] time=12.11, avg_loss=0.0212, train_err=0.3362
Eval: 1024_h1=0.0123, 1024_l2=0.0165
[93] time=12.12, avg_loss=0.0190, train_err=0.3023
Eval: 1024_h1=0.0179, 1024_l2=0.0180
[94] time=12.12, avg_loss=0.0145, train_err=0.2309
Eval: 1024_h1=0.0211, 1024_l2=0.0184
[95] time=12.11, avg_loss=0.0144, train_err=0.2284
Eval: 1024_h1=0.0201, 1024_l2=0.0165
[96] time=12.12, avg_loss=0.0163, train_err=0.2584
Eval: 1024_h1=0.0109, 1024_l2=0.0084
[97] time=12.12, avg_loss=0.0158, train_err=0.2512
Eval: 1024_h1=0.0436, 1024_l2=0.0390
[98] time=12.12, avg_loss=0.0188, train_err=0.2979
Eval: 1024_h1=0.0293, 1024_l2=0.0243
[99] time=12.12, avg_loss=0.0164, train_err=0.2601
Eval: 1024_h1=0.0138, 1024_l2=0.0118
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=12.11, avg_loss=0.0093, train_err=0.1481
Eval: 1024_h1=0.0115, 1024_l2=0.0130
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[101] time=12.12, avg_loss=0.0074, train_err=0.1172
Eval: 1024_h1=0.0059, 1024_l2=0.0053
[102] time=12.12, avg_loss=0.0060, train_err=0.0952
Eval: 1024_h1=0.0113, 1024_l2=0.0104
[103] time=12.12, avg_loss=0.0066, train_err=0.1053
Eval: 1024_h1=0.0090, 1024_l2=0.0078
[104] time=12.12, avg_loss=0.0085, train_err=0.1347
Eval: 1024_h1=0.0103, 1024_l2=0.0119
[105] time=12.12, avg_loss=0.0088, train_err=0.1392
Eval: 1024_h1=0.0072, 1024_l2=0.0053
[106] time=12.12, avg_loss=0.0087, train_err=0.1385
Eval: 1024_h1=0.0103, 1024_l2=0.0077
[107] time=12.11, avg_loss=0.0073, train_err=0.1162
Eval: 1024_h1=0.0126, 1024_l2=0.0089
[108] time=12.12, avg_loss=0.0087, train_err=0.1383
Eval: 1024_h1=0.0073, 1024_l2=0.0071
[109] time=12.12, avg_loss=0.0071, train_err=0.1123
Eval: 1024_h1=0.0080, 1024_l2=0.0072
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=12.12, avg_loss=0.0091, train_err=0.1443
Eval: 1024_h1=0.0144, 1024_l2=0.0114
[111] time=12.12, avg_loss=0.0066, train_err=0.1041
Eval: 1024_h1=0.0101, 1024_l2=0.0107
[112] time=12.12, avg_loss=0.0066, train_err=0.1042
Eval: 1024_h1=0.0068, 1024_l2=0.0056
[113] time=12.12, avg_loss=0.0077, train_err=0.1218
Eval: 1024_h1=0.0083, 1024_l2=0.0062
[114] time=12.12, avg_loss=0.0082, train_err=0.1302
Eval: 1024_h1=0.0084, 1024_l2=0.0069
[115] time=12.11, avg_loss=0.0091, train_err=0.1438
Eval: 1024_h1=0.0070, 1024_l2=0.0069
[116] time=12.12, avg_loss=0.0086, train_err=0.1367
Eval: 1024_h1=0.0195, 1024_l2=0.0168
[117] time=12.11, avg_loss=0.0112, train_err=0.1771
Eval: 1024_h1=0.0141, 1024_l2=0.0087
[118] time=12.12, avg_loss=0.0093, train_err=0.1482
Eval: 1024_h1=0.0119, 1024_l2=0.0088
[119] time=12.12, avg_loss=0.0074, train_err=0.1176
Eval: 1024_h1=0.0176, 1024_l2=0.0151
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=12.12, avg_loss=0.0106, train_err=0.1685
Eval: 1024_h1=0.0170, 1024_l2=0.0097
[121] time=12.12, avg_loss=0.0111, train_err=0.1756
Eval: 1024_h1=0.0084, 1024_l2=0.0066
[122] time=12.12, avg_loss=0.0085, train_err=0.1344
Eval: 1024_h1=0.0066, 1024_l2=0.0062
[123] time=12.12, avg_loss=0.0088, train_err=0.1400
Eval: 1024_h1=0.0113, 1024_l2=0.0164
[124] time=12.12, avg_loss=0.0089, train_err=0.1415
Eval: 1024_h1=0.0122, 1024_l2=0.0121
[125] time=12.12, avg_loss=0.0088, train_err=0.1394
Eval: 1024_h1=0.0091, 1024_l2=0.0075
[126] time=12.12, avg_loss=0.0080, train_err=0.1270
Eval: 1024_h1=0.0072, 1024_l2=0.0063
[127] time=12.12, avg_loss=0.0084, train_err=0.1336
Eval: 1024_h1=0.0125, 1024_l2=0.0115
[128] time=12.12, avg_loss=0.0090, train_err=0.1428
Eval: 1024_h1=0.0074, 1024_l2=0.0076
[129] time=12.12, avg_loss=0.0076, train_err=0.1207
Eval: 1024_h1=0.0057, 1024_l2=0.0052
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=12.12, avg_loss=0.0070, train_err=0.1111
Eval: 1024_h1=0.0110, 1024_l2=0.0090
[131] time=12.12, avg_loss=0.0072, train_err=0.1139
Eval: 1024_h1=0.0097, 1024_l2=0.0069
[132] time=12.12, avg_loss=0.0086, train_err=0.1362
Eval: 1024_h1=0.0059, 1024_l2=0.0047
[133] time=12.12, avg_loss=0.0080, train_err=0.1270
Eval: 1024_h1=0.0077, 1024_l2=0.0059
[134] time=12.11, avg_loss=0.0061, train_err=0.0965
Eval: 1024_h1=0.0048, 1024_l2=0.0042
[135] time=12.11, avg_loss=0.0074, train_err=0.1178
Eval: 1024_h1=0.0069, 1024_l2=0.0059
[136] time=12.12, avg_loss=0.0086, train_err=0.1370
Eval: 1024_h1=0.0107, 1024_l2=0.0079
[137] time=12.12, avg_loss=0.0074, train_err=0.1170
Eval: 1024_h1=0.0113, 1024_l2=0.0085
[138] time=12.12, avg_loss=0.0080, train_err=0.1275
Eval: 1024_h1=0.0069, 1024_l2=0.0070
[139] time=12.12, avg_loss=0.0087, train_err=0.1382
Eval: 1024_h1=0.0154, 1024_l2=0.0115
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=12.12, avg_loss=0.0090, train_err=0.1434
Eval: 1024_h1=0.0139, 1024_l2=0.0097
[141] time=12.11, avg_loss=0.0083, train_err=0.1322
Eval: 1024_h1=0.0157, 1024_l2=0.0096
[142] time=12.12, avg_loss=0.0095, train_err=0.1506
Eval: 1024_h1=0.0166, 1024_l2=0.0127
[143] time=12.12, avg_loss=0.0079, train_err=0.1251
Eval: 1024_h1=0.0075, 1024_l2=0.0069
[144] time=12.12, avg_loss=0.0085, train_err=0.1343
Eval: 1024_h1=0.0121, 1024_l2=0.0100
[145] time=12.12, avg_loss=0.0082, train_err=0.1307
Eval: 1024_h1=0.0082, 1024_l2=0.0058
[146] time=12.12, avg_loss=0.0081, train_err=0.1290
Eval: 1024_h1=0.0126, 1024_l2=0.0091
[147] time=12.12, avg_loss=0.0089, train_err=0.1407
Eval: 1024_h1=0.0128, 1024_l2=0.0087
[148] time=12.11, avg_loss=0.0089, train_err=0.1420
Eval: 1024_h1=0.0178, 1024_l2=0.0173
[149] time=12.12, avg_loss=0.0082, train_err=0.1300
Eval: 1024_h1=0.0056, 1024_l2=0.0057
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=12.12, avg_loss=0.0078, train_err=0.1243
Eval: 1024_h1=0.0203, 1024_l2=0.0172
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[151] time=12.12, avg_loss=0.0106, train_err=0.1688
Eval: 1024_h1=0.0126, 1024_l2=0.0166
[152] time=12.12, avg_loss=0.0079, train_err=0.1255
Eval: 1024_h1=0.0165, 1024_l2=0.0117
[153] time=12.12, avg_loss=0.0093, train_err=0.1478
Eval: 1024_h1=0.0101, 1024_l2=0.0100
[154] time=12.12, avg_loss=0.0075, train_err=0.1187
Eval: 1024_h1=0.0061, 1024_l2=0.0052
[155] time=12.12, avg_loss=0.0073, train_err=0.1165
Eval: 1024_h1=0.0088, 1024_l2=0.0077
[156] time=12.12, avg_loss=0.0088, train_err=0.1404
Eval: 1024_h1=0.0119, 1024_l2=0.0108
[157] time=12.12, avg_loss=0.0081, train_err=0.1288
Eval: 1024_h1=0.0106, 1024_l2=0.0098
[158] time=12.12, avg_loss=0.0086, train_err=0.1373
Eval: 1024_h1=0.0050, 1024_l2=0.0048
[159] time=12.12, avg_loss=0.0078, train_err=0.1239
Eval: 1024_h1=0.0105, 1024_l2=0.0099
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=12.11, avg_loss=0.0086, train_err=0.1361
Eval: 1024_h1=0.0148, 1024_l2=0.0127
[161] time=12.12, avg_loss=0.0085, train_err=0.1357
Eval: 1024_h1=0.0083, 1024_l2=0.0056
[162] time=12.12, avg_loss=0.0076, train_err=0.1213
Eval: 1024_h1=0.0057, 1024_l2=0.0034
[163] time=12.12, avg_loss=0.0079, train_err=0.1250
Eval: 1024_h1=0.0123, 1024_l2=0.0092
[164] time=12.12, avg_loss=0.0080, train_err=0.1269
Eval: 1024_h1=0.0073, 1024_l2=0.0093
[165] time=12.12, avg_loss=0.0069, train_err=0.1101
Eval: 1024_h1=0.0108, 1024_l2=0.0080
[166] time=12.12, avg_loss=0.0093, train_err=0.1472
Eval: 1024_h1=0.0158, 1024_l2=0.0103
[167] time=12.12, avg_loss=0.0074, train_err=0.1176
Eval: 1024_h1=0.0069, 1024_l2=0.0071
[168] time=12.11, avg_loss=0.0082, train_err=0.1305
Eval: 1024_h1=0.0095, 1024_l2=0.0062
[169] time=12.12, avg_loss=0.0080, train_err=0.1276
Eval: 1024_h1=0.0079, 1024_l2=0.0082
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=12.12, avg_loss=0.0081, train_err=0.1291
Eval: 1024_h1=0.0062, 1024_l2=0.0058
[171] time=12.12, avg_loss=0.0072, train_err=0.1137
Eval: 1024_h1=0.0116, 1024_l2=0.0074
[172] time=12.12, avg_loss=0.0073, train_err=0.1156
Eval: 1024_h1=0.0081, 1024_l2=0.0046
[173] time=12.12, avg_loss=0.0067, train_err=0.1064
Eval: 1024_h1=0.0071, 1024_l2=0.0049
[174] time=12.12, avg_loss=0.0079, train_err=0.1247
Eval: 1024_h1=0.0055, 1024_l2=0.0068
[175] time=12.12, avg_loss=0.0063, train_err=0.0995
Eval: 1024_h1=0.0134, 1024_l2=0.0094
[176] time=12.12, avg_loss=0.0086, train_err=0.1363
Eval: 1024_h1=0.0063, 1024_l2=0.0047
[177] time=12.12, avg_loss=0.0079, train_err=0.1253
Eval: 1024_h1=0.0060, 1024_l2=0.0091
[178] time=12.12, avg_loss=0.0073, train_err=0.1161
Eval: 1024_h1=0.0082, 1024_l2=0.0062
[179] time=12.11, avg_loss=0.0072, train_err=0.1139
Eval: 1024_h1=0.0084, 1024_l2=0.0072
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=12.12, avg_loss=0.0113, train_err=0.1800
Eval: 1024_h1=0.0196, 1024_l2=0.0157
[181] time=12.12, avg_loss=0.0232, train_err=0.3677
Eval: 1024_h1=0.0144, 1024_l2=0.0152
[182] time=12.12, avg_loss=0.0207, train_err=0.3283
Eval: 1024_h1=0.0424, 1024_l2=0.0398
[183] time=12.12, avg_loss=0.0115, train_err=0.1828
Eval: 1024_h1=0.0074, 1024_l2=0.0065
[184] time=12.12, avg_loss=0.0073, train_err=0.1161
Eval: 1024_h1=0.0089, 1024_l2=0.0083
[185] time=12.12, avg_loss=0.0095, train_err=0.1500
Eval: 1024_h1=0.0105, 1024_l2=0.0169
[186] time=12.12, avg_loss=0.0099, train_err=0.1568
Eval: 1024_h1=0.0066, 1024_l2=0.0066
[187] time=12.11, avg_loss=0.0079, train_err=0.1250
Eval: 1024_h1=0.0088, 1024_l2=0.0080
[188] time=12.12, avg_loss=0.0088, train_err=0.1394
Eval: 1024_h1=0.0099, 1024_l2=0.0101
[189] time=12.12, avg_loss=0.0082, train_err=0.1307
Eval: 1024_h1=0.0064, 1024_l2=0.0042
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=12.12, avg_loss=0.0069, train_err=0.1101
Eval: 1024_h1=0.0073, 1024_l2=0.0056
[191] time=12.12, avg_loss=0.0078, train_err=0.1242
Eval: 1024_h1=0.0169, 1024_l2=0.0178
[192] time=12.12, avg_loss=0.0097, train_err=0.1543
Eval: 1024_h1=0.0086, 1024_l2=0.0070
[193] time=12.12, avg_loss=0.0087, train_err=0.1375
Eval: 1024_h1=0.0122, 1024_l2=0.0086
[194] time=12.12, avg_loss=0.0086, train_err=0.1366
Eval: 1024_h1=0.0094, 1024_l2=0.0069
[195] time=12.12, avg_loss=0.0071, train_err=0.1129
Eval: 1024_h1=0.0069, 1024_l2=0.0069
[196] time=12.12, avg_loss=0.0093, train_err=0.1470
Eval: 1024_h1=0.0069, 1024_l2=0.0042
[197] time=12.12, avg_loss=0.0078, train_err=0.1243
Eval: 1024_h1=0.0087, 1024_l2=0.0068
[198] time=12.12, avg_loss=0.0080, train_err=0.1266
Eval: 1024_h1=0.0092, 1024_l2=0.0105
[199] time=12.12, avg_loss=0.0078, train_err=0.1243
Eval: 1024_h1=0.0059, 1024_l2=0.0042
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=12.12, avg_loss=0.0040, train_err=0.0630
Eval: 1024_h1=0.0042, 1024_l2=0.0054
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[201] time=12.13, avg_loss=0.0036, train_err=0.0565
Eval: 1024_h1=0.0041, 1024_l2=0.0042
[202] time=12.12, avg_loss=0.0041, train_err=0.0657
Eval: 1024_h1=0.0042, 1024_l2=0.0035
[203] time=12.12, avg_loss=0.0043, train_err=0.0687
Eval: 1024_h1=0.0056, 1024_l2=0.0061
[204] time=12.12, avg_loss=0.0040, train_err=0.0635
Eval: 1024_h1=0.0065, 1024_l2=0.0042
[205] time=12.12, avg_loss=0.0044, train_err=0.0704
Eval: 1024_h1=0.0040, 1024_l2=0.0041
[206] time=12.12, avg_loss=0.0037, train_err=0.0587
Eval: 1024_h1=0.0046, 1024_l2=0.0032
[207] time=12.12, avg_loss=0.0045, train_err=0.0720
Eval: 1024_h1=0.0068, 1024_l2=0.0046
[208] time=12.13, avg_loss=0.0046, train_err=0.0736
Eval: 1024_h1=0.0055, 1024_l2=0.0047
[209] time=12.12, avg_loss=0.0041, train_err=0.0648
Eval: 1024_h1=0.0049, 1024_l2=0.0034
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=12.12, avg_loss=0.0042, train_err=0.0669
Eval: 1024_h1=0.0070, 1024_l2=0.0070
[211] time=12.12, avg_loss=0.0042, train_err=0.0666
Eval: 1024_h1=0.0078, 1024_l2=0.0062
[212] time=12.13, avg_loss=0.0048, train_err=0.0755
Eval: 1024_h1=0.0054, 1024_l2=0.0045
[213] time=12.12, avg_loss=0.0038, train_err=0.0597
Eval: 1024_h1=0.0054, 1024_l2=0.0040
[214] time=12.13, avg_loss=0.0041, train_err=0.0647
Eval: 1024_h1=0.0087, 1024_l2=0.0066
[215] time=12.12, avg_loss=0.0044, train_err=0.0704
Eval: 1024_h1=0.0041, 1024_l2=0.0059
[216] time=12.13, avg_loss=0.0046, train_err=0.0738
Eval: 1024_h1=0.0047, 1024_l2=0.0032
[217] time=12.12, avg_loss=0.0049, train_err=0.0776
Eval: 1024_h1=0.0061, 1024_l2=0.0057
[218] time=12.13, avg_loss=0.0039, train_err=0.0625
Eval: 1024_h1=0.0039, 1024_l2=0.0045
[219] time=12.13, avg_loss=0.0044, train_err=0.0691
Eval: 1024_h1=0.0070, 1024_l2=0.0057
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=12.12, avg_loss=0.0043, train_err=0.0690
Eval: 1024_h1=0.0048, 1024_l2=0.0041
[221] time=12.13, avg_loss=0.0049, train_err=0.0778
Eval: 1024_h1=0.0072, 1024_l2=0.0069
[222] time=12.12, avg_loss=0.0044, train_err=0.0697
Eval: 1024_h1=0.0087, 1024_l2=0.0067
[223] time=12.12, avg_loss=0.0040, train_err=0.0639
Eval: 1024_h1=0.0043, 1024_l2=0.0042
[224] time=12.12, avg_loss=0.0035, train_err=0.0560
Eval: 1024_h1=0.0032, 1024_l2=0.0032
[225] time=12.12, avg_loss=0.0037, train_err=0.0585
Eval: 1024_h1=0.0040, 1024_l2=0.0059
[226] time=12.12, avg_loss=0.0041, train_err=0.0648
Eval: 1024_h1=0.0048, 1024_l2=0.0056
[227] time=12.12, avg_loss=0.0040, train_err=0.0638
Eval: 1024_h1=0.0047, 1024_l2=0.0032
[228] time=12.12, avg_loss=0.0038, train_err=0.0604
Eval: 1024_h1=0.0034, 1024_l2=0.0031
[229] time=12.12, avg_loss=0.0035, train_err=0.0556
Eval: 1024_h1=0.0042, 1024_l2=0.0037
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=12.12, avg_loss=0.0039, train_err=0.0618
Eval: 1024_h1=0.0049, 1024_l2=0.0046
[231] time=12.12, avg_loss=0.0038, train_err=0.0598
Eval: 1024_h1=0.0039, 1024_l2=0.0028
[232] time=12.12, avg_loss=0.0042, train_err=0.0665
Eval: 1024_h1=0.0064, 1024_l2=0.0056
[233] time=12.12, avg_loss=0.0044, train_err=0.0705
Eval: 1024_h1=0.0048, 1024_l2=0.0031
[234] time=12.11, avg_loss=0.0038, train_err=0.0599
Eval: 1024_h1=0.0049, 1024_l2=0.0040
[235] time=12.12, avg_loss=0.0035, train_err=0.0548
Eval: 1024_h1=0.0038, 1024_l2=0.0031
[236] time=12.12, avg_loss=0.0046, train_err=0.0727
Eval: 1024_h1=0.0037, 1024_l2=0.0031
[237] time=12.12, avg_loss=0.0049, train_err=0.0775
Eval: 1024_h1=0.0076, 1024_l2=0.0054
[238] time=12.12, avg_loss=0.0043, train_err=0.0680
Eval: 1024_h1=0.0044, 1024_l2=0.0048
[239] time=12.12, avg_loss=0.0038, train_err=0.0603
Eval: 1024_h1=0.0051, 1024_l2=0.0061
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=12.13, avg_loss=0.0044, train_err=0.0701
Eval: 1024_h1=0.0041, 1024_l2=0.0044
[241] time=12.12, avg_loss=0.0036, train_err=0.0577
Eval: 1024_h1=0.0033, 1024_l2=0.0035
[242] time=12.12, avg_loss=0.0043, train_err=0.0681
Eval: 1024_h1=0.0043, 1024_l2=0.0036
[243] time=12.12, avg_loss=0.0043, train_err=0.0690
Eval: 1024_h1=0.0032, 1024_l2=0.0022
[244] time=12.12, avg_loss=0.0032, train_err=0.0516
Eval: 1024_h1=0.0040, 1024_l2=0.0030
[245] time=12.11, avg_loss=0.0038, train_err=0.0609
Eval: 1024_h1=0.0036, 1024_l2=0.0033
[246] time=12.12, avg_loss=0.0040, train_err=0.0634
Eval: 1024_h1=0.0047, 1024_l2=0.0031
[247] time=12.11, avg_loss=0.0034, train_err=0.0536
Eval: 1024_h1=0.0030, 1024_l2=0.0030
[248] time=12.12, avg_loss=0.0047, train_err=0.0741
Eval: 1024_h1=0.0048, 1024_l2=0.0048
[249] time=12.12, avg_loss=0.0046, train_err=0.0728
Eval: 1024_h1=0.0056, 1024_l2=0.0036
Incre Res Update: change index to 25
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[250] time=12.12, avg_loss=0.0043, train_err=0.0682
Eval: 1024_h1=0.0065, 1024_l2=0.0059
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[251] time=12.12, avg_loss=0.0047, train_err=0.0754
Eval: 1024_h1=0.0091, 1024_l2=0.0084
[252] time=12.12, avg_loss=0.0046, train_err=0.0731
Eval: 1024_h1=0.0077, 1024_l2=0.0061
[253] time=12.12, avg_loss=0.0043, train_err=0.0681
Eval: 1024_h1=0.0044, 1024_l2=0.0039
[254] time=12.12, avg_loss=0.0048, train_err=0.0756
Eval: 1024_h1=0.0064, 1024_l2=0.0060
[255] time=12.12, avg_loss=0.0043, train_err=0.0686
Eval: 1024_h1=0.0045, 1024_l2=0.0044
[256] time=12.12, avg_loss=0.0044, train_err=0.0706
Eval: 1024_h1=0.0070, 1024_l2=0.0058
[257] time=12.12, avg_loss=0.0042, train_err=0.0668
Eval: 1024_h1=0.0039, 1024_l2=0.0036
[258] time=12.12, avg_loss=0.0042, train_err=0.0672
Eval: 1024_h1=0.0034, 1024_l2=0.0026
[259] time=12.12, avg_loss=0.0038, train_err=0.0607
Eval: 1024_h1=0.0044, 1024_l2=0.0054
Incre Res Update: change index to 26
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[260] time=12.12, avg_loss=0.0034, train_err=0.0546
Eval: 1024_h1=0.0037, 1024_l2=0.0027
[261] time=12.13, avg_loss=0.0039, train_err=0.0618
Eval: 1024_h1=0.0044, 1024_l2=0.0032
[262] time=12.12, avg_loss=0.0038, train_err=0.0608
Eval: 1024_h1=0.0055, 1024_l2=0.0030
[263] time=12.11, avg_loss=0.0045, train_err=0.0714
Eval: 1024_h1=0.0034, 1024_l2=0.0034
[264] time=12.11, avg_loss=0.0043, train_err=0.0678
Eval: 1024_h1=0.0062, 1024_l2=0.0042
[265] time=12.12, avg_loss=0.0052, train_err=0.0819
Eval: 1024_h1=0.0041, 1024_l2=0.0027
[266] time=12.12, avg_loss=0.0041, train_err=0.0650
Eval: 1024_h1=0.0040, 1024_l2=0.0033
[267] time=12.12, avg_loss=0.0037, train_err=0.0582
Eval: 1024_h1=0.0053, 1024_l2=0.0048
[268] time=12.12, avg_loss=0.0040, train_err=0.0641
Eval: 1024_h1=0.0079, 1024_l2=0.0068
[269] time=12.12, avg_loss=0.0044, train_err=0.0705
Eval: 1024_h1=0.0037, 1024_l2=0.0026
Incre Res Update: change index to 27
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[270] time=12.12, avg_loss=0.0042, train_err=0.0665
Eval: 1024_h1=0.0084, 1024_l2=0.0062
[271] time=12.12, avg_loss=0.0042, train_err=0.0662
Eval: 1024_h1=0.0043, 1024_l2=0.0037
[272] time=12.12, avg_loss=0.0037, train_err=0.0592
Eval: 1024_h1=0.0054, 1024_l2=0.0035
[273] time=12.12, avg_loss=0.0045, train_err=0.0707
Eval: 1024_h1=0.0066, 1024_l2=0.0046
[274] time=12.12, avg_loss=0.0037, train_err=0.0588
Eval: 1024_h1=0.0044, 1024_l2=0.0044
[275] time=12.12, avg_loss=0.0040, train_err=0.0634
Eval: 1024_h1=0.0041, 1024_l2=0.0042
[276] time=12.12, avg_loss=0.0039, train_err=0.0625
Eval: 1024_h1=0.0096, 1024_l2=0.0085
[277] time=12.12, avg_loss=0.0051, train_err=0.0802
Eval: 1024_h1=0.0050, 1024_l2=0.0048
[278] time=12.12, avg_loss=0.0049, train_err=0.0779
Eval: 1024_h1=0.0040, 1024_l2=0.0036
[279] time=12.12, avg_loss=0.0044, train_err=0.0695
Eval: 1024_h1=0.0055, 1024_l2=0.0034
Incre Res Update: change index to 28
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[280] time=12.12, avg_loss=0.0046, train_err=0.0724
Eval: 1024_h1=0.0044, 1024_l2=0.0034
[281] time=12.12, avg_loss=0.0038, train_err=0.0599
Eval: 1024_h1=0.0032, 1024_l2=0.0057
[282] time=12.12, avg_loss=0.0038, train_err=0.0604
Eval: 1024_h1=0.0069, 1024_l2=0.0051
[283] time=12.12, avg_loss=0.0036, train_err=0.0577
Eval: 1024_h1=0.0046, 1024_l2=0.0033
[284] time=12.12, avg_loss=0.0047, train_err=0.0743
Eval: 1024_h1=0.0040, 1024_l2=0.0034
[285] time=12.12, avg_loss=0.0036, train_err=0.0573
Eval: 1024_h1=0.0057, 1024_l2=0.0047
[286] time=12.12, avg_loss=0.0045, train_err=0.0712
Eval: 1024_h1=0.0049, 1024_l2=0.0036
[287] time=12.12, avg_loss=0.0037, train_err=0.0581
Eval: 1024_h1=0.0046, 1024_l2=0.0034
[288] time=12.12, avg_loss=0.0048, train_err=0.0769
Eval: 1024_h1=0.0030, 1024_l2=0.0024
[289] time=12.12, avg_loss=0.0036, train_err=0.0575
Eval: 1024_h1=0.0051, 1024_l2=0.0074
Incre Res Update: change index to 29
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[290] time=12.12, avg_loss=0.0041, train_err=0.0643
Eval: 1024_h1=0.0063, 1024_l2=0.0051
[291] time=12.12, avg_loss=0.0036, train_err=0.0567
Eval: 1024_h1=0.0041, 1024_l2=0.0029
[292] time=12.12, avg_loss=0.0032, train_err=0.0510
Eval: 1024_h1=0.0049, 1024_l2=0.0040
[293] time=12.12, avg_loss=0.0037, train_err=0.0579
Eval: 1024_h1=0.0042, 1024_l2=0.0052
[294] time=12.12, avg_loss=0.0052, train_err=0.0826
Eval: 1024_h1=0.0044, 1024_l2=0.0039
[295] time=12.12, avg_loss=0.0038, train_err=0.0601
Eval: 1024_h1=0.0044, 1024_l2=0.0030
[296] time=12.12, avg_loss=0.0039, train_err=0.0611
Eval: 1024_h1=0.0039, 1024_l2=0.0032
[297] time=12.12, avg_loss=0.0043, train_err=0.0683
Eval: 1024_h1=0.0032, 1024_l2=0.0034
[298] time=12.12, avg_loss=0.0041, train_err=0.0651
Eval: 1024_h1=0.0054, 1024_l2=0.0037
[299] time=12.12, avg_loss=0.0043, train_err=0.0690
Eval: 1024_h1=0.0072, 1024_l2=0.0061
Incre Res Update: change index to 30
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[300] time=12.12, avg_loss=0.0027, train_err=0.0428
Eval: 1024_h1=0.0023, 1024_l2=0.0018
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[301] time=12.13, avg_loss=0.0020, train_err=0.0316
Eval: 1024_h1=0.0029, 1024_l2=0.0024
[302] time=12.12, avg_loss=0.0021, train_err=0.0341
Eval: 1024_h1=0.0034, 1024_l2=0.0029
[303] time=12.12, avg_loss=0.0021, train_err=0.0335
Eval: 1024_h1=0.0028, 1024_l2=0.0026
[304] time=12.12, avg_loss=0.0022, train_err=0.0344
Eval: 1024_h1=0.0034, 1024_l2=0.0024
[305] time=12.12, avg_loss=0.0023, train_err=0.0364
Eval: 1024_h1=0.0020, 1024_l2=0.0018
[306] time=12.12, avg_loss=0.0022, train_err=0.0347
Eval: 1024_h1=0.0033, 1024_l2=0.0031
[307] time=12.13, avg_loss=0.0023, train_err=0.0361
Eval: 1024_h1=0.0023, 1024_l2=0.0018
[308] time=12.12, avg_loss=0.0019, train_err=0.0306
Eval: 1024_h1=0.0023, 1024_l2=0.0026
[309] time=12.12, avg_loss=0.0022, train_err=0.0357
Eval: 1024_h1=0.0031, 1024_l2=0.0022
Incre Res Update: change index to 31
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[310] time=12.12, avg_loss=0.0024, train_err=0.0382
Eval: 1024_h1=0.0030, 1024_l2=0.0023
[311] time=12.12, avg_loss=0.0024, train_err=0.0386
Eval: 1024_h1=0.0049, 1024_l2=0.0041
[312] time=12.12, avg_loss=0.0024, train_err=0.0385
Eval: 1024_h1=0.0029, 1024_l2=0.0028
[313] time=12.12, avg_loss=0.0023, train_err=0.0362
Eval: 1024_h1=0.0026, 1024_l2=0.0018
[314] time=12.12, avg_loss=0.0025, train_err=0.0404
Eval: 1024_h1=0.0038, 1024_l2=0.0022
[315] time=12.12, avg_loss=0.0025, train_err=0.0400
Eval: 1024_h1=0.0032, 1024_l2=0.0024
[316] time=12.12, avg_loss=0.0022, train_err=0.0345
Eval: 1024_h1=0.0028, 1024_l2=0.0024
[317] time=12.12, avg_loss=0.0025, train_err=0.0397
Eval: 1024_h1=0.0028, 1024_l2=0.0035
[318] time=12.12, avg_loss=0.0022, train_err=0.0341
Eval: 1024_h1=0.0032, 1024_l2=0.0029
[319] time=12.13, avg_loss=0.0024, train_err=0.0380
Eval: 1024_h1=0.0025, 1024_l2=0.0021
Incre Res Update: change index to 32
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[320] time=12.12, avg_loss=0.0020, train_err=0.0319
Eval: 1024_h1=0.0035, 1024_l2=0.0020
[321] time=12.12, avg_loss=0.0025, train_err=0.0404
Eval: 1024_h1=0.0032, 1024_l2=0.0022
[322] time=12.12, avg_loss=0.0024, train_err=0.0384
Eval: 1024_h1=0.0022, 1024_l2=0.0030
[323] time=12.12, avg_loss=0.0026, train_err=0.0418
Eval: 1024_h1=0.0030, 1024_l2=0.0025
[324] time=12.12, avg_loss=0.0023, train_err=0.0363
Eval: 1024_h1=0.0029, 1024_l2=0.0020
[325] time=12.12, avg_loss=0.0023, train_err=0.0369
Eval: 1024_h1=0.0031, 1024_l2=0.0026
[326] time=12.12, avg_loss=0.0026, train_err=0.0417
Eval: 1024_h1=0.0030, 1024_l2=0.0023
[327] time=12.12, avg_loss=0.0024, train_err=0.0385
Eval: 1024_h1=0.0032, 1024_l2=0.0019
[328] time=12.12, avg_loss=0.0024, train_err=0.0384
Eval: 1024_h1=0.0037, 1024_l2=0.0028
[329] time=12.13, avg_loss=0.0022, train_err=0.0353
Eval: 1024_h1=0.0048, 1024_l2=0.0031
Incre Res Update: change index to 33
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[330] time=12.11, avg_loss=0.0026, train_err=0.0407
Eval: 1024_h1=0.0038, 1024_l2=0.0024
[331] time=12.12, avg_loss=0.0020, train_err=0.0322
Eval: 1024_h1=0.0024, 1024_l2=0.0021
[332] time=12.12, avg_loss=0.0023, train_err=0.0369
Eval: 1024_h1=0.0040, 1024_l2=0.0037
[333] time=12.11, avg_loss=0.0026, train_err=0.0405
Eval: 1024_h1=0.0037, 1024_l2=0.0031
[334] time=12.12, avg_loss=0.0021, train_err=0.0338
Eval: 1024_h1=0.0028, 1024_l2=0.0025
[335] time=12.12, avg_loss=0.0025, train_err=0.0395
Eval: 1024_h1=0.0027, 1024_l2=0.0022
[336] time=12.12, avg_loss=0.0026, train_err=0.0408
Eval: 1024_h1=0.0024, 1024_l2=0.0019
[337] time=12.12, avg_loss=0.0022, train_err=0.0355
Eval: 1024_h1=0.0025, 1024_l2=0.0021
[338] time=12.12, avg_loss=0.0020, train_err=0.0316
Eval: 1024_h1=0.0020, 1024_l2=0.0017
[339] time=12.12, avg_loss=0.0020, train_err=0.0320
Eval: 1024_h1=0.0030, 1024_l2=0.0027
Incre Res Update: change index to 34
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[340] time=12.12, avg_loss=0.0023, train_err=0.0369
Eval: 1024_h1=0.0031, 1024_l2=0.0023
[341] time=12.12, avg_loss=0.0021, train_err=0.0338
Eval: 1024_h1=0.0034, 1024_l2=0.0033
[342] time=12.12, avg_loss=0.0023, train_err=0.0366
Eval: 1024_h1=0.0021, 1024_l2=0.0018
[343] time=12.12, avg_loss=0.0023, train_err=0.0365
Eval: 1024_h1=0.0026, 1024_l2=0.0019
[344] time=12.12, avg_loss=0.0023, train_err=0.0367
Eval: 1024_h1=0.0037, 1024_l2=0.0037
[345] time=12.12, avg_loss=0.0022, train_err=0.0353
Eval: 1024_h1=0.0021, 1024_l2=0.0017
[346] time=12.11, avg_loss=0.0019, train_err=0.0307
Eval: 1024_h1=0.0026, 1024_l2=0.0019
[347] time=12.12, avg_loss=0.0022, train_err=0.0347
Eval: 1024_h1=0.0023, 1024_l2=0.0017
[348] time=12.12, avg_loss=0.0019, train_err=0.0302
Eval: 1024_h1=0.0031, 1024_l2=0.0020
[349] time=12.13, avg_loss=0.0026, train_err=0.0405
Eval: 1024_h1=0.0026, 1024_l2=0.0021
Incre Res Update: change index to 35
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[350] time=12.12, avg_loss=0.0021, train_err=0.0331
Eval: 1024_h1=0.0027, 1024_l2=0.0022
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[351] time=12.12, avg_loss=0.0019, train_err=0.0306
Eval: 1024_h1=0.0023, 1024_l2=0.0017
[352] time=12.12, avg_loss=0.0028, train_err=0.0442
Eval: 1024_h1=0.0031, 1024_l2=0.0022
[353] time=12.12, avg_loss=0.0021, train_err=0.0336
Eval: 1024_h1=0.0026, 1024_l2=0.0021
[354] time=12.13, avg_loss=0.0021, train_err=0.0340
Eval: 1024_h1=0.0021, 1024_l2=0.0015
[355] time=12.12, avg_loss=0.0020, train_err=0.0319
Eval: 1024_h1=0.0024, 1024_l2=0.0019
[356] time=12.12, avg_loss=0.0023, train_err=0.0358
Eval: 1024_h1=0.0024, 1024_l2=0.0019
[357] time=12.12, avg_loss=0.0020, train_err=0.0310
Eval: 1024_h1=0.0027, 1024_l2=0.0023
[358] time=12.12, avg_loss=0.0022, train_err=0.0356
Eval: 1024_h1=0.0020, 1024_l2=0.0022
[359] time=12.12, avg_loss=0.0021, train_err=0.0341
Eval: 1024_h1=0.0030, 1024_l2=0.0026
Incre Res Update: change index to 36
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[360] time=12.12, avg_loss=0.0021, train_err=0.0335
Eval: 1024_h1=0.0027, 1024_l2=0.0039
[361] time=12.13, avg_loss=0.0028, train_err=0.0448
Eval: 1024_h1=0.0058, 1024_l2=0.0049
[362] time=12.12, avg_loss=0.0027, train_err=0.0427
Eval: 1024_h1=0.0036, 1024_l2=0.0031
[363] time=12.12, avg_loss=0.0023, train_err=0.0371
Eval: 1024_h1=0.0024, 1024_l2=0.0021
[364] time=12.12, avg_loss=0.0023, train_err=0.0358
Eval: 1024_h1=0.0019, 1024_l2=0.0016
[365] time=12.13, avg_loss=0.0023, train_err=0.0362
Eval: 1024_h1=0.0024, 1024_l2=0.0018
[366] time=12.12, avg_loss=0.0023, train_err=0.0367
Eval: 1024_h1=0.0025, 1024_l2=0.0020
[367] time=12.12, avg_loss=0.0022, train_err=0.0344
Eval: 1024_h1=0.0025, 1024_l2=0.0021
[368] time=12.13, avg_loss=0.0022, train_err=0.0342
Eval: 1024_h1=0.0024, 1024_l2=0.0022
[369] time=12.13, avg_loss=0.0024, train_err=0.0377
Eval: 1024_h1=0.0033, 1024_l2=0.0028
Incre Res Update: change index to 37
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[370] time=12.13, avg_loss=0.0020, train_err=0.0311
Eval: 1024_h1=0.0020, 1024_l2=0.0015
[371] time=12.13, avg_loss=0.0020, train_err=0.0325
Eval: 1024_h1=0.0024, 1024_l2=0.0024
[372] time=12.12, avg_loss=0.0018, train_err=0.0287
Eval: 1024_h1=0.0026, 1024_l2=0.0025
[373] time=12.12, avg_loss=0.0026, train_err=0.0409
Eval: 1024_h1=0.0037, 1024_l2=0.0033
[374] time=12.13, avg_loss=0.0027, train_err=0.0423
Eval: 1024_h1=0.0021, 1024_l2=0.0020
[375] time=12.13, avg_loss=0.0021, train_err=0.0339
Eval: 1024_h1=0.0023, 1024_l2=0.0018
[376] time=12.13, avg_loss=0.0027, train_err=0.0423
Eval: 1024_h1=0.0030, 1024_l2=0.0028
[377] time=12.13, avg_loss=0.0023, train_err=0.0362
Eval: 1024_h1=0.0033, 1024_l2=0.0026
[378] time=12.13, avg_loss=0.0024, train_err=0.0389
Eval: 1024_h1=0.0031, 1024_l2=0.0021
[379] time=12.13, avg_loss=0.0024, train_err=0.0387
Eval: 1024_h1=0.0031, 1024_l2=0.0029
Incre Res Update: change index to 38
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[380] time=12.13, avg_loss=0.0023, train_err=0.0371
Eval: 1024_h1=0.0027, 1024_l2=0.0021
[381] time=12.13, avg_loss=0.0021, train_err=0.0333
Eval: 1024_h1=0.0030, 1024_l2=0.0024
[382] time=12.13, avg_loss=0.0025, train_err=0.0399
Eval: 1024_h1=0.0032, 1024_l2=0.0022
[383] time=12.13, avg_loss=0.0023, train_err=0.0370
Eval: 1024_h1=0.0028, 1024_l2=0.0020
[384] time=12.13, avg_loss=0.0019, train_err=0.0307
Eval: 1024_h1=0.0033, 1024_l2=0.0026
[385] time=12.13, avg_loss=0.0023, train_err=0.0357
Eval: 1024_h1=0.0045, 1024_l2=0.0040
[386] time=12.13, avg_loss=0.0025, train_err=0.0400
Eval: 1024_h1=0.0030, 1024_l2=0.0018
[387] time=12.13, avg_loss=0.0032, train_err=0.0511
Eval: 1024_h1=0.0047, 1024_l2=0.0042
[388] time=12.13, avg_loss=0.0024, train_err=0.0375
Eval: 1024_h1=0.0020, 1024_l2=0.0014
[389] time=12.12, avg_loss=0.0021, train_err=0.0340
Eval: 1024_h1=0.0021, 1024_l2=0.0017
Incre Res Update: change index to 39
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[390] time=12.13, avg_loss=0.0021, train_err=0.0330
Eval: 1024_h1=0.0032, 1024_l2=0.0025
[391] time=12.13, avg_loss=0.0022, train_err=0.0348
Eval: 1024_h1=0.0022, 1024_l2=0.0017
[392] time=12.13, avg_loss=0.0021, train_err=0.0330
Eval: 1024_h1=0.0034, 1024_l2=0.0023
[393] time=12.13, avg_loss=0.0023, train_err=0.0364
Eval: 1024_h1=0.0037, 1024_l2=0.0033
[394] time=12.13, avg_loss=0.0024, train_err=0.0385
Eval: 1024_h1=0.0030, 1024_l2=0.0023
[395] time=12.13, avg_loss=0.0021, train_err=0.0329
Eval: 1024_h1=0.0028, 1024_l2=0.0019
[396] time=12.13, avg_loss=0.0026, train_err=0.0410
Eval: 1024_h1=0.0028, 1024_l2=0.0027
[397] time=12.13, avg_loss=0.0020, train_err=0.0314
Eval: 1024_h1=0.0025, 1024_l2=0.0019
[398] time=12.13, avg_loss=0.0022, train_err=0.0347
Eval: 1024_h1=0.0027, 1024_l2=0.0022
