
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Fourier Neural Operator (FNO) Kernel ]
>>> Overview:
The FNO leverages Fourier Transform to map input data into the spectral domain, where
convolutional operations are performed by truncating high-frequency modes.

>>> Key Features:
- Effective for parameterized Partial Differential Equations (PDEs).
- Reduces computational complexity by retaining only significant modes.

>>> Reference:
Li, Z. et al. 'Fourier Neural Operator for Parametric Partial Differential Equations' (ICLR 2021).
Link: https://arxiv.org/pdf/2010.08895
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 1623617

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7f5dd8187320>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7f5dd1396bd0>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7f5dd1396bd0>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7f5df2ff1df0>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=6.86, avg_loss=0.4509, train_err=7.1578
Eval: 1024_h1=0.1486, 1024_l2=0.1023
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[1] time=6.37, avg_loss=0.1322, train_err=2.0990
Eval: 1024_h1=0.1023, 1024_l2=0.1007
[2] time=6.36, avg_loss=0.0679, train_err=1.0785
Eval: 1024_h1=0.0565, 1024_l2=0.0450
[3] time=6.36, avg_loss=0.0547, train_err=0.8687
Eval: 1024_h1=0.0467, 1024_l2=0.0546
[4] time=6.36, avg_loss=0.0421, train_err=0.6680
Eval: 1024_h1=0.0323, 1024_l2=0.0318
[5] time=6.36, avg_loss=0.0397, train_err=0.6307
Eval: 1024_h1=0.0248, 1024_l2=0.0442
[6] time=6.36, avg_loss=0.0342, train_err=0.5430
Eval: 1024_h1=0.0306, 1024_l2=0.0228
[7] time=6.36, avg_loss=0.0445, train_err=0.7065
Eval: 1024_h1=0.0497, 1024_l2=0.0474
[8] time=6.36, avg_loss=0.0310, train_err=0.4916
Eval: 1024_h1=0.0445, 1024_l2=0.0353
[9] time=6.36, avg_loss=0.0640, train_err=1.0165
Eval: 1024_h1=0.0643, 1024_l2=0.0473
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=12.16, avg_loss=0.0340, train_err=0.5391
Eval: 1024_h1=0.0270, 1024_l2=0.0321
[11] time=12.12, avg_loss=0.0403, train_err=0.6397
Eval: 1024_h1=0.1047, 1024_l2=0.0877
[12] time=12.13, avg_loss=0.0367, train_err=0.5821
Eval: 1024_h1=0.0250, 1024_l2=0.0179
[13] time=12.13, avg_loss=0.0251, train_err=0.3979
Eval: 1024_h1=0.0721, 1024_l2=0.0544
[14] time=12.13, avg_loss=0.0350, train_err=0.5552
Eval: 1024_h1=0.0414, 1024_l2=0.0393
[15] time=12.13, avg_loss=0.0227, train_err=0.3609
Eval: 1024_h1=0.0484, 1024_l2=0.0538
[16] time=12.13, avg_loss=0.0259, train_err=0.4106
Eval: 1024_h1=0.0450, 1024_l2=0.0333
[17] time=12.13, avg_loss=0.0256, train_err=0.4057
Eval: 1024_h1=0.0231, 1024_l2=0.0255
[18] time=12.13, avg_loss=0.0304, train_err=0.4824
Eval: 1024_h1=0.0291, 1024_l2=0.0185
[19] time=12.13, avg_loss=0.0237, train_err=0.3765
Eval: 1024_h1=0.0421, 1024_l2=0.0356
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=12.13, avg_loss=0.0240, train_err=0.3804
Eval: 1024_h1=0.0327, 1024_l2=0.0247
[21] time=12.13, avg_loss=0.0195, train_err=0.3101
Eval: 1024_h1=0.0211, 1024_l2=0.0210
[22] time=12.13, avg_loss=0.0272, train_err=0.4317
Eval: 1024_h1=0.0208, 1024_l2=0.0206
[23] time=12.13, avg_loss=0.0198, train_err=0.3139
Eval: 1024_h1=0.0346, 1024_l2=0.0332
[24] time=12.13, avg_loss=0.0278, train_err=0.4416
Eval: 1024_h1=0.0321, 1024_l2=0.0269
[25] time=12.13, avg_loss=0.0229, train_err=0.3642
Eval: 1024_h1=0.0164, 1024_l2=0.0207
[26] time=12.13, avg_loss=0.0259, train_err=0.4111
Eval: 1024_h1=0.0194, 1024_l2=0.0139
[27] time=12.13, avg_loss=0.0150, train_err=0.2385
Eval: 1024_h1=0.0220, 1024_l2=0.0198
[28] time=12.13, avg_loss=0.0323, train_err=0.5123
Eval: 1024_h1=0.0276, 1024_l2=0.0209
[29] time=12.13, avg_loss=0.0218, train_err=0.3454
Eval: 1024_h1=0.0408, 1024_l2=0.0286
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=12.13, avg_loss=0.0258, train_err=0.4092
Eval: 1024_h1=0.0348, 1024_l2=0.0282
[31] time=12.13, avg_loss=0.0235, train_err=0.3735
Eval: 1024_h1=0.0387, 1024_l2=0.0252
[32] time=12.13, avg_loss=0.0249, train_err=0.3956
Eval: 1024_h1=0.0209, 1024_l2=0.0213
[33] time=12.13, avg_loss=0.0206, train_err=0.3269
Eval: 1024_h1=0.0303, 1024_l2=0.0263
[34] time=12.13, avg_loss=0.0197, train_err=0.3126
Eval: 1024_h1=0.0244, 1024_l2=0.0181
[35] time=12.13, avg_loss=0.0181, train_err=0.2867
Eval: 1024_h1=0.0223, 1024_l2=0.0199
[36] time=12.13, avg_loss=0.0231, train_err=0.3670
Eval: 1024_h1=0.0186, 1024_l2=0.0143
[37] time=12.12, avg_loss=0.0159, train_err=0.2521
Eval: 1024_h1=0.0234, 1024_l2=0.0220
[38] time=12.13, avg_loss=0.0228, train_err=0.3624
Eval: 1024_h1=0.0331, 1024_l2=0.0183
[39] time=12.13, avg_loss=0.0254, train_err=0.4038
Eval: 1024_h1=0.0270, 1024_l2=0.0188
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=12.13, avg_loss=0.0230, train_err=0.3653
Eval: 1024_h1=0.0301, 1024_l2=0.0241
[41] time=12.13, avg_loss=0.0199, train_err=0.3158
Eval: 1024_h1=0.0170, 1024_l2=0.0164
[42] time=12.13, avg_loss=0.0216, train_err=0.3421
Eval: 1024_h1=0.0210, 1024_l2=0.0189
[43] time=12.13, avg_loss=0.0205, train_err=0.3248
Eval: 1024_h1=0.0185, 1024_l2=0.0202
[44] time=12.13, avg_loss=0.0193, train_err=0.3060
Eval: 1024_h1=0.0212, 1024_l2=0.0198
[45] time=12.13, avg_loss=0.0318, train_err=0.5054
Eval: 1024_h1=0.0260, 1024_l2=0.0204
[46] time=12.13, avg_loss=0.0555, train_err=0.8815
Eval: 1024_h1=0.0510, 1024_l2=0.0414
[47] time=12.13, avg_loss=0.0260, train_err=0.4120
Eval: 1024_h1=0.0212, 1024_l2=0.0204
[48] time=12.13, avg_loss=0.0197, train_err=0.3122
Eval: 1024_h1=0.0279, 1024_l2=0.0200
[49] time=12.13, avg_loss=0.0278, train_err=0.4410
Eval: 1024_h1=0.0273, 1024_l2=0.0221
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=12.12, avg_loss=0.0241, train_err=0.3819
Eval: 1024_h1=0.0219, 1024_l2=0.0178
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[51] time=12.14, avg_loss=0.0302, train_err=0.4788
Eval: 1024_h1=0.0160, 1024_l2=0.0116
[52] time=12.13, avg_loss=0.0238, train_err=0.3782
Eval: 1024_h1=0.0118, 1024_l2=0.0090
[53] time=12.13, avg_loss=0.0206, train_err=0.3268
Eval: 1024_h1=0.0245, 1024_l2=0.0165
[54] time=12.13, avg_loss=0.0211, train_err=0.3345
Eval: 1024_h1=0.0281, 1024_l2=0.0173
[55] time=12.13, avg_loss=0.0214, train_err=0.3404
Eval: 1024_h1=0.0168, 1024_l2=0.0123
[56] time=12.13, avg_loss=0.0187, train_err=0.2965
Eval: 1024_h1=0.0312, 1024_l2=0.0260
[57] time=12.13, avg_loss=0.0199, train_err=0.3166
Eval: 1024_h1=0.0135, 1024_l2=0.0143
[58] time=12.13, avg_loss=0.0200, train_err=0.3170
Eval: 1024_h1=0.0148, 1024_l2=0.0103
[59] time=12.13, avg_loss=0.0158, train_err=0.2509
Eval: 1024_h1=0.0179, 1024_l2=0.0150
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=12.13, avg_loss=0.0180, train_err=0.2861
Eval: 1024_h1=0.0299, 1024_l2=0.0286
[61] time=12.13, avg_loss=0.0219, train_err=0.3477
Eval: 1024_h1=0.0318, 1024_l2=0.0264
[62] time=12.12, avg_loss=0.0216, train_err=0.3433
Eval: 1024_h1=0.0144, 1024_l2=0.0111
[63] time=12.12, avg_loss=0.0157, train_err=0.2491
Eval: 1024_h1=0.0180, 1024_l2=0.0124
[64] time=12.13, avg_loss=0.0189, train_err=0.3001
Eval: 1024_h1=0.0187, 1024_l2=0.0158
[65] time=12.13, avg_loss=0.0216, train_err=0.3435
Eval: 1024_h1=0.0512, 1024_l2=0.0457
[66] time=12.13, avg_loss=0.0171, train_err=0.2711
Eval: 1024_h1=0.0196, 1024_l2=0.0154
[67] time=12.13, avg_loss=0.0200, train_err=0.3167
Eval: 1024_h1=0.0122, 1024_l2=0.0143
[68] time=12.13, avg_loss=0.0234, train_err=0.3707
Eval: 1024_h1=0.0135, 1024_l2=0.0088
[69] time=12.13, avg_loss=0.0206, train_err=0.3263
Eval: 1024_h1=0.0306, 1024_l2=0.0275
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=12.13, avg_loss=0.0196, train_err=0.3114
Eval: 1024_h1=0.0191, 1024_l2=0.0140
[71] time=12.13, avg_loss=0.0197, train_err=0.3130
Eval: 1024_h1=0.0162, 1024_l2=0.0158
[72] time=12.12, avg_loss=0.0152, train_err=0.2415
Eval: 1024_h1=0.0110, 1024_l2=0.0091
[73] time=12.12, avg_loss=0.0175, train_err=0.2770
Eval: 1024_h1=0.0194, 1024_l2=0.0134
[74] time=12.13, avg_loss=0.0164, train_err=0.2608
Eval: 1024_h1=0.0191, 1024_l2=0.0168
[75] time=12.13, avg_loss=0.0150, train_err=0.2383
Eval: 1024_h1=0.0170, 1024_l2=0.0143
[76] time=12.13, avg_loss=0.0175, train_err=0.2785
Eval: 1024_h1=0.0378, 1024_l2=0.0342
[77] time=12.13, avg_loss=0.0215, train_err=0.3413
Eval: 1024_h1=0.0164, 1024_l2=0.0118
[78] time=12.12, avg_loss=0.0274, train_err=0.4343
Eval: 1024_h1=0.0301, 1024_l2=0.0366
[79] time=12.12, avg_loss=0.0207, train_err=0.3284
Eval: 1024_h1=0.0179, 1024_l2=0.0177
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=12.13, avg_loss=0.0141, train_err=0.2233
Eval: 1024_h1=0.0136, 1024_l2=0.0103
[81] time=12.13, avg_loss=0.0171, train_err=0.2714
Eval: 1024_h1=0.0190, 1024_l2=0.0147
[82] time=12.13, avg_loss=0.0149, train_err=0.2371
Eval: 1024_h1=0.0135, 1024_l2=0.0117
[83] time=12.13, avg_loss=0.0168, train_err=0.2672
Eval: 1024_h1=0.0263, 1024_l2=0.0246
[84] time=12.13, avg_loss=0.0210, train_err=0.3337
Eval: 1024_h1=0.0156, 1024_l2=0.0101
[85] time=12.13, avg_loss=0.0289, train_err=0.4592
Eval: 1024_h1=0.0229, 1024_l2=0.0158
[86] time=12.13, avg_loss=0.0368, train_err=0.5842
Eval: 1024_h1=0.0348, 1024_l2=0.0439
[87] time=12.13, avg_loss=0.0330, train_err=0.5245
Eval: 1024_h1=0.0241, 1024_l2=0.0343
[88] time=12.13, avg_loss=0.0272, train_err=0.4310
Eval: 1024_h1=0.0449, 1024_l2=0.0359
[89] time=12.13, avg_loss=0.0253, train_err=0.4023
Eval: 1024_h1=0.0223, 1024_l2=0.0161
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=12.13, avg_loss=0.0238, train_err=0.3778
Eval: 1024_h1=0.0335, 1024_l2=0.0243
[91] time=12.14, avg_loss=0.0220, train_err=0.3498
Eval: 1024_h1=0.0205, 1024_l2=0.0160
[92] time=12.13, avg_loss=0.0199, train_err=0.3159
Eval: 1024_h1=0.0145, 1024_l2=0.0159
[93] time=12.13, avg_loss=0.0147, train_err=0.2332
Eval: 1024_h1=0.0310, 1024_l2=0.0240
[94] time=12.13, avg_loss=0.0179, train_err=0.2841
Eval: 1024_h1=0.0243, 1024_l2=0.0242
[95] time=12.11, avg_loss=0.0249, train_err=0.3956
Eval: 1024_h1=0.0286, 1024_l2=0.0222
[96] time=12.12, avg_loss=0.0205, train_err=0.3258
Eval: 1024_h1=0.0171, 1024_l2=0.0145
[97] time=12.12, avg_loss=0.0147, train_err=0.2333
Eval: 1024_h1=0.0180, 1024_l2=0.0189
[98] time=12.11, avg_loss=0.0185, train_err=0.2940
Eval: 1024_h1=0.0173, 1024_l2=0.0181
[99] time=12.12, avg_loss=0.0143, train_err=0.2267
Eval: 1024_h1=0.0133, 1024_l2=0.0121
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=12.12, avg_loss=0.0088, train_err=0.1398
Eval: 1024_h1=0.0073, 1024_l2=0.0070
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[101] time=12.13, avg_loss=0.0116, train_err=0.1839
Eval: 1024_h1=0.0186, 1024_l2=0.0183
[102] time=12.12, avg_loss=0.0096, train_err=0.1521
Eval: 1024_h1=0.0095, 1024_l2=0.0094
[103] time=12.12, avg_loss=0.0094, train_err=0.1497
Eval: 1024_h1=0.0142, 1024_l2=0.0119
[104] time=12.12, avg_loss=0.0087, train_err=0.1381
Eval: 1024_h1=0.0086, 1024_l2=0.0076
[105] time=12.12, avg_loss=0.0083, train_err=0.1313
Eval: 1024_h1=0.0091, 1024_l2=0.0083
[106] time=12.12, avg_loss=0.0087, train_err=0.1377
Eval: 1024_h1=0.0207, 1024_l2=0.0190
[107] time=12.12, avg_loss=0.0097, train_err=0.1539
Eval: 1024_h1=0.0099, 1024_l2=0.0095
[108] time=12.12, avg_loss=0.0094, train_err=0.1498
Eval: 1024_h1=0.0079, 1024_l2=0.0088
[109] time=12.12, avg_loss=0.0093, train_err=0.1477
Eval: 1024_h1=0.0067, 1024_l2=0.0061
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=12.12, avg_loss=0.0081, train_err=0.1292
Eval: 1024_h1=0.0081, 1024_l2=0.0078
[111] time=12.12, avg_loss=0.0087, train_err=0.1379
Eval: 1024_h1=0.0187, 1024_l2=0.0140
[112] time=12.12, avg_loss=0.0090, train_err=0.1427
Eval: 1024_h1=0.0133, 1024_l2=0.0091
[113] time=12.12, avg_loss=0.0090, train_err=0.1434
Eval: 1024_h1=0.0063, 1024_l2=0.0051
[114] time=12.12, avg_loss=0.0093, train_err=0.1480
Eval: 1024_h1=0.0132, 1024_l2=0.0102
[115] time=12.12, avg_loss=0.0086, train_err=0.1371
Eval: 1024_h1=0.0171, 1024_l2=0.0154
[116] time=12.12, avg_loss=0.0090, train_err=0.1431
Eval: 1024_h1=0.0083, 1024_l2=0.0068
[117] time=12.11, avg_loss=0.0067, train_err=0.1062
Eval: 1024_h1=0.0090, 1024_l2=0.0082
[118] time=12.12, avg_loss=0.0094, train_err=0.1489
Eval: 1024_h1=0.0107, 1024_l2=0.0084
[119] time=12.12, avg_loss=0.0096, train_err=0.1519
Eval: 1024_h1=0.0180, 1024_l2=0.0130
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=12.12, avg_loss=0.0102, train_err=0.1617
Eval: 1024_h1=0.0125, 1024_l2=0.0108
[121] time=12.12, avg_loss=0.0082, train_err=0.1309
Eval: 1024_h1=0.0082, 1024_l2=0.0075
[122] time=12.11, avg_loss=0.0104, train_err=0.1655
Eval: 1024_h1=0.0084, 1024_l2=0.0053
[123] time=12.12, avg_loss=0.0094, train_err=0.1487
Eval: 1024_h1=0.0099, 1024_l2=0.0072
[124] time=12.12, avg_loss=0.0089, train_err=0.1418
Eval: 1024_h1=0.0158, 1024_l2=0.0141
[125] time=12.12, avg_loss=0.0075, train_err=0.1191
Eval: 1024_h1=0.0075, 1024_l2=0.0053
[126] time=12.12, avg_loss=0.0074, train_err=0.1172
Eval: 1024_h1=0.0092, 1024_l2=0.0096
[127] time=12.11, avg_loss=0.0084, train_err=0.1331
Eval: 1024_h1=0.0127, 1024_l2=0.0116
[128] time=12.12, avg_loss=0.0093, train_err=0.1469
Eval: 1024_h1=0.0171, 1024_l2=0.0164
[129] time=12.12, avg_loss=0.0102, train_err=0.1623
Eval: 1024_h1=0.0087, 1024_l2=0.0067
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=12.12, avg_loss=0.0088, train_err=0.1397
Eval: 1024_h1=0.0144, 1024_l2=0.0130
[131] time=12.12, avg_loss=0.0096, train_err=0.1526
Eval: 1024_h1=0.0089, 1024_l2=0.0085
[132] time=12.12, avg_loss=0.0077, train_err=0.1215
Eval: 1024_h1=0.0098, 1024_l2=0.0085
[133] time=12.12, avg_loss=0.0075, train_err=0.1195
Eval: 1024_h1=0.0054, 1024_l2=0.0046
[134] time=12.12, avg_loss=0.0087, train_err=0.1379
Eval: 1024_h1=0.0074, 1024_l2=0.0051
[135] time=12.12, avg_loss=0.0075, train_err=0.1183
Eval: 1024_h1=0.0138, 1024_l2=0.0100
[136] time=12.12, avg_loss=0.0102, train_err=0.1617
Eval: 1024_h1=0.0073, 1024_l2=0.0062
[137] time=12.12, avg_loss=0.0102, train_err=0.1616
Eval: 1024_h1=0.0183, 1024_l2=0.0164
[138] time=12.12, avg_loss=0.0095, train_err=0.1514
Eval: 1024_h1=0.0074, 1024_l2=0.0048
[139] time=12.11, avg_loss=0.0080, train_err=0.1271
Eval: 1024_h1=0.0238, 1024_l2=0.0173
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=12.12, avg_loss=0.0112, train_err=0.1775
Eval: 1024_h1=0.0107, 1024_l2=0.0113
[141] time=12.12, avg_loss=0.0081, train_err=0.1292
Eval: 1024_h1=0.0088, 1024_l2=0.0074
[142] time=12.12, avg_loss=0.0064, train_err=0.1015
Eval: 1024_h1=0.0103, 1024_l2=0.0060
[143] time=12.12, avg_loss=0.0069, train_err=0.1087
Eval: 1024_h1=0.0082, 1024_l2=0.0069
[144] time=12.12, avg_loss=0.0063, train_err=0.0998
Eval: 1024_h1=0.0086, 1024_l2=0.0065
[145] time=12.12, avg_loss=0.0089, train_err=0.1417
Eval: 1024_h1=0.0113, 1024_l2=0.0097
[146] time=12.12, avg_loss=0.0082, train_err=0.1294
Eval: 1024_h1=0.0105, 1024_l2=0.0115
[147] time=12.12, avg_loss=0.0100, train_err=0.1584
Eval: 1024_h1=0.0117, 1024_l2=0.0109
[148] time=12.12, avg_loss=0.0094, train_err=0.1491
Eval: 1024_h1=0.0140, 1024_l2=0.0131
[149] time=12.12, avg_loss=0.0083, train_err=0.1311
Eval: 1024_h1=0.0066, 1024_l2=0.0054
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=12.12, avg_loss=0.0076, train_err=0.1214
Eval: 1024_h1=0.0067, 1024_l2=0.0064
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[151] time=12.12, avg_loss=0.0082, train_err=0.1306
Eval: 1024_h1=0.0077, 1024_l2=0.0075
[152] time=12.11, avg_loss=0.0084, train_err=0.1340
Eval: 1024_h1=0.0126, 1024_l2=0.0066
[153] time=12.12, avg_loss=0.0082, train_err=0.1295
Eval: 1024_h1=0.0158, 1024_l2=0.0140
[154] time=12.12, avg_loss=0.0091, train_err=0.1439
Eval: 1024_h1=0.0069, 1024_l2=0.0057
[155] time=12.12, avg_loss=0.0092, train_err=0.1453
Eval: 1024_h1=0.0098, 1024_l2=0.0072
[156] time=12.12, avg_loss=0.0083, train_err=0.1315
Eval: 1024_h1=0.0087, 1024_l2=0.0071
[157] time=12.12, avg_loss=0.0079, train_err=0.1252
Eval: 1024_h1=0.0059, 1024_l2=0.0046
[158] time=12.12, avg_loss=0.0088, train_err=0.1402
Eval: 1024_h1=0.0052, 1024_l2=0.0060
[159] time=12.12, avg_loss=0.0075, train_err=0.1196
Eval: 1024_h1=0.0149, 1024_l2=0.0143
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=12.12, avg_loss=0.0086, train_err=0.1366
Eval: 1024_h1=0.0156, 1024_l2=0.0111
[161] time=12.12, avg_loss=0.0109, train_err=0.1728
Eval: 1024_h1=0.0136, 1024_l2=0.0089
[162] time=12.12, avg_loss=0.0099, train_err=0.1573
Eval: 1024_h1=0.0064, 1024_l2=0.0058
[163] time=12.12, avg_loss=0.0087, train_err=0.1378
Eval: 1024_h1=0.0147, 1024_l2=0.0139
[164] time=12.12, avg_loss=0.0121, train_err=0.1924
Eval: 1024_h1=0.0169, 1024_l2=0.0080
[165] time=12.12, avg_loss=0.0086, train_err=0.1372
Eval: 1024_h1=0.0078, 1024_l2=0.0068
[166] time=12.12, avg_loss=0.0083, train_err=0.1310
Eval: 1024_h1=0.0054, 1024_l2=0.0045
[167] time=12.12, avg_loss=0.0071, train_err=0.1132
Eval: 1024_h1=0.0092, 1024_l2=0.0087
[168] time=12.12, avg_loss=0.0080, train_err=0.1268
Eval: 1024_h1=0.0061, 1024_l2=0.0042
[169] time=12.12, avg_loss=0.0086, train_err=0.1373
Eval: 1024_h1=0.0159, 1024_l2=0.0151
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=12.12, avg_loss=0.0105, train_err=0.1670
Eval: 1024_h1=0.0180, 1024_l2=0.0128
[171] time=12.12, avg_loss=0.0074, train_err=0.1169
Eval: 1024_h1=0.0066, 1024_l2=0.0065
[172] time=12.12, avg_loss=0.0077, train_err=0.1219
Eval: 1024_h1=0.0064, 1024_l2=0.0062
[173] time=12.12, avg_loss=0.0073, train_err=0.1152
Eval: 1024_h1=0.0114, 1024_l2=0.0064
[174] time=12.12, avg_loss=0.0085, train_err=0.1353
Eval: 1024_h1=0.0075, 1024_l2=0.0055
[175] time=12.12, avg_loss=0.0065, train_err=0.1038
Eval: 1024_h1=0.0107, 1024_l2=0.0081
[176] time=12.12, avg_loss=0.0093, train_err=0.1480
Eval: 1024_h1=0.0161, 1024_l2=0.0147
[177] time=12.12, avg_loss=0.0108, train_err=0.1718
Eval: 1024_h1=0.0100, 1024_l2=0.0094
[178] time=12.12, avg_loss=0.0085, train_err=0.1342
Eval: 1024_h1=0.0099, 1024_l2=0.0116
[179] time=12.12, avg_loss=0.0088, train_err=0.1404
Eval: 1024_h1=0.0108, 1024_l2=0.0085
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=12.12, avg_loss=0.0077, train_err=0.1229
Eval: 1024_h1=0.0060, 1024_l2=0.0079
[181] time=12.12, avg_loss=0.0083, train_err=0.1317
Eval: 1024_h1=0.0093, 1024_l2=0.0067
[182] time=12.12, avg_loss=0.0085, train_err=0.1347
Eval: 1024_h1=0.0094, 1024_l2=0.0082
[183] time=12.12, avg_loss=0.0073, train_err=0.1163
Eval: 1024_h1=0.0069, 1024_l2=0.0059
[184] time=12.12, avg_loss=0.0100, train_err=0.1582
Eval: 1024_h1=0.0116, 1024_l2=0.0120
[185] time=12.12, avg_loss=0.0100, train_err=0.1587
Eval: 1024_h1=0.0137, 1024_l2=0.0094
[186] time=12.12, avg_loss=0.0082, train_err=0.1304
Eval: 1024_h1=0.0121, 1024_l2=0.0117
[187] time=12.12, avg_loss=0.0076, train_err=0.1199
Eval: 1024_h1=0.0145, 1024_l2=0.0133
[188] time=12.12, avg_loss=0.0094, train_err=0.1488
Eval: 1024_h1=0.0143, 1024_l2=0.0107
[189] time=12.13, avg_loss=0.0077, train_err=0.1225
Eval: 1024_h1=0.0048, 1024_l2=0.0061
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=12.12, avg_loss=0.0063, train_err=0.1007
Eval: 1024_h1=0.0081, 1024_l2=0.0081
[191] time=12.12, avg_loss=0.0079, train_err=0.1248
Eval: 1024_h1=0.0064, 1024_l2=0.0047
[192] time=12.12, avg_loss=0.0080, train_err=0.1278
Eval: 1024_h1=0.0103, 1024_l2=0.0075
[193] time=12.12, avg_loss=0.0078, train_err=0.1240
Eval: 1024_h1=0.0086, 1024_l2=0.0062
[194] time=12.12, avg_loss=0.0063, train_err=0.0997
Eval: 1024_h1=0.0047, 1024_l2=0.0036
[195] time=12.11, avg_loss=0.0068, train_err=0.1082
Eval: 1024_h1=0.0086, 1024_l2=0.0084
[196] time=12.11, avg_loss=0.0089, train_err=0.1407
Eval: 1024_h1=0.0073, 1024_l2=0.0076
[197] time=12.12, avg_loss=0.0077, train_err=0.1217
Eval: 1024_h1=0.0163, 1024_l2=0.0118
[198] time=12.12, avg_loss=0.0088, train_err=0.1394
Eval: 1024_h1=0.0129, 1024_l2=0.0119
[199] time=12.12, avg_loss=0.0084, train_err=0.1327
Eval: 1024_h1=0.0065, 1024_l2=0.0047
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=12.11, avg_loss=0.0039, train_err=0.0627
Eval: 1024_h1=0.0062, 1024_l2=0.0056
[Rank 0]: saved training state to save/1d_burgers/parallel/fl
[201] time=12.12, avg_loss=0.0042, train_err=0.0670
Eval: 1024_h1=0.0044, 1024_l2=0.0034
[202] time=12.12, avg_loss=0.0044, train_err=0.0696
Eval: 1024_h1=0.0045, 1024_l2=0.0033
[203] time=12.12, avg_loss=0.0041, train_err=0.0646
Eval: 1024_h1=0.0032, 1024_l2=0.0027
[204] time=12.12, avg_loss=0.0042, train_err=0.0660
Eval: 1024_h1=0.0041, 1024_l2=0.0038
[205] time=12.12, avg_loss=0.0040, train_err=0.0643
Eval: 1024_h1=0.0042, 1024_l2=0.0037
[206] time=12.12, avg_loss=0.0047, train_err=0.0751
Eval: 1024_h1=0.0053, 1024_l2=0.0043
[207] time=12.12, avg_loss=0.0038, train_err=0.0600
Eval: 1024_h1=0.0080, 1024_l2=0.0063
[208] time=12.11, avg_loss=0.0041, train_err=0.0652
Eval: 1024_h1=0.0037, 1024_l2=0.0038
[209] time=12.12, avg_loss=0.0035, train_err=0.0555
Eval: 1024_h1=0.0067, 1024_l2=0.0040
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=12.11, avg_loss=0.0042, train_err=0.0659
Eval: 1024_h1=0.0056, 1024_l2=0.0045
[211] time=12.12, avg_loss=0.0042, train_err=0.0672
Eval: 1024_h1=0.0053, 1024_l2=0.0040
[212] time=12.13, avg_loss=0.0040, train_err=0.0631
Eval: 1024_h1=0.0042, 1024_l2=0.0028
[213] time=12.13, avg_loss=0.0044, train_err=0.0692
Eval: 1024_h1=0.0043, 1024_l2=0.0041
[214] time=12.12, avg_loss=0.0037, train_err=0.0590
Eval: 1024_h1=0.0046, 1024_l2=0.0032
[215] time=12.13, avg_loss=0.0048, train_err=0.0768
Eval: 1024_h1=0.0048, 1024_l2=0.0030
[216] time=12.13, avg_loss=0.0040, train_err=0.0635
Eval: 1024_h1=0.0054, 1024_l2=0.0049
[217] time=12.12, avg_loss=0.0046, train_err=0.0724
Eval: 1024_h1=0.0043, 1024_l2=0.0032
[218] time=12.12, avg_loss=0.0038, train_err=0.0609
Eval: 1024_h1=0.0061, 1024_l2=0.0043
[219] time=12.13, avg_loss=0.0044, train_err=0.0694
Eval: 1024_h1=0.0056, 1024_l2=0.0043
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=12.13, avg_loss=0.0040, train_err=0.0631
Eval: 1024_h1=0.0056, 1024_l2=0.0039
[221] time=12.12, avg_loss=0.0048, train_err=0.0760
Eval: 1024_h1=0.0071, 1024_l2=0.0062
[222] time=12.12, avg_loss=0.0036, train_err=0.0576
Eval: 1024_h1=0.0044, 1024_l2=0.0032
[223] time=12.12, avg_loss=0.0042, train_err=0.0665
Eval: 1024_h1=0.0059, 1024_l2=0.0042
[224] time=12.13, avg_loss=0.0037, train_err=0.0593
Eval: 1024_h1=0.0054, 1024_l2=0.0035
[225] time=12.12, avg_loss=0.0038, train_err=0.0604
Eval: 1024_h1=0.0049, 1024_l2=0.0031
[226] time=12.13, avg_loss=0.0040, train_err=0.0632
Eval: 1024_h1=0.0046, 1024_l2=0.0032
[227] time=12.13, avg_loss=0.0036, train_err=0.0576
Eval: 1024_h1=0.0070, 1024_l2=0.0044
[228] time=12.13, avg_loss=0.0043, train_err=0.0677
Eval: 1024_h1=0.0043, 1024_l2=0.0031
[229] time=12.13, avg_loss=0.0038, train_err=0.0603
Eval: 1024_h1=0.0034, 1024_l2=0.0028
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=12.12, avg_loss=0.0046, train_err=0.0732
Eval: 1024_h1=0.0035, 1024_l2=0.0031
[231] time=12.13, avg_loss=0.0039, train_err=0.0613
Eval: 1024_h1=0.0081, 1024_l2=0.0067
[232] time=12.13, avg_loss=0.0049, train_err=0.0774
Eval: 1024_h1=0.0042, 1024_l2=0.0029
[233] time=12.12, avg_loss=0.0037, train_err=0.0594
Eval: 1024_h1=0.0036, 1024_l2=0.0031
[234] time=12.12, avg_loss=0.0043, train_err=0.0687
Eval: 1024_h1=0.0058, 1024_l2=0.0041
[235] time=12.12, avg_loss=0.0046, train_err=0.0729
Eval: 1024_h1=0.0045, 1024_l2=0.0030
[236] time=12.13, avg_loss=0.0039, train_err=0.0626
Eval: 1024_h1=0.0042, 1024_l2=0.0032
[237] time=12.12, avg_loss=0.0048, train_err=0.0757
Eval: 1024_h1=0.0046, 1024_l2=0.0036
[238] time=12.12, avg_loss=0.0050, train_err=0.0799
Eval: 1024_h1=0.0046, 1024_l2=0.0045
[239] time=12.13, avg_loss=0.0046, train_err=0.0738
Eval: 1024_h1=0.0047, 1024_l2=0.0031
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=12.12, avg_loss=0.0036, train_err=0.0575
Eval: 1024_h1=0.0054, 1024_l2=0.0052
[241] time=12.13, avg_loss=0.0039, train_err=0.0613
Eval: 1024_h1=0.0043, 1024_l2=0.0037
[242] time=12.12, avg_loss=0.0040, train_err=0.0637
Eval: 1024_h1=0.0056, 1024_l2=0.0044
[243] time=12.13, avg_loss=0.0044, train_err=0.0699
Eval: 1024_h1=0.0047, 1024_l2=0.0034
[244] time=12.13, avg_loss=0.0038, train_err=0.0606
Eval: 1024_h1=0.0044, 1024_l2=0.0035
[245] time=12.12, avg_loss=0.0046, train_err=0.0725
Eval: 1024_h1=0.0039, 1024_l2=0.0038
[246] time=12.12, avg_loss=0.0042, train_err=0.0670
Eval: 1024_h1=0.0061, 1024_l2=0.0043
[247] time=12.13, avg_loss=0.0035, train_err=0.0558
Eval: 1024_h1=0.0035, 1024_l2=0.0039
[248] time=12.12, avg_loss=0.0042, train_err=0.0664
Eval: 1024_h1=0.0033, 1024_l2=0.0026
[249] time=12.12, avg_loss=0.0042, train_err=0.0662
Eval: 1024_h1=0.0041, 1024_l2=0.0036
{'train_err': 0.06620675615138477, 'avg_loss': 0.004171025637537241, 'avg_lasso_loss': None, 'epoch_train_time': 12.121990507468581, '1024_h1': tensor(0.0041, device='cuda:0'), '1024_l2': tensor(0.0036, device='cuda:0')}
