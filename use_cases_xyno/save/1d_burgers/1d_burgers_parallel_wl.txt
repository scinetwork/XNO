
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Wavelet Neural Operator (WNO) Kernel ]
>>> Overview:
The WNO uses wavelet transformations to extract multi-resolution features from input signals.
Wavelet decomposition offers a unique advantage in capturing localized features in both spatial
and frequency domains.

>>> Key Features:
- Multi-resolution analysis via wavelet decomposition.
- Supports both compressive sensing and hierarchical learning.

>>> Reference:
Tripura, T. et al. 'Wavelet neural operator: a neural operator for parametric partial differential equations'.
Link: https://arxiv.org/pdf/2205.02191
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 1951041

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7ff5d17d3fb0>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7ff5d177e540>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7ff5d177e540>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7ff5b4eeca70>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=8.50, avg_loss=0.8158, train_err=12.9490
Eval: 1024_h1=0.7496, 1024_l2=0.6118
[Rank 0]: saved training state to save/1d_burgers/parallel/wl
[1] time=7.99, avg_loss=0.7354, train_err=11.6726
Eval: 1024_h1=0.7288, 1024_l2=0.5660
[2] time=8.00, avg_loss=0.7151, train_err=11.3507
Eval: 1024_h1=0.7238, 1024_l2=0.5395
[3] time=7.97, avg_loss=0.7098, train_err=11.2674
Eval: 1024_h1=0.7080, 1024_l2=0.4602
[4] time=7.98, avg_loss=0.6905, train_err=10.9610
Eval: 1024_h1=0.6883, 1024_l2=0.4804
[5] time=7.97, avg_loss=0.6450, train_err=10.2376
Eval: 1024_h1=0.6320, 1024_l2=0.4959
[6] time=7.97, avg_loss=0.5856, train_err=9.2952
Eval: 1024_h1=0.5883, 1024_l2=0.4922
[7] time=7.99, avg_loss=0.5504, train_err=8.7360
Eval: 1024_h1=0.5526, 1024_l2=0.4040
[8] time=7.98, avg_loss=0.4890, train_err=7.7627
Eval: 1024_h1=0.5208, 1024_l2=0.3942
[9] time=7.98, avg_loss=0.4663, train_err=7.4011
Eval: 1024_h1=0.5623, 1024_l2=0.3859
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=14.05, avg_loss=0.4431, train_err=7.0330
Eval: 1024_h1=0.4423, 1024_l2=0.2912
[11] time=14.02, avg_loss=0.3941, train_err=6.2559
Eval: 1024_h1=0.4059, 1024_l2=0.2777
[12] time=14.00, avg_loss=0.3624, train_err=5.7518
Eval: 1024_h1=0.3862, 1024_l2=0.2664
[13] time=14.01, avg_loss=0.3415, train_err=5.4213
Eval: 1024_h1=0.3334, 1024_l2=0.2179
[14] time=14.00, avg_loss=0.3186, train_err=5.0578
Eval: 1024_h1=0.3619, 1024_l2=0.2262
[15] time=14.00, avg_loss=0.3082, train_err=4.8919
Eval: 1024_h1=0.3259, 1024_l2=0.2167
[16] time=14.02, avg_loss=0.3093, train_err=4.9088
Eval: 1024_h1=0.3818, 1024_l2=0.2890
[17] time=14.02, avg_loss=0.3089, train_err=4.9032
Eval: 1024_h1=0.3946, 1024_l2=0.2592
[18] time=13.99, avg_loss=0.3059, train_err=4.8560
Eval: 1024_h1=0.3104, 1024_l2=0.3161
[19] time=14.00, avg_loss=0.2905, train_err=4.6113
Eval: 1024_h1=0.3459, 1024_l2=0.4135
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=13.99, avg_loss=0.3083, train_err=4.8938
Eval: 1024_h1=0.2841, 1024_l2=0.5360
[21] time=13.98, avg_loss=0.2855, train_err=4.5325
Eval: 1024_h1=0.3364, 1024_l2=0.5507
[22] time=14.00, avg_loss=0.2833, train_err=4.4965
Eval: 1024_h1=0.2961, 1024_l2=0.5939
[23] time=14.00, avg_loss=0.2656, train_err=4.2160
Eval: 1024_h1=0.2617, 1024_l2=0.5921
[24] time=14.00, avg_loss=0.2550, train_err=4.0469
Eval: 1024_h1=0.2545, 1024_l2=0.6015
[25] time=14.00, avg_loss=0.2409, train_err=3.8234
Eval: 1024_h1=0.2663, 1024_l2=0.6103
[26] time=14.02, avg_loss=0.2395, train_err=3.8017
Eval: 1024_h1=0.2528, 1024_l2=0.6162
[27] time=14.01, avg_loss=0.2359, train_err=3.7438
Eval: 1024_h1=0.2672, 1024_l2=0.6288
[28] time=14.01, avg_loss=0.2345, train_err=3.7215
Eval: 1024_h1=0.2481, 1024_l2=0.5990
[29] time=13.99, avg_loss=0.2096, train_err=3.3272
Eval: 1024_h1=0.2151, 1024_l2=0.6254
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=14.00, avg_loss=0.2055, train_err=3.2615
Eval: 1024_h1=0.2288, 1024_l2=0.5982
[31] time=14.01, avg_loss=0.1970, train_err=3.1270
Eval: 1024_h1=0.2120, 1024_l2=0.6565
[32] time=14.00, avg_loss=0.1908, train_err=3.0283
Eval: 1024_h1=0.2118, 1024_l2=0.5922
[33] time=14.01, avg_loss=0.1911, train_err=3.0326
Eval: 1024_h1=0.2192, 1024_l2=0.6266
[34] time=14.00, avg_loss=0.1782, train_err=2.8287
Eval: 1024_h1=0.2000, 1024_l2=0.5723
[35] time=14.00, avg_loss=0.1720, train_err=2.7300
Eval: 1024_h1=0.1978, 1024_l2=0.5666
[36] time=14.00, avg_loss=0.1800, train_err=2.8570
Eval: 1024_h1=0.2147, 1024_l2=0.5940
[37] time=14.01, avg_loss=0.1729, train_err=2.7440
Eval: 1024_h1=0.1987, 1024_l2=0.6075
[38] time=14.07, avg_loss=0.1768, train_err=2.8058
Eval: 1024_h1=0.1834, 1024_l2=0.5899
[39] time=14.34, avg_loss=0.1738, train_err=2.7591
Eval: 1024_h1=0.1802, 1024_l2=0.5774
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=14.33, avg_loss=0.1641, train_err=2.6053
Eval: 1024_h1=0.1881, 1024_l2=0.6050
[41] time=14.31, avg_loss=0.1620, train_err=2.5720
Eval: 1024_h1=0.1791, 1024_l2=0.6156
[42] time=14.34, avg_loss=0.1645, train_err=2.6118
Eval: 1024_h1=0.1861, 1024_l2=0.5829
[43] time=14.34, avg_loss=0.1598, train_err=2.5367
Eval: 1024_h1=0.1867, 1024_l2=0.6098
[44] time=14.32, avg_loss=0.1592, train_err=2.5266
Eval: 1024_h1=0.1836, 1024_l2=0.5908
[45] time=14.33, avg_loss=0.1571, train_err=2.4933
Eval: 1024_h1=0.1730, 1024_l2=0.5573
[46] time=14.35, avg_loss=0.1555, train_err=2.4678
Eval: 1024_h1=0.1747, 1024_l2=0.5707
[47] time=14.29, avg_loss=0.1487, train_err=2.3600
Eval: 1024_h1=0.1804, 1024_l2=0.5716
[48] time=14.35, avg_loss=0.1551, train_err=2.4616
Eval: 1024_h1=0.1836, 1024_l2=0.5905
[49] time=14.24, avg_loss=0.1489, train_err=2.3634
Eval: 1024_h1=0.1789, 1024_l2=0.5879
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=14.03, avg_loss=0.1465, train_err=2.3257
Eval: 1024_h1=0.1670, 1024_l2=0.5625
[Rank 0]: saved training state to save/1d_burgers/parallel/wl
[51] time=14.04, avg_loss=0.1499, train_err=2.3790
Eval: 1024_h1=0.1643, 1024_l2=0.5567
[52] time=14.05, avg_loss=0.1446, train_err=2.2950
Eval: 1024_h1=0.1673, 1024_l2=0.5494
[53] time=14.02, avg_loss=0.1399, train_err=2.2205
Eval: 1024_h1=0.1535, 1024_l2=0.5636
[54] time=14.04, avg_loss=0.1366, train_err=2.1676
Eval: 1024_h1=0.1554, 1024_l2=0.5464
[55] time=14.02, avg_loss=0.1451, train_err=2.3036
Eval: 1024_h1=0.1771, 1024_l2=0.5668
[56] time=14.04, avg_loss=0.1537, train_err=2.4389
Eval: 1024_h1=0.1677, 1024_l2=0.5373
[57] time=14.02, avg_loss=0.1377, train_err=2.1853
Eval: 1024_h1=0.1552, 1024_l2=0.5470
[58] time=14.04, avg_loss=0.1331, train_err=2.1133
Eval: 1024_h1=0.1601, 1024_l2=0.5049
[59] time=14.02, avg_loss=0.1389, train_err=2.2052
Eval: 1024_h1=0.1511, 1024_l2=0.5205
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=14.05, avg_loss=0.1398, train_err=2.2193
Eval: 1024_h1=0.1766, 1024_l2=0.5399
[61] time=14.03, avg_loss=0.1408, train_err=2.2342
Eval: 1024_h1=0.1555, 1024_l2=0.5288
[62] time=14.03, avg_loss=0.1389, train_err=2.2047
Eval: 1024_h1=0.1554, 1024_l2=0.5287
[63] time=14.03, avg_loss=0.1463, train_err=2.3218
Eval: 1024_h1=0.1705, 1024_l2=0.5487
[64] time=14.04, avg_loss=0.1416, train_err=2.2471
Eval: 1024_h1=0.1608, 1024_l2=0.5338
[65] time=14.04, avg_loss=0.1321, train_err=2.0962
Eval: 1024_h1=0.1600, 1024_l2=0.5346
[66] time=14.02, avg_loss=0.1423, train_err=2.2595
Eval: 1024_h1=0.1687, 1024_l2=0.5546
[67] time=14.04, avg_loss=0.1407, train_err=2.2327
Eval: 1024_h1=0.1632, 1024_l2=0.5313
[68] time=14.03, avg_loss=0.1335, train_err=2.1197
Eval: 1024_h1=0.1483, 1024_l2=0.5436
[69] time=14.03, avg_loss=0.1401, train_err=2.2235
Eval: 1024_h1=0.1720, 1024_l2=0.5400
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=14.04, avg_loss=0.1309, train_err=2.0779
Eval: 1024_h1=0.1430, 1024_l2=0.5223
[71] time=14.03, avg_loss=0.1377, train_err=2.1853
Eval: 1024_h1=0.1564, 1024_l2=0.5668
[72] time=14.04, avg_loss=0.1331, train_err=2.1135
Eval: 1024_h1=0.1581, 1024_l2=0.5256
[73] time=14.05, avg_loss=0.1364, train_err=2.1648
Eval: 1024_h1=0.1564, 1024_l2=0.5171
[74] time=14.03, avg_loss=0.1285, train_err=2.0397
Eval: 1024_h1=0.1763, 1024_l2=0.5324
[75] time=14.05, avg_loss=0.1418, train_err=2.2506
Eval: 1024_h1=0.1641, 1024_l2=0.5168
[76] time=14.02, avg_loss=0.1295, train_err=2.0549
Eval: 1024_h1=0.1461, 1024_l2=0.4757
[77] time=14.07, avg_loss=0.1297, train_err=2.0592
Eval: 1024_h1=0.1572, 1024_l2=0.5127
[78] time=14.04, avg_loss=0.1304, train_err=2.0697
Eval: 1024_h1=0.1433, 1024_l2=0.5094
[79] time=14.06, avg_loss=0.1247, train_err=1.9797
Eval: 1024_h1=0.1773, 1024_l2=0.4874
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=14.04, avg_loss=0.1308, train_err=2.0756
Eval: 1024_h1=0.1535, 1024_l2=0.5145
[81] time=14.04, avg_loss=0.1300, train_err=2.0634
Eval: 1024_h1=0.1604, 1024_l2=0.5163
[82] time=14.04, avg_loss=0.1343, train_err=2.1319
Eval: 1024_h1=0.1544, 1024_l2=0.5073
[83] time=14.04, avg_loss=0.1198, train_err=1.9010
Eval: 1024_h1=0.1507, 1024_l2=0.4887
[84] time=14.05, avg_loss=0.1260, train_err=2.0004
Eval: 1024_h1=0.1579, 1024_l2=0.4669
[85] time=14.03, avg_loss=0.1249, train_err=1.9818
Eval: 1024_h1=0.1411, 1024_l2=0.4970
[86] time=14.04, avg_loss=0.1244, train_err=1.9750
Eval: 1024_h1=0.1472, 1024_l2=0.4914
[87] time=14.04, avg_loss=0.1233, train_err=1.9569
Eval: 1024_h1=0.1549, 1024_l2=0.4694
[88] time=14.04, avg_loss=0.1250, train_err=1.9834
Eval: 1024_h1=0.1389, 1024_l2=0.4790
[89] time=14.03, avg_loss=0.1202, train_err=1.9084
Eval: 1024_h1=0.1344, 1024_l2=0.4569
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=14.05, avg_loss=0.1242, train_err=1.9717
Eval: 1024_h1=0.1497, 1024_l2=0.4797
[91] time=14.05, avg_loss=0.1222, train_err=1.9400
Eval: 1024_h1=0.1381, 1024_l2=0.4856
[92] time=14.02, avg_loss=0.1202, train_err=1.9073
Eval: 1024_h1=0.1341, 1024_l2=0.4709
[93] time=14.06, avg_loss=0.1226, train_err=1.9462
Eval: 1024_h1=0.1429, 1024_l2=0.5019
[94] time=14.04, avg_loss=0.1292, train_err=2.0501
Eval: 1024_h1=0.1409, 1024_l2=0.5113
[95] time=14.05, avg_loss=0.1200, train_err=1.9048
Eval: 1024_h1=0.1412, 1024_l2=0.4609
[96] time=14.01, avg_loss=0.1239, train_err=1.9661
Eval: 1024_h1=0.1622, 1024_l2=0.4790
[97] time=14.06, avg_loss=0.1347, train_err=2.1385
Eval: 1024_h1=0.1527, 1024_l2=0.5012
[98] time=14.03, avg_loss=0.1157, train_err=1.8363
Eval: 1024_h1=0.1328, 1024_l2=0.4715
[99] time=14.05, avg_loss=0.1115, train_err=1.7692
Eval: 1024_h1=0.1340, 1024_l2=0.4508
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=14.04, avg_loss=0.1021, train_err=1.6203
Eval: 1024_h1=0.1148, 1024_l2=0.4420
[Rank 0]: saved training state to save/1d_burgers/parallel/wl
[101] time=14.07, avg_loss=0.1005, train_err=1.5946
Eval: 1024_h1=0.1236, 1024_l2=0.4425
[102] time=14.04, avg_loss=0.0950, train_err=1.5075
Eval: 1024_h1=0.1155, 1024_l2=0.4489
[103] time=14.04, avg_loss=0.0950, train_err=1.5078
Eval: 1024_h1=0.1187, 1024_l2=0.4268
[104] time=14.03, avg_loss=0.0986, train_err=1.5651
Eval: 1024_h1=0.1120, 1024_l2=0.4470
[105] time=14.05, avg_loss=0.0924, train_err=1.4661
Eval: 1024_h1=0.1163, 1024_l2=0.4265
[106] time=14.03, avg_loss=0.0951, train_err=1.5097
Eval: 1024_h1=0.1200, 1024_l2=0.4329
[107] time=14.05, avg_loss=0.1006, train_err=1.5972
Eval: 1024_h1=0.1148, 1024_l2=0.4239
[108] time=14.03, avg_loss=0.0941, train_err=1.4933
Eval: 1024_h1=0.1223, 1024_l2=0.4389
[109] time=14.04, avg_loss=0.0966, train_err=1.5336
Eval: 1024_h1=0.1162, 1024_l2=0.4199
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=14.04, avg_loss=0.0989, train_err=1.5701
Eval: 1024_h1=0.1204, 1024_l2=0.4285
[111] time=14.04, avg_loss=0.1026, train_err=1.6293
Eval: 1024_h1=0.1220, 1024_l2=0.4288
[112] time=14.04, avg_loss=0.1021, train_err=1.6214
Eval: 1024_h1=0.1315, 1024_l2=0.4464
[113] time=14.03, avg_loss=0.1036, train_err=1.6451
Eval: 1024_h1=0.1304, 1024_l2=0.4354
[114] time=14.06, avg_loss=0.1063, train_err=1.6867
Eval: 1024_h1=0.1261, 1024_l2=0.4396
[115] time=14.03, avg_loss=0.1058, train_err=1.6787
Eval: 1024_h1=0.1286, 1024_l2=0.4298
[116] time=14.04, avg_loss=0.1005, train_err=1.5952
Eval: 1024_h1=0.1259, 1024_l2=0.4352
[117] time=14.02, avg_loss=0.1114, train_err=1.7689
Eval: 1024_h1=0.1300, 1024_l2=0.4327
[118] time=14.04, avg_loss=0.1107, train_err=1.7568
Eval: 1024_h1=0.1385, 1024_l2=0.4346
[119] time=14.03, avg_loss=0.1068, train_err=1.6949
Eval: 1024_h1=0.1295, 1024_l2=0.4349
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=14.05, avg_loss=0.1071, train_err=1.6994
Eval: 1024_h1=0.1382, 1024_l2=0.4166
[121] time=14.06, avg_loss=0.1099, train_err=1.7447
Eval: 1024_h1=0.1350, 1024_l2=0.4480
[122] time=14.03, avg_loss=0.1180, train_err=1.8732
Eval: 1024_h1=0.1454, 1024_l2=0.4302
[123] time=14.05, avg_loss=0.1243, train_err=1.9731
Eval: 1024_h1=0.1615, 1024_l2=0.4532
[124] time=14.04, avg_loss=0.1403, train_err=2.2277
Eval: 1024_h1=0.1731, 1024_l2=0.4461
[125] time=14.05, avg_loss=0.1467, train_err=2.3286
Eval: 1024_h1=0.1920, 1024_l2=0.4712
[126] time=14.03, avg_loss=0.1478, train_err=2.3453
Eval: 1024_h1=0.1623, 1024_l2=0.4965
[127] time=14.05, avg_loss=0.1481, train_err=2.3513
Eval: 1024_h1=0.1643, 1024_l2=0.4704
[128] time=14.04, avg_loss=0.1340, train_err=2.1271
Eval: 1024_h1=0.1598, 1024_l2=0.5008
[129] time=14.03, avg_loss=0.1446, train_err=2.2959
Eval: 1024_h1=0.1676, 1024_l2=0.4986
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=14.04, avg_loss=0.1358, train_err=2.1561
Eval: 1024_h1=0.1696, 1024_l2=0.4703
[131] time=14.03, avg_loss=0.1466, train_err=2.3272
Eval: 1024_h1=0.1620, 1024_l2=0.4891
[132] time=14.06, avg_loss=0.1394, train_err=2.2128
Eval: 1024_h1=0.1643, 1024_l2=0.4849
[133] time=14.02, avg_loss=0.1343, train_err=2.1313
Eval: 1024_h1=0.1557, 1024_l2=0.4856
[134] time=14.05, avg_loss=0.1415, train_err=2.2464
Eval: 1024_h1=0.1807, 1024_l2=0.4520
[135] time=14.02, avg_loss=0.1709, train_err=2.7134
Eval: 1024_h1=0.1706, 1024_l2=0.4790
[136] time=14.04, avg_loss=0.1431, train_err=2.2718
Eval: 1024_h1=0.1770, 1024_l2=0.4961
[137] time=14.02, avg_loss=0.1395, train_err=2.2135
Eval: 1024_h1=0.1546, 1024_l2=0.5088
[138] time=14.04, avg_loss=0.1323, train_err=2.1004
Eval: 1024_h1=0.1555, 1024_l2=0.5022
[139] time=14.02, avg_loss=0.1328, train_err=2.1077
Eval: 1024_h1=0.1540, 1024_l2=0.4910
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=14.04, avg_loss=0.1282, train_err=2.0357
Eval: 1024_h1=0.1548, 1024_l2=0.5050
[141] time=14.03, avg_loss=0.1259, train_err=1.9991
Eval: 1024_h1=0.1524, 1024_l2=0.4893
[142] time=14.03, avg_loss=0.1261, train_err=2.0014
Eval: 1024_h1=0.1515, 1024_l2=0.4648
[143] time=14.04, avg_loss=0.1228, train_err=1.9495
Eval: 1024_h1=0.1442, 1024_l2=0.4829
[144] time=14.03, avg_loss=0.1244, train_err=1.9743
Eval: 1024_h1=0.1578, 1024_l2=0.4504
[145] time=14.03, avg_loss=0.1238, train_err=1.9655
Eval: 1024_h1=0.1452, 1024_l2=0.4724
[146] time=14.03, avg_loss=0.1213, train_err=1.9261
Eval: 1024_h1=0.1378, 1024_l2=0.4831
[147] time=14.05, avg_loss=0.1211, train_err=1.9223
Eval: 1024_h1=0.1458, 1024_l2=0.4704
[148] time=14.04, avg_loss=0.1220, train_err=1.9358
Eval: 1024_h1=0.1507, 1024_l2=0.4955
[149] time=14.04, avg_loss=0.1201, train_err=1.9068
Eval: 1024_h1=0.1443, 1024_l2=0.4782
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=14.02, avg_loss=0.1231, train_err=1.9533
Eval: 1024_h1=0.1476, 1024_l2=0.4833
[Rank 0]: saved training state to save/1d_burgers/parallel/wl
[151] time=14.05, avg_loss=0.1123, train_err=1.7827
Eval: 1024_h1=0.1431, 1024_l2=0.4742
[152] time=14.06, avg_loss=0.1149, train_err=1.8230
Eval: 1024_h1=0.1406, 1024_l2=0.4571
[153] time=14.02, avg_loss=0.1127, train_err=1.7893
Eval: 1024_h1=0.1394, 1024_l2=0.4924
[154] time=14.05, avg_loss=0.1173, train_err=1.8621
Eval: 1024_h1=0.1380, 1024_l2=0.4654
[155] time=14.03, avg_loss=0.1183, train_err=1.8775
Eval: 1024_h1=0.1433, 1024_l2=0.4814
[156] time=14.03, avg_loss=0.1180, train_err=1.8727
Eval: 1024_h1=0.1437, 1024_l2=0.4809
[157] time=14.03, avg_loss=0.1160, train_err=1.8410
Eval: 1024_h1=0.1439, 1024_l2=0.4688
[158] time=14.06, avg_loss=0.1205, train_err=1.9133
Eval: 1024_h1=0.1701, 1024_l2=0.4956
[159] time=14.02, avg_loss=0.1219, train_err=1.9352
Eval: 1024_h1=0.1393, 1024_l2=0.4544
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=14.04, avg_loss=0.1225, train_err=1.9449
Eval: 1024_h1=0.1486, 1024_l2=0.5039
[161] time=14.03, avg_loss=0.1156, train_err=1.8344
Eval: 1024_h1=0.1302, 1024_l2=0.4701
[162] time=14.03, avg_loss=0.1135, train_err=1.8008
Eval: 1024_h1=0.1416, 1024_l2=0.4489
[163] time=14.03, avg_loss=0.1133, train_err=1.7978
Eval: 1024_h1=0.1437, 1024_l2=0.4800
[164] time=14.06, avg_loss=0.1111, train_err=1.7627
Eval: 1024_h1=0.1367, 1024_l2=0.4580
[165] time=14.03, avg_loss=0.1155, train_err=1.8330
Eval: 1024_h1=0.1484, 1024_l2=0.4661
[166] time=14.03, avg_loss=0.1119, train_err=1.7767
Eval: 1024_h1=0.1444, 1024_l2=0.4655
[167] time=14.03, avg_loss=0.1169, train_err=1.8551
Eval: 1024_h1=0.1423, 1024_l2=0.4660
[168] time=14.03, avg_loss=0.1095, train_err=1.7382
Eval: 1024_h1=0.1294, 1024_l2=0.4630
[169] time=14.04, avg_loss=0.1092, train_err=1.7328
Eval: 1024_h1=0.1463, 1024_l2=0.4470
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=14.03, avg_loss=0.1134, train_err=1.8006
Eval: 1024_h1=0.1317, 1024_l2=0.4598
[171] time=14.05, avg_loss=0.1091, train_err=1.7313
Eval: 1024_h1=0.1379, 1024_l2=0.4601
[172] time=14.03, avg_loss=0.1132, train_err=1.7967
Eval: 1024_h1=0.1315, 1024_l2=0.4561
[173] time=14.04, avg_loss=0.1111, train_err=1.7628
Eval: 1024_h1=0.1448, 1024_l2=0.4589
[174] time=14.02, avg_loss=0.1116, train_err=1.7715
Eval: 1024_h1=0.1309, 1024_l2=0.4504
[175] time=14.04, avg_loss=0.1088, train_err=1.7267
Eval: 1024_h1=0.1318, 1024_l2=0.4534
[176] time=14.04, avg_loss=0.1114, train_err=1.7681
Eval: 1024_h1=0.1464, 1024_l2=0.4698
[177] time=14.04, avg_loss=0.1077, train_err=1.7102
Eval: 1024_h1=0.1276, 1024_l2=0.4412
[178] time=14.05, avg_loss=0.1073, train_err=1.7031
Eval: 1024_h1=0.1390, 1024_l2=0.4461
[179] time=14.04, avg_loss=0.1121, train_err=1.7788
Eval: 1024_h1=0.1384, 1024_l2=0.4389
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=14.03, avg_loss=0.1107, train_err=1.7575
Eval: 1024_h1=0.1360, 1024_l2=0.4223
[181] time=14.04, avg_loss=0.1126, train_err=1.7869
Eval: 1024_h1=0.1464, 1024_l2=0.4562
[182] time=14.05, avg_loss=0.1160, train_err=1.8410
Eval: 1024_h1=0.1349, 1024_l2=0.4715
[183] time=14.03, avg_loss=0.1162, train_err=1.8448
Eval: 1024_h1=0.1400, 1024_l2=0.4634
[184] time=14.06, avg_loss=0.1090, train_err=1.7302
Eval: 1024_h1=0.1251, 1024_l2=0.4408
[185] time=14.04, avg_loss=0.1080, train_err=1.7144
Eval: 1024_h1=0.1449, 1024_l2=0.4460
[186] time=14.05, avg_loss=0.1121, train_err=1.7788
Eval: 1024_h1=0.1370, 1024_l2=0.4593
[187] time=14.03, avg_loss=0.1068, train_err=1.6948
Eval: 1024_h1=0.1331, 1024_l2=0.4174
[188] time=14.05, avg_loss=0.1076, train_err=1.7079
Eval: 1024_h1=0.1435, 1024_l2=0.4518
[189] time=14.05, avg_loss=0.1060, train_err=1.6819
Eval: 1024_h1=0.1260, 1024_l2=0.4477
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=14.05, avg_loss=0.1030, train_err=1.6346
Eval: 1024_h1=0.1351, 1024_l2=0.4515
[191] time=14.06, avg_loss=0.1071, train_err=1.6997
Eval: 1024_h1=0.1362, 1024_l2=0.4508
[192] time=14.03, avg_loss=0.1071, train_err=1.7008
Eval: 1024_h1=0.1359, 1024_l2=0.4392
[193] time=14.05, avg_loss=0.1111, train_err=1.7639
Eval: 1024_h1=0.1296, 1024_l2=0.4254
[194] time=14.04, avg_loss=0.1052, train_err=1.6696
Eval: 1024_h1=0.1316, 1024_l2=0.4124
[195] time=14.04, avg_loss=0.1083, train_err=1.7194
Eval: 1024_h1=0.1382, 1024_l2=0.4402
[196] time=14.06, avg_loss=0.1188, train_err=1.8855
Eval: 1024_h1=0.1373, 1024_l2=0.4306
[197] time=14.03, avg_loss=0.1092, train_err=1.7336
Eval: 1024_h1=0.1355, 1024_l2=0.4232
[198] time=14.03, avg_loss=0.1101, train_err=1.7468
Eval: 1024_h1=0.1545, 1024_l2=0.4345
[199] time=14.02, avg_loss=0.1108, train_err=1.7589
Eval: 1024_h1=0.1391, 1024_l2=0.4239
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=14.04, avg_loss=0.0933, train_err=1.4813
Eval: 1024_h1=0.1224, 1024_l2=0.4311
[Rank 0]: saved training state to save/1d_burgers/parallel/wl
[201] time=14.05, avg_loss=0.0871, train_err=1.3821
Eval: 1024_h1=0.1110, 1024_l2=0.4206
[202] time=14.05, avg_loss=0.0851, train_err=1.3513
Eval: 1024_h1=0.1101, 1024_l2=0.4246
[203] time=14.03, avg_loss=0.0862, train_err=1.3675
Eval: 1024_h1=0.1130, 1024_l2=0.4228
[204] time=14.02, avg_loss=0.0864, train_err=1.3717
Eval: 1024_h1=0.1083, 1024_l2=0.4234
[205] time=14.05, avg_loss=0.0856, train_err=1.3587
Eval: 1024_h1=0.1128, 1024_l2=0.4183
[206] time=14.04, avg_loss=0.0853, train_err=1.3537
Eval: 1024_h1=0.1104, 1024_l2=0.4118
[207] time=14.03, avg_loss=0.0831, train_err=1.3189
Eval: 1024_h1=0.1126, 1024_l2=0.4174
[208] time=14.03, avg_loss=0.0857, train_err=1.3600
Eval: 1024_h1=0.1169, 1024_l2=0.4156
[209] time=14.07, avg_loss=0.0893, train_err=1.4172
Eval: 1024_h1=0.1130, 1024_l2=0.4223
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=14.05, avg_loss=0.0888, train_err=1.4101
Eval: 1024_h1=0.1168, 1024_l2=0.4198
[211] time=14.02, avg_loss=0.0882, train_err=1.3995
Eval: 1024_h1=0.1120, 1024_l2=0.4172
[212] time=14.05, avg_loss=0.0877, train_err=1.3926
Eval: 1024_h1=0.1097, 1024_l2=0.4076
[213] time=14.03, avg_loss=0.0844, train_err=1.3403
Eval: 1024_h1=0.1119, 1024_l2=0.4104
[214] time=14.04, avg_loss=0.0853, train_err=1.3546
Eval: 1024_h1=0.1144, 1024_l2=0.4270
[215] time=14.02, avg_loss=0.0860, train_err=1.3653
Eval: 1024_h1=0.1141, 1024_l2=0.4007
[216] time=14.05, avg_loss=0.0886, train_err=1.4062
Eval: 1024_h1=0.1199, 1024_l2=0.4145
[217] time=14.03, avg_loss=0.0873, train_err=1.3855
Eval: 1024_h1=0.1121, 1024_l2=0.4006
[218] time=14.06, avg_loss=0.0873, train_err=1.3857
Eval: 1024_h1=0.1117, 1024_l2=0.4025
[219] time=14.04, avg_loss=0.0850, train_err=1.3495
Eval: 1024_h1=0.1208, 1024_l2=0.4025
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=14.05, avg_loss=0.0867, train_err=1.3766
Eval: 1024_h1=0.1145, 1024_l2=0.3899
[221] time=14.04, avg_loss=0.0909, train_err=1.4431
Eval: 1024_h1=0.1187, 1024_l2=0.4216
[222] time=14.03, avg_loss=0.0876, train_err=1.3906
Eval: 1024_h1=0.1136, 1024_l2=0.3986
[223] time=14.04, avg_loss=0.0880, train_err=1.3976
Eval: 1024_h1=0.1175, 1024_l2=0.4010
[224] time=14.04, avg_loss=0.0871, train_err=1.3823
Eval: 1024_h1=0.1106, 1024_l2=0.4016
[225] time=14.03, avg_loss=0.0850, train_err=1.3499
Eval: 1024_h1=0.1159, 1024_l2=0.4022
[226] time=14.02, avg_loss=0.0867, train_err=1.3759
Eval: 1024_h1=0.1191, 1024_l2=0.4038
[227] time=14.05, avg_loss=0.0905, train_err=1.4361
Eval: 1024_h1=0.1164, 1024_l2=0.4067
[228] time=14.02, avg_loss=0.0896, train_err=1.4224
Eval: 1024_h1=0.1122, 1024_l2=0.4019
[229] time=14.04, avg_loss=0.0910, train_err=1.4448
Eval: 1024_h1=0.1130, 1024_l2=0.4021
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=14.02, avg_loss=0.0883, train_err=1.4015
Eval: 1024_h1=0.1175, 1024_l2=0.3996
[231] time=14.04, avg_loss=0.0876, train_err=1.3899
Eval: 1024_h1=0.1124, 1024_l2=0.4039
[232] time=14.02, avg_loss=0.0855, train_err=1.3564
Eval: 1024_h1=0.1150, 1024_l2=0.3997
[233] time=14.03, avg_loss=0.0871, train_err=1.3828
Eval: 1024_h1=0.1122, 1024_l2=0.3975
[234] time=14.07, avg_loss=0.0886, train_err=1.4067
Eval: 1024_h1=0.1174, 1024_l2=0.4078
[235] time=14.04, avg_loss=0.0876, train_err=1.3905
Eval: 1024_h1=0.1180, 1024_l2=0.3999
[236] time=14.05, avg_loss=0.0882, train_err=1.4001
Eval: 1024_h1=0.1317, 1024_l2=0.4159
[237] time=14.03, avg_loss=0.0900, train_err=1.4280
Eval: 1024_h1=0.1123, 1024_l2=0.3969
[238] time=14.06, avg_loss=0.0868, train_err=1.3776
Eval: 1024_h1=0.1182, 1024_l2=0.3908
[239] time=14.03, avg_loss=0.0917, train_err=1.4561
Eval: 1024_h1=0.1180, 1024_l2=0.3966
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=14.05, avg_loss=0.0875, train_err=1.3895
Eval: 1024_h1=0.1218, 1024_l2=0.4071
[241] time=14.03, avg_loss=0.0905, train_err=1.4363
Eval: 1024_h1=0.1240, 1024_l2=0.4217
[242] time=14.03, avg_loss=0.0928, train_err=1.4735
Eval: 1024_h1=0.1289, 1024_l2=0.3933
[243] time=14.04, avg_loss=0.0885, train_err=1.4040
Eval: 1024_h1=0.1153, 1024_l2=0.4033
[244] time=14.02, avg_loss=0.0850, train_err=1.3487
Eval: 1024_h1=0.1113, 1024_l2=0.3983
[245] time=14.03, avg_loss=0.0850, train_err=1.3495
Eval: 1024_h1=0.1129, 1024_l2=0.3978
[246] time=14.06, avg_loss=0.0888, train_err=1.4091
Eval: 1024_h1=0.1198, 1024_l2=0.3812
[247] time=14.05, avg_loss=0.0957, train_err=1.5198
Eval: 1024_h1=0.1342, 1024_l2=0.4134
[248] time=14.04, avg_loss=0.0945, train_err=1.5000
Eval: 1024_h1=0.1245, 1024_l2=0.3933
[249] time=14.06, avg_loss=0.0899, train_err=1.4277
Eval: 1024_h1=0.1151, 1024_l2=0.4065
{'train_err': 1.4277249442206488, 'avg_loss': 0.08994667148590088, 'avg_lasso_loss': None, 'epoch_train_time': 14.056729791685939, '1024_h1': tensor(0.1151, device='cuda:0'), '1024_l2': tensor(0.4065, device='cuda:0')}
