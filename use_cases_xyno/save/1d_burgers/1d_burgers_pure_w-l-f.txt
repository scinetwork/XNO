
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Fourier Neural Operator (FNO) Kernel ]
>>> Overview:
The FNO leverages Fourier Transform to map input data into the spectral domain, where
convolutional operations are performed by truncating high-frequency modes.

>>> Key Features:
- Effective for parameterized Partial Differential Equations (PDEs).
- Reduces computational complexity by retaining only significant modes.

>>> Reference:
Li, Z. et al. 'Fourier Neural Operator for Parametric Partial Differential Equations' (ICLR 2021).
Link: https://arxiv.org/pdf/2010.08895
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Wavelet Neural Operator (WNO) Kernel ]
>>> Overview:
The WNO uses wavelet transformations to extract multi-resolution features from input signals.
Wavelet decomposition offers a unique advantage in capturing localized features in both spatial
and frequency domains.

>>> Key Features:
- Multi-resolution analysis via wavelet decomposition.
- Supports both compressive sensing and hierarchical learning.

>>> Reference:
Tripura, T. et al. 'Wavelet neural operator: a neural operator for parametric partial differential equations'.
Link: https://arxiv.org/pdf/2205.02191
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 2475585

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7fe44cb56000>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7fe430b09a00>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7fe430b09a00>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7fe44f705ca0>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=3.02, avg_loss=0.5061, train_err=8.0327
Eval: 1024_h1=0.1391, 1024_l2=0.1108
[Rank 0]: saved training state to save/1d_burgers/pure/w-l-f
[1] time=2.52, avg_loss=0.0964, train_err=1.5301
Eval: 1024_h1=0.0532, 1024_l2=0.0387
[2] time=2.50, avg_loss=0.0523, train_err=0.8303
Eval: 1024_h1=0.0541, 1024_l2=0.0365
[3] time=2.50, avg_loss=0.0418, train_err=0.6633
Eval: 1024_h1=0.0414, 1024_l2=0.0272
[4] time=2.50, avg_loss=0.0378, train_err=0.5997
Eval: 1024_h1=0.0442, 1024_l2=0.0279
[5] time=2.50, avg_loss=0.0327, train_err=0.5185
Eval: 1024_h1=0.0352, 1024_l2=0.0268
[6] time=2.49, avg_loss=0.0314, train_err=0.4988
Eval: 1024_h1=0.0300, 1024_l2=0.0251
[7] time=2.50, avg_loss=0.0256, train_err=0.4063
Eval: 1024_h1=0.0401, 1024_l2=0.0384
[8] time=2.50, avg_loss=0.0304, train_err=0.4825
Eval: 1024_h1=0.0240, 1024_l2=0.0161
[9] time=2.49, avg_loss=0.0222, train_err=0.3524
Eval: 1024_h1=0.0229, 1024_l2=0.0138
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=4.06, avg_loss=0.0279, train_err=0.4426
Eval: 1024_h1=0.0495, 1024_l2=0.0457
[11] time=4.04, avg_loss=0.0367, train_err=0.5828
Eval: 1024_h1=0.0270, 1024_l2=0.0167
[12] time=4.03, avg_loss=0.0244, train_err=0.3869
Eval: 1024_h1=0.0509, 1024_l2=0.0454
[13] time=4.04, avg_loss=0.0407, train_err=0.6465
Eval: 1024_h1=0.0385, 1024_l2=0.0333
[14] time=4.03, avg_loss=0.0244, train_err=0.3869
Eval: 1024_h1=0.0319, 1024_l2=0.0250
[15] time=4.04, avg_loss=0.0214, train_err=0.3397
Eval: 1024_h1=0.0199, 1024_l2=0.0147
[16] time=4.03, avg_loss=0.0175, train_err=0.2773
Eval: 1024_h1=0.0230, 1024_l2=0.0118
[17] time=4.03, avg_loss=0.0218, train_err=0.3461
Eval: 1024_h1=0.0178, 1024_l2=0.0117
[18] time=4.04, avg_loss=0.0178, train_err=0.2823
Eval: 1024_h1=0.0243, 1024_l2=0.0200
[19] time=4.03, avg_loss=0.0209, train_err=0.3317
Eval: 1024_h1=0.0442, 1024_l2=0.0392
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=4.03, avg_loss=0.0251, train_err=0.3977
Eval: 1024_h1=0.0215, 1024_l2=0.0144
[21] time=4.03, avg_loss=0.0177, train_err=0.2804
Eval: 1024_h1=0.0156, 1024_l2=0.0105
[22] time=4.03, avg_loss=0.0158, train_err=0.2512
Eval: 1024_h1=0.0200, 1024_l2=0.0140
[23] time=4.04, avg_loss=0.0200, train_err=0.3174
Eval: 1024_h1=0.0180, 1024_l2=0.0120
[24] time=4.03, avg_loss=0.0256, train_err=0.4057
Eval: 1024_h1=0.0184, 1024_l2=0.0142
[25] time=4.03, avg_loss=0.0177, train_err=0.2811
Eval: 1024_h1=0.0145, 1024_l2=0.0097
[26] time=4.04, avg_loss=0.0155, train_err=0.2460
Eval: 1024_h1=0.0157, 1024_l2=0.0125
[27] time=4.02, avg_loss=0.0199, train_err=0.3154
Eval: 1024_h1=0.0280, 1024_l2=0.0181
[28] time=4.03, avg_loss=0.0187, train_err=0.2974
Eval: 1024_h1=0.0194, 1024_l2=0.0158
[29] time=4.02, avg_loss=0.0227, train_err=0.3603
Eval: 1024_h1=0.0210, 1024_l2=0.0149
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=4.04, avg_loss=0.0168, train_err=0.2661
Eval: 1024_h1=0.0204, 1024_l2=0.0122
[31] time=4.04, avg_loss=0.0195, train_err=0.3095
Eval: 1024_h1=0.0372, 1024_l2=0.0313
[32] time=4.03, avg_loss=0.0236, train_err=0.3741
Eval: 1024_h1=0.0174, 1024_l2=0.0130
[33] time=4.04, avg_loss=0.0164, train_err=0.2610
Eval: 1024_h1=0.0141, 1024_l2=0.0083
[34] time=4.03, avg_loss=0.0148, train_err=0.2345
Eval: 1024_h1=0.0133, 1024_l2=0.0075
[35] time=4.04, avg_loss=0.0183, train_err=0.2911
Eval: 1024_h1=0.0173, 1024_l2=0.0109
[36] time=4.04, avg_loss=0.0196, train_err=0.3107
Eval: 1024_h1=0.0171, 1024_l2=0.0121
[37] time=4.03, avg_loss=0.0174, train_err=0.2761
Eval: 1024_h1=0.0204, 1024_l2=0.0158
[38] time=4.04, avg_loss=0.0152, train_err=0.2409
Eval: 1024_h1=0.0349, 1024_l2=0.0309
[39] time=4.03, avg_loss=0.0188, train_err=0.2977
Eval: 1024_h1=0.0170, 1024_l2=0.0125
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=4.03, avg_loss=0.0163, train_err=0.2589
Eval: 1024_h1=0.0240, 1024_l2=0.0191
[41] time=4.03, avg_loss=0.0219, train_err=0.3477
Eval: 1024_h1=0.0129, 1024_l2=0.0095
[42] time=4.03, avg_loss=0.0175, train_err=0.2776
Eval: 1024_h1=0.0139, 1024_l2=0.0096
[43] time=4.03, avg_loss=0.0145, train_err=0.2299
Eval: 1024_h1=0.0165, 1024_l2=0.0112
[44] time=4.03, avg_loss=0.0123, train_err=0.1949
Eval: 1024_h1=0.0160, 1024_l2=0.0116
[45] time=4.03, avg_loss=0.0176, train_err=0.2786
Eval: 1024_h1=0.0232, 1024_l2=0.0142
[46] time=4.04, avg_loss=0.0137, train_err=0.2179
Eval: 1024_h1=0.0126, 1024_l2=0.0097
[47] time=4.03, avg_loss=0.0170, train_err=0.2698
Eval: 1024_h1=0.0227, 1024_l2=0.0185
[48] time=4.03, avg_loss=0.0174, train_err=0.2769
Eval: 1024_h1=0.0129, 1024_l2=0.0072
[49] time=4.04, avg_loss=0.0139, train_err=0.2208
Eval: 1024_h1=0.0154, 1024_l2=0.0084
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=4.03, avg_loss=0.0138, train_err=0.2189
Eval: 1024_h1=0.0121, 1024_l2=0.0083
[Rank 0]: saved training state to save/1d_burgers/pure/w-l-f
[51] time=4.03, avg_loss=0.0149, train_err=0.2372
Eval: 1024_h1=0.0297, 1024_l2=0.0266
[52] time=4.04, avg_loss=0.0165, train_err=0.2620
Eval: 1024_h1=0.0173, 1024_l2=0.0137
[53] time=4.04, avg_loss=0.0154, train_err=0.2437
Eval: 1024_h1=0.0206, 1024_l2=0.0118
[54] time=4.03, avg_loss=0.0164, train_err=0.2602
Eval: 1024_h1=0.0203, 1024_l2=0.0169
[55] time=4.03, avg_loss=0.0138, train_err=0.2196
Eval: 1024_h1=0.0101, 1024_l2=0.0064
[56] time=4.03, avg_loss=0.0122, train_err=0.1940
Eval: 1024_h1=0.0151, 1024_l2=0.0112
[57] time=4.03, avg_loss=0.0126, train_err=0.2001
Eval: 1024_h1=0.0126, 1024_l2=0.0086
[58] time=4.04, avg_loss=0.0146, train_err=0.2314
Eval: 1024_h1=0.0123, 1024_l2=0.0081
[59] time=4.04, avg_loss=0.0154, train_err=0.2442
Eval: 1024_h1=0.0257, 1024_l2=0.0209
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=4.03, avg_loss=0.0161, train_err=0.2560
Eval: 1024_h1=0.0296, 1024_l2=0.0274
[61] time=4.03, avg_loss=0.0168, train_err=0.2671
Eval: 1024_h1=0.0363, 1024_l2=0.0270
[62] time=4.03, avg_loss=0.0150, train_err=0.2387
Eval: 1024_h1=0.0130, 1024_l2=0.0093
[63] time=4.03, avg_loss=0.0131, train_err=0.2082
Eval: 1024_h1=0.0211, 1024_l2=0.0200
[64] time=4.02, avg_loss=0.0156, train_err=0.2479
Eval: 1024_h1=0.0196, 1024_l2=0.0102
[65] time=4.04, avg_loss=0.0125, train_err=0.1979
Eval: 1024_h1=0.0283, 1024_l2=0.0243
[66] time=4.03, avg_loss=0.0167, train_err=0.2654
Eval: 1024_h1=0.0191, 1024_l2=0.0134
[67] time=4.03, avg_loss=0.0131, train_err=0.2086
Eval: 1024_h1=0.0165, 1024_l2=0.0145
[68] time=4.04, avg_loss=0.0177, train_err=0.2812
Eval: 1024_h1=0.0163, 1024_l2=0.0106
[69] time=4.04, avg_loss=0.0150, train_err=0.2375
Eval: 1024_h1=0.0133, 1024_l2=0.0084
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=4.03, avg_loss=0.0145, train_err=0.2308
Eval: 1024_h1=0.0107, 1024_l2=0.0066
[71] time=4.05, avg_loss=0.0126, train_err=0.2004
Eval: 1024_h1=0.0122, 1024_l2=0.0118
[72] time=4.02, avg_loss=0.0115, train_err=0.1821
Eval: 1024_h1=0.0111, 1024_l2=0.0087
[73] time=4.03, avg_loss=0.0140, train_err=0.2221
Eval: 1024_h1=0.0156, 1024_l2=0.0124
[74] time=4.03, avg_loss=0.0127, train_err=0.2014
Eval: 1024_h1=0.0211, 1024_l2=0.0124
[75] time=4.04, avg_loss=0.0173, train_err=0.2738
Eval: 1024_h1=0.0194, 1024_l2=0.0116
[76] time=4.04, avg_loss=0.0170, train_err=0.2698
Eval: 1024_h1=0.0160, 1024_l2=0.0096
[77] time=4.04, avg_loss=0.0115, train_err=0.1820
Eval: 1024_h1=0.0113, 1024_l2=0.0089
[78] time=4.03, avg_loss=0.0128, train_err=0.2034
Eval: 1024_h1=0.0174, 1024_l2=0.0118
[79] time=4.03, avg_loss=0.0144, train_err=0.2284
Eval: 1024_h1=0.0148, 1024_l2=0.0130
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=4.03, avg_loss=0.0119, train_err=0.1892
Eval: 1024_h1=0.0083, 1024_l2=0.0069
[81] time=4.04, avg_loss=0.0353, train_err=0.5606
Eval: 1024_h1=0.0637, 1024_l2=0.0533
[82] time=4.03, avg_loss=0.0228, train_err=0.3622
Eval: 1024_h1=0.0259, 1024_l2=0.0209
[83] time=4.03, avg_loss=0.0122, train_err=0.1939
Eval: 1024_h1=0.0107, 1024_l2=0.0073
[84] time=4.03, avg_loss=0.0100, train_err=0.1586
Eval: 1024_h1=0.0126, 1024_l2=0.0088
[85] time=4.04, avg_loss=0.0100, train_err=0.1590
Eval: 1024_h1=0.0134, 1024_l2=0.0083
[86] time=4.03, avg_loss=0.0135, train_err=0.2135
Eval: 1024_h1=0.0328, 1024_l2=0.0195
[87] time=4.04, avg_loss=0.0178, train_err=0.2824
Eval: 1024_h1=0.0168, 1024_l2=0.0102
[88] time=4.03, avg_loss=0.0175, train_err=0.2776
Eval: 1024_h1=0.0113, 1024_l2=0.0070
[89] time=4.03, avg_loss=0.0131, train_err=0.2079
Eval: 1024_h1=0.0131, 1024_l2=0.0087
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=4.03, avg_loss=0.0120, train_err=0.1906
Eval: 1024_h1=0.0228, 1024_l2=0.0135
[91] time=4.04, avg_loss=0.0155, train_err=0.2467
Eval: 1024_h1=0.0116, 1024_l2=0.0070
[92] time=4.03, avg_loss=0.0123, train_err=0.1950
Eval: 1024_h1=0.0115, 1024_l2=0.0083
[93] time=4.03, avg_loss=0.0122, train_err=0.1943
Eval: 1024_h1=0.0101, 1024_l2=0.0080
[94] time=4.05, avg_loss=0.0103, train_err=0.1628
Eval: 1024_h1=0.0142, 1024_l2=0.0096
[95] time=4.03, avg_loss=0.0122, train_err=0.1937
Eval: 1024_h1=0.0123, 1024_l2=0.0104
[96] time=4.03, avg_loss=0.0105, train_err=0.1662
Eval: 1024_h1=0.0107, 1024_l2=0.0076
[97] time=4.02, avg_loss=0.0143, train_err=0.2270
Eval: 1024_h1=0.0236, 1024_l2=0.0176
[98] time=4.03, avg_loss=0.0158, train_err=0.2503
Eval: 1024_h1=0.0122, 1024_l2=0.0094
[99] time=4.03, avg_loss=0.0145, train_err=0.2305
Eval: 1024_h1=0.0104, 1024_l2=0.0070
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=4.03, avg_loss=0.0074, train_err=0.1171
Eval: 1024_h1=0.0097, 1024_l2=0.0061
[Rank 0]: saved training state to save/1d_burgers/pure/w-l-f
[101] time=4.03, avg_loss=0.0073, train_err=0.1158
Eval: 1024_h1=0.0102, 1024_l2=0.0082
[102] time=4.02, avg_loss=0.0067, train_err=0.1060
Eval: 1024_h1=0.0091, 1024_l2=0.0048
[103] time=4.04, avg_loss=0.0059, train_err=0.0932
Eval: 1024_h1=0.0057, 1024_l2=0.0035
[104] time=4.03, avg_loss=0.0073, train_err=0.1166
Eval: 1024_h1=0.0059, 1024_l2=0.0042
[105] time=4.03, avg_loss=0.0070, train_err=0.1113
Eval: 1024_h1=0.0100, 1024_l2=0.0063
[106] time=4.04, avg_loss=0.0070, train_err=0.1106
Eval: 1024_h1=0.0084, 1024_l2=0.0056
[107] time=4.04, avg_loss=0.0064, train_err=0.1016
Eval: 1024_h1=0.0075, 1024_l2=0.0055
[108] time=4.04, avg_loss=0.0066, train_err=0.1049
Eval: 1024_h1=0.0102, 1024_l2=0.0061
[109] time=4.03, avg_loss=0.0092, train_err=0.1455
Eval: 1024_h1=0.0156, 1024_l2=0.0123
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=4.03, avg_loss=0.0091, train_err=0.1444
Eval: 1024_h1=0.0140, 1024_l2=0.0089
[111] time=4.03, avg_loss=0.0080, train_err=0.1267
Eval: 1024_h1=0.0059, 1024_l2=0.0036
[112] time=4.04, avg_loss=0.0062, train_err=0.0978
Eval: 1024_h1=0.0080, 1024_l2=0.0056
[113] time=4.04, avg_loss=0.0073, train_err=0.1159
Eval: 1024_h1=0.0076, 1024_l2=0.0053
[114] time=4.04, avg_loss=0.0067, train_err=0.1062
Eval: 1024_h1=0.0057, 1024_l2=0.0044
[115] time=4.03, avg_loss=0.0064, train_err=0.1018
Eval: 1024_h1=0.0061, 1024_l2=0.0041
[116] time=4.04, avg_loss=0.0063, train_err=0.0998
Eval: 1024_h1=0.0085, 1024_l2=0.0050
[117] time=4.04, avg_loss=0.0081, train_err=0.1281
Eval: 1024_h1=0.0070, 1024_l2=0.0049
[118] time=4.05, avg_loss=0.0069, train_err=0.1095
Eval: 1024_h1=0.0063, 1024_l2=0.0039
[119] time=4.03, avg_loss=0.0073, train_err=0.1155
Eval: 1024_h1=0.0077, 1024_l2=0.0058
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=4.03, avg_loss=0.0074, train_err=0.1170
Eval: 1024_h1=0.0151, 1024_l2=0.0120
[121] time=4.03, avg_loss=0.0091, train_err=0.1445
Eval: 1024_h1=0.0062, 1024_l2=0.0038
[122] time=4.02, avg_loss=0.0058, train_err=0.0916
Eval: 1024_h1=0.0091, 1024_l2=0.0065
[123] time=4.04, avg_loss=0.0073, train_err=0.1166
Eval: 1024_h1=0.0118, 1024_l2=0.0092
[124] time=4.03, avg_loss=0.0069, train_err=0.1094
Eval: 1024_h1=0.0079, 1024_l2=0.0058
[125] time=4.03, avg_loss=0.0068, train_err=0.1074
Eval: 1024_h1=0.0114, 1024_l2=0.0078
[126] time=4.04, avg_loss=0.0084, train_err=0.1338
Eval: 1024_h1=0.0101, 1024_l2=0.0073
[127] time=4.04, avg_loss=0.0072, train_err=0.1142
Eval: 1024_h1=0.0072, 1024_l2=0.0047
[128] time=4.03, avg_loss=0.0058, train_err=0.0918
Eval: 1024_h1=0.0055, 1024_l2=0.0030
[129] time=4.03, avg_loss=0.0079, train_err=0.1249
Eval: 1024_h1=0.0087, 1024_l2=0.0070
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=4.03, avg_loss=0.0074, train_err=0.1167
Eval: 1024_h1=0.0076, 1024_l2=0.0043
[131] time=4.04, avg_loss=0.0071, train_err=0.1127
Eval: 1024_h1=0.0137, 1024_l2=0.0082
[132] time=4.03, avg_loss=0.0087, train_err=0.1385
Eval: 1024_h1=0.0196, 1024_l2=0.0158
[133] time=4.04, avg_loss=0.0105, train_err=0.1667
Eval: 1024_h1=0.0108, 1024_l2=0.0085
[134] time=4.03, avg_loss=0.0066, train_err=0.1053
Eval: 1024_h1=0.0079, 1024_l2=0.0045
[135] time=4.03, avg_loss=0.0059, train_err=0.0944
Eval: 1024_h1=0.0153, 1024_l2=0.0129
[136] time=4.03, avg_loss=0.0073, train_err=0.1158
Eval: 1024_h1=0.0063, 1024_l2=0.0035
[137] time=4.03, avg_loss=0.0074, train_err=0.1168
Eval: 1024_h1=0.0051, 1024_l2=0.0031
[138] time=4.03, avg_loss=0.0068, train_err=0.1082
Eval: 1024_h1=0.0106, 1024_l2=0.0071
[139] time=4.03, avg_loss=0.0069, train_err=0.1097
Eval: 1024_h1=0.0095, 1024_l2=0.0071
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=4.03, avg_loss=0.0061, train_err=0.0966
Eval: 1024_h1=0.0068, 1024_l2=0.0045
[141] time=4.03, avg_loss=0.0065, train_err=0.1027
Eval: 1024_h1=0.0070, 1024_l2=0.0042
[142] time=4.04, avg_loss=0.0065, train_err=0.1028
Eval: 1024_h1=0.0081, 1024_l2=0.0061
[143] time=4.03, avg_loss=0.0076, train_err=0.1204
Eval: 1024_h1=0.0083, 1024_l2=0.0050
[144] time=4.03, avg_loss=0.0072, train_err=0.1150
Eval: 1024_h1=0.0130, 1024_l2=0.0102
[145] time=4.04, avg_loss=0.0078, train_err=0.1232
Eval: 1024_h1=0.0164, 1024_l2=0.0145
[146] time=4.03, avg_loss=0.0081, train_err=0.1287
Eval: 1024_h1=0.0049, 1024_l2=0.0033
[147] time=4.04, avg_loss=0.0073, train_err=0.1153
Eval: 1024_h1=0.0063, 1024_l2=0.0043
[148] time=4.03, avg_loss=0.0059, train_err=0.0929
Eval: 1024_h1=0.0095, 1024_l2=0.0061
[149] time=4.02, avg_loss=0.0060, train_err=0.0945
Eval: 1024_h1=0.0059, 1024_l2=0.0035
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=4.02, avg_loss=0.0052, train_err=0.0822
Eval: 1024_h1=0.0082, 1024_l2=0.0044
[Rank 0]: saved training state to save/1d_burgers/pure/w-l-f
[151] time=4.04, avg_loss=0.0062, train_err=0.0991
Eval: 1024_h1=0.0062, 1024_l2=0.0040
[152] time=4.04, avg_loss=0.0062, train_err=0.0983
Eval: 1024_h1=0.0083, 1024_l2=0.0062
[153] time=4.04, avg_loss=0.0077, train_err=0.1230
Eval: 1024_h1=0.0049, 1024_l2=0.0027
[154] time=4.03, avg_loss=0.0059, train_err=0.0935
Eval: 1024_h1=0.0062, 1024_l2=0.0036
[155] time=4.03, avg_loss=0.0074, train_err=0.1180
Eval: 1024_h1=0.0131, 1024_l2=0.0112
[156] time=4.04, avg_loss=0.0077, train_err=0.1222
Eval: 1024_h1=0.0081, 1024_l2=0.0064
[157] time=4.04, avg_loss=0.0081, train_err=0.1281
Eval: 1024_h1=0.0129, 1024_l2=0.0106
[158] time=4.03, avg_loss=0.0080, train_err=0.1277
Eval: 1024_h1=0.0082, 1024_l2=0.0063
[159] time=4.03, avg_loss=0.0071, train_err=0.1130
Eval: 1024_h1=0.0058, 1024_l2=0.0033
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=4.05, avg_loss=0.0066, train_err=0.1053
Eval: 1024_h1=0.0080, 1024_l2=0.0048
[161] time=4.04, avg_loss=0.0073, train_err=0.1159
Eval: 1024_h1=0.0076, 1024_l2=0.0036
[162] time=4.03, avg_loss=0.0075, train_err=0.1184
Eval: 1024_h1=0.0060, 1024_l2=0.0050
[163] time=4.02, avg_loss=0.0056, train_err=0.0887
Eval: 1024_h1=0.0080, 1024_l2=0.0065
[164] time=4.04, avg_loss=0.0055, train_err=0.0871
Eval: 1024_h1=0.0062, 1024_l2=0.0042
[165] time=4.05, avg_loss=0.0060, train_err=0.0945
Eval: 1024_h1=0.0085, 1024_l2=0.0063
[166] time=4.04, avg_loss=0.0080, train_err=0.1277
Eval: 1024_h1=0.0078, 1024_l2=0.0058
[167] time=4.03, avg_loss=0.0066, train_err=0.1045
Eval: 1024_h1=0.0055, 1024_l2=0.0033
[168] time=4.04, avg_loss=0.0055, train_err=0.0870
Eval: 1024_h1=0.0073, 1024_l2=0.0055
[169] time=4.03, avg_loss=0.0076, train_err=0.1213
Eval: 1024_h1=0.0071, 1024_l2=0.0043
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=4.05, avg_loss=0.0058, train_err=0.0924
Eval: 1024_h1=0.0057, 1024_l2=0.0042
[171] time=4.03, avg_loss=0.0058, train_err=0.0926
Eval: 1024_h1=0.0053, 1024_l2=0.0035
[172] time=4.03, avg_loss=0.0065, train_err=0.1025
Eval: 1024_h1=0.0064, 1024_l2=0.0042
[173] time=4.04, avg_loss=0.0078, train_err=0.1237
Eval: 1024_h1=0.0091, 1024_l2=0.0074
[174] time=4.03, avg_loss=0.0079, train_err=0.1254
Eval: 1024_h1=0.0093, 1024_l2=0.0058
[175] time=4.04, avg_loss=0.0080, train_err=0.1263
Eval: 1024_h1=0.0066, 1024_l2=0.0045
[176] time=4.03, avg_loss=0.0066, train_err=0.1055
Eval: 1024_h1=0.0067, 1024_l2=0.0039
[177] time=4.04, avg_loss=0.0075, train_err=0.1184
Eval: 1024_h1=0.0080, 1024_l2=0.0043
[178] time=4.04, avg_loss=0.0078, train_err=0.1239
Eval: 1024_h1=0.0077, 1024_l2=0.0050
[179] time=4.03, avg_loss=0.0088, train_err=0.1394
Eval: 1024_h1=0.0128, 1024_l2=0.0090
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=4.03, avg_loss=0.0062, train_err=0.0985
Eval: 1024_h1=0.0068, 1024_l2=0.0047
[181] time=4.04, avg_loss=0.0071, train_err=0.1127
Eval: 1024_h1=0.0064, 1024_l2=0.0046
[182] time=4.03, avg_loss=0.0056, train_err=0.0882
Eval: 1024_h1=0.0110, 1024_l2=0.0087
[183] time=4.03, avg_loss=0.0072, train_err=0.1138
Eval: 1024_h1=0.0152, 1024_l2=0.0127
[184] time=4.03, avg_loss=0.0069, train_err=0.1099
Eval: 1024_h1=0.0063, 1024_l2=0.0037
[185] time=4.04, avg_loss=0.0057, train_err=0.0902
Eval: 1024_h1=0.0065, 1024_l2=0.0058
[186] time=4.04, avg_loss=0.0066, train_err=0.1047
Eval: 1024_h1=0.0051, 1024_l2=0.0029
[187] time=4.04, avg_loss=0.0070, train_err=0.1111
Eval: 1024_h1=0.0121, 1024_l2=0.0108
[188] time=4.03, avg_loss=0.0069, train_err=0.1099
Eval: 1024_h1=0.0084, 1024_l2=0.0050
[189] time=4.03, avg_loss=0.0065, train_err=0.1030
Eval: 1024_h1=0.0067, 1024_l2=0.0043
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=4.04, avg_loss=0.0058, train_err=0.0913
Eval: 1024_h1=0.0062, 1024_l2=0.0036
[191] time=4.03, avg_loss=0.0063, train_err=0.1002
Eval: 1024_h1=0.0117, 1024_l2=0.0091
[192] time=4.04, avg_loss=0.0073, train_err=0.1162
Eval: 1024_h1=0.0100, 1024_l2=0.0076
[193] time=4.04, avg_loss=0.0059, train_err=0.0940
Eval: 1024_h1=0.0051, 1024_l2=0.0027
[194] time=4.03, avg_loss=0.0057, train_err=0.0897
Eval: 1024_h1=0.0057, 1024_l2=0.0036
[195] time=4.03, avg_loss=0.0049, train_err=0.0784
Eval: 1024_h1=0.0079, 1024_l2=0.0058
[196] time=4.04, avg_loss=0.0066, train_err=0.1051
Eval: 1024_h1=0.0087, 1024_l2=0.0052
[197] time=4.03, avg_loss=0.0064, train_err=0.1019
Eval: 1024_h1=0.0087, 1024_l2=0.0057
[198] time=4.04, avg_loss=0.0060, train_err=0.0952
Eval: 1024_h1=0.0072, 1024_l2=0.0058
[199] time=4.04, avg_loss=0.0055, train_err=0.0874
Eval: 1024_h1=0.0081, 1024_l2=0.0053
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=4.03, avg_loss=0.0039, train_err=0.0623
Eval: 1024_h1=0.0053, 1024_l2=0.0036
[Rank 0]: saved training state to save/1d_burgers/pure/w-l-f
[201] time=4.03, avg_loss=0.0034, train_err=0.0537
Eval: 1024_h1=0.0042, 1024_l2=0.0023
[202] time=4.03, avg_loss=0.0036, train_err=0.0576
Eval: 1024_h1=0.0050, 1024_l2=0.0037
[203] time=4.04, avg_loss=0.0042, train_err=0.0660
Eval: 1024_h1=0.0037, 1024_l2=0.0024
[204] time=4.03, avg_loss=0.0035, train_err=0.0549
Eval: 1024_h1=0.0064, 1024_l2=0.0047
[205] time=4.04, avg_loss=0.0042, train_err=0.0673
Eval: 1024_h1=0.0044, 1024_l2=0.0030
[206] time=4.03, avg_loss=0.0034, train_err=0.0534
Eval: 1024_h1=0.0040, 1024_l2=0.0024
[207] time=4.04, avg_loss=0.0037, train_err=0.0583
Eval: 1024_h1=0.0041, 1024_l2=0.0031
[208] time=4.03, avg_loss=0.0032, train_err=0.0500
Eval: 1024_h1=0.0033, 1024_l2=0.0020
[209] time=4.04, avg_loss=0.0037, train_err=0.0595
Eval: 1024_h1=0.0047, 1024_l2=0.0035
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=4.04, avg_loss=0.0034, train_err=0.0533
Eval: 1024_h1=0.0048, 1024_l2=0.0027
[211] time=4.03, avg_loss=0.0041, train_err=0.0654
Eval: 1024_h1=0.0047, 1024_l2=0.0032
[212] time=4.03, avg_loss=0.0034, train_err=0.0541
Eval: 1024_h1=0.0037, 1024_l2=0.0027
[213] time=4.04, avg_loss=0.0037, train_err=0.0590
Eval: 1024_h1=0.0062, 1024_l2=0.0037
[214] time=4.03, avg_loss=0.0037, train_err=0.0590
Eval: 1024_h1=0.0039, 1024_l2=0.0027
[215] time=4.04, avg_loss=0.0042, train_err=0.0664
Eval: 1024_h1=0.0044, 1024_l2=0.0029
[216] time=4.03, avg_loss=0.0042, train_err=0.0664
Eval: 1024_h1=0.0042, 1024_l2=0.0030
[217] time=4.04, avg_loss=0.0041, train_err=0.0659
Eval: 1024_h1=0.0042, 1024_l2=0.0021
[218] time=4.04, avg_loss=0.0045, train_err=0.0710
Eval: 1024_h1=0.0050, 1024_l2=0.0030
[219] time=4.03, avg_loss=0.0043, train_err=0.0682
Eval: 1024_h1=0.0074, 1024_l2=0.0060
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=4.03, avg_loss=0.0037, train_err=0.0589
Eval: 1024_h1=0.0036, 1024_l2=0.0021
[221] time=4.04, avg_loss=0.0034, train_err=0.0545
Eval: 1024_h1=0.0042, 1024_l2=0.0029
[222] time=4.03, avg_loss=0.0033, train_err=0.0521
Eval: 1024_h1=0.0044, 1024_l2=0.0025
[223] time=4.04, avg_loss=0.0035, train_err=0.0556
Eval: 1024_h1=0.0043, 1024_l2=0.0028
[224] time=4.03, avg_loss=0.0035, train_err=0.0548
Eval: 1024_h1=0.0044, 1024_l2=0.0023
[225] time=4.03, avg_loss=0.0035, train_err=0.0555
Eval: 1024_h1=0.0053, 1024_l2=0.0030
[226] time=4.04, avg_loss=0.0042, train_err=0.0674
Eval: 1024_h1=0.0049, 1024_l2=0.0039
[227] time=4.03, avg_loss=0.0038, train_err=0.0611
Eval: 1024_h1=0.0041, 1024_l2=0.0026
[228] time=4.04, avg_loss=0.0037, train_err=0.0589
Eval: 1024_h1=0.0046, 1024_l2=0.0027
[229] time=4.03, avg_loss=0.0033, train_err=0.0526
Eval: 1024_h1=0.0039, 1024_l2=0.0025
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=4.03, avg_loss=0.0034, train_err=0.0537
Eval: 1024_h1=0.0035, 1024_l2=0.0018
[231] time=4.03, avg_loss=0.0033, train_err=0.0527
Eval: 1024_h1=0.0034, 1024_l2=0.0023
[232] time=4.03, avg_loss=0.0041, train_err=0.0649
Eval: 1024_h1=0.0040, 1024_l2=0.0029
[233] time=4.03, avg_loss=0.0044, train_err=0.0694
Eval: 1024_h1=0.0037, 1024_l2=0.0027
[234] time=4.03, avg_loss=0.0030, train_err=0.0471
Eval: 1024_h1=0.0044, 1024_l2=0.0024
[235] time=4.04, avg_loss=0.0042, train_err=0.0664
Eval: 1024_h1=0.0049, 1024_l2=0.0033
[236] time=4.03, avg_loss=0.0039, train_err=0.0614
Eval: 1024_h1=0.0033, 1024_l2=0.0018
[237] time=4.04, avg_loss=0.0036, train_err=0.0576
Eval: 1024_h1=0.0077, 1024_l2=0.0065
[238] time=4.04, avg_loss=0.0036, train_err=0.0567
Eval: 1024_h1=0.0036, 1024_l2=0.0020
[239] time=4.03, avg_loss=0.0040, train_err=0.0632
Eval: 1024_h1=0.0035, 1024_l2=0.0021
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=4.03, avg_loss=0.0035, train_err=0.0549
Eval: 1024_h1=0.0061, 1024_l2=0.0042
[241] time=4.04, avg_loss=0.0042, train_err=0.0668
Eval: 1024_h1=0.0044, 1024_l2=0.0030
[242] time=4.03, avg_loss=0.0035, train_err=0.0551
Eval: 1024_h1=0.0047, 1024_l2=0.0028
[243] time=4.03, avg_loss=0.0048, train_err=0.0769
Eval: 1024_h1=0.0046, 1024_l2=0.0034
[244] time=4.03, avg_loss=0.0042, train_err=0.0667
Eval: 1024_h1=0.0049, 1024_l2=0.0029
[245] time=4.04, avg_loss=0.0039, train_err=0.0625
Eval: 1024_h1=0.0042, 1024_l2=0.0028
[246] time=4.04, avg_loss=0.0031, train_err=0.0495
Eval: 1024_h1=0.0044, 1024_l2=0.0026
[247] time=4.03, avg_loss=0.0034, train_err=0.0538
Eval: 1024_h1=0.0038, 1024_l2=0.0021
[248] time=4.03, avg_loss=0.0040, train_err=0.0627
Eval: 1024_h1=0.0039, 1024_l2=0.0023
[249] time=4.03, avg_loss=0.0043, train_err=0.0686
Eval: 1024_h1=0.0039, 1024_l2=0.0026
{'train_err': 0.0685812249957096, 'avg_loss': 0.004320617174729705, 'avg_lasso_loss': None, 'epoch_train_time': 4.027684197761118, '1024_h1': tensor(0.0039, device='cuda:0'), '1024_l2': tensor(0.0026, device='cuda:0')}
