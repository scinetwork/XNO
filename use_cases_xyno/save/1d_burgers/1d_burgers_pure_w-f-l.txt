
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Wavelet Neural Operator (WNO) Kernel ]
>>> Overview:
The WNO uses wavelet transformations to extract multi-resolution features from input signals.
Wavelet decomposition offers a unique advantage in capturing localized features in both spatial
and frequency domains.

>>> Key Features:
- Multi-resolution analysis via wavelet decomposition.
- Supports both compressive sensing and hierarchical learning.

>>> Reference:
Tripura, T. et al. 'Wavelet neural operator: a neural operator for parametric partial differential equations'.
Link: https://arxiv.org/pdf/2205.02191
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Fourier Neural Operator (FNO) Kernel ]
>>> Overview:
The FNO leverages Fourier Transform to map input data into the spectral domain, where
convolutional operations are performed by truncating high-frequency modes.

>>> Key Features:
- Effective for parameterized Partial Differential Equations (PDEs).
- Reduces computational complexity by retaining only significant modes.

>>> Reference:
Li, Z. et al. 'Fourier Neural Operator for Parametric Partial Differential Equations' (ICLR 2021).
Link: https://arxiv.org/pdf/2010.08895
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 2475585

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7fe705aa9df0>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7fe704683cb0>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7fe704683cb0>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7fe6dfdff8f0>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=3.02, avg_loss=0.5365, train_err=8.5166
Eval: 1024_h1=0.1534, 1024_l2=0.0934
[Rank 0]: saved training state to save/1d_burgers/pure/w-f-l
[1] time=2.50, avg_loss=0.1024, train_err=1.6250
Eval: 1024_h1=0.0847, 1024_l2=0.0561
[2] time=2.49, avg_loss=0.0582, train_err=0.9242
Eval: 1024_h1=0.0577, 1024_l2=0.0391
[3] time=2.49, avg_loss=0.0442, train_err=0.7014
Eval: 1024_h1=0.0539, 1024_l2=0.0332
[4] time=2.49, avg_loss=0.0382, train_err=0.6070
Eval: 1024_h1=0.0358, 1024_l2=0.0236
[5] time=2.50, avg_loss=0.0348, train_err=0.5517
Eval: 1024_h1=0.0286, 1024_l2=0.0181
[6] time=2.49, avg_loss=0.0333, train_err=0.5283
Eval: 1024_h1=0.0449, 1024_l2=0.0412
[7] time=2.49, avg_loss=0.0308, train_err=0.4886
Eval: 1024_h1=0.0492, 1024_l2=0.0337
[8] time=2.50, avg_loss=0.0340, train_err=0.5398
Eval: 1024_h1=0.0527, 1024_l2=0.0540
[9] time=2.49, avg_loss=0.0405, train_err=0.6424
Eval: 1024_h1=0.0291, 1024_l2=0.0199
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=4.06, avg_loss=0.0238, train_err=0.3782
Eval: 1024_h1=0.0309, 1024_l2=0.0149
[11] time=4.05, avg_loss=0.0251, train_err=0.3989
Eval: 1024_h1=0.0199, 1024_l2=0.0140
[12] time=4.04, avg_loss=0.0227, train_err=0.3602
Eval: 1024_h1=0.0317, 1024_l2=0.0257
[13] time=4.03, avg_loss=0.0173, train_err=0.2752
Eval: 1024_h1=0.0192, 1024_l2=0.0110
[14] time=4.03, avg_loss=0.0191, train_err=0.3037
Eval: 1024_h1=0.0261, 1024_l2=0.0196
[15] time=4.04, avg_loss=0.0183, train_err=0.2900
Eval: 1024_h1=0.0226, 1024_l2=0.0138
[16] time=4.05, avg_loss=0.0232, train_err=0.3682
Eval: 1024_h1=0.0293, 1024_l2=0.0172
[17] time=4.04, avg_loss=0.0236, train_err=0.3749
Eval: 1024_h1=0.0226, 1024_l2=0.0140
[18] time=4.04, avg_loss=0.0181, train_err=0.2881
Eval: 1024_h1=0.0124, 1024_l2=0.0074
[19] time=4.04, avg_loss=0.0212, train_err=0.3359
Eval: 1024_h1=0.0230, 1024_l2=0.0192
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=4.04, avg_loss=0.0210, train_err=0.3328
Eval: 1024_h1=0.0441, 1024_l2=0.0355
[21] time=4.04, avg_loss=0.0319, train_err=0.5067
Eval: 1024_h1=0.0376, 1024_l2=0.0349
[22] time=4.03, avg_loss=0.0227, train_err=0.3603
Eval: 1024_h1=0.0191, 1024_l2=0.0103
[23] time=4.04, avg_loss=0.0181, train_err=0.2876
Eval: 1024_h1=0.0201, 1024_l2=0.0178
[24] time=4.03, avg_loss=0.0135, train_err=0.2140
Eval: 1024_h1=0.0166, 1024_l2=0.0103
[25] time=4.03, avg_loss=0.0159, train_err=0.2517
Eval: 1024_h1=0.0160, 1024_l2=0.0114
[26] time=4.04, avg_loss=0.0167, train_err=0.2643
Eval: 1024_h1=0.0158, 1024_l2=0.0090
[27] time=4.03, avg_loss=0.0165, train_err=0.2621
Eval: 1024_h1=0.0153, 1024_l2=0.0111
[28] time=4.04, avg_loss=0.0153, train_err=0.2426
Eval: 1024_h1=0.0130, 1024_l2=0.0099
[29] time=4.04, avg_loss=0.0149, train_err=0.2365
Eval: 1024_h1=0.0144, 1024_l2=0.0091
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=4.03, avg_loss=0.0194, train_err=0.3073
Eval: 1024_h1=0.0357, 1024_l2=0.0311
[31] time=4.04, avg_loss=0.0191, train_err=0.3031
Eval: 1024_h1=0.0159, 1024_l2=0.0080
[32] time=4.04, avg_loss=0.0180, train_err=0.2853
Eval: 1024_h1=0.0273, 1024_l2=0.0237
[33] time=4.03, avg_loss=0.0196, train_err=0.3116
Eval: 1024_h1=0.0201, 1024_l2=0.0181
[34] time=4.06, avg_loss=0.0130, train_err=0.2068
Eval: 1024_h1=0.0148, 1024_l2=0.0078
[35] time=4.07, avg_loss=0.0150, train_err=0.2377
Eval: 1024_h1=0.0126, 1024_l2=0.0082
[36] time=4.03, avg_loss=0.0128, train_err=0.2028
Eval: 1024_h1=0.0123, 1024_l2=0.0069
[37] time=4.05, avg_loss=0.0148, train_err=0.2349
Eval: 1024_h1=0.0168, 1024_l2=0.0136
[38] time=4.03, avg_loss=0.0174, train_err=0.2754
Eval: 1024_h1=0.0167, 1024_l2=0.0084
[39] time=4.05, avg_loss=0.0149, train_err=0.2370
Eval: 1024_h1=0.0148, 1024_l2=0.0154
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=4.05, avg_loss=0.0174, train_err=0.2761
Eval: 1024_h1=0.0152, 1024_l2=0.0132
[41] time=4.06, avg_loss=0.0189, train_err=0.3002
Eval: 1024_h1=0.0131, 1024_l2=0.0078
[42] time=4.04, avg_loss=0.0138, train_err=0.2184
Eval: 1024_h1=0.0129, 1024_l2=0.0101
[43] time=4.06, avg_loss=0.0121, train_err=0.1919
Eval: 1024_h1=0.0169, 1024_l2=0.0131
[44] time=4.04, avg_loss=0.0140, train_err=0.2218
Eval: 1024_h1=0.0214, 1024_l2=0.0146
[45] time=4.04, avg_loss=0.0150, train_err=0.2376
Eval: 1024_h1=0.0229, 1024_l2=0.0180
[46] time=4.04, avg_loss=0.0162, train_err=0.2579
Eval: 1024_h1=0.0162, 1024_l2=0.0154
[47] time=4.05, avg_loss=0.0171, train_err=0.2709
Eval: 1024_h1=0.0225, 1024_l2=0.0138
[48] time=4.04, avg_loss=0.0128, train_err=0.2037
Eval: 1024_h1=0.0195, 1024_l2=0.0154
[49] time=4.04, avg_loss=0.0142, train_err=0.2255
Eval: 1024_h1=0.0207, 1024_l2=0.0142
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=4.04, avg_loss=0.0213, train_err=0.3376
Eval: 1024_h1=0.0233, 1024_l2=0.0148
[Rank 0]: saved training state to save/1d_burgers/pure/w-f-l
[51] time=4.05, avg_loss=0.0160, train_err=0.2542
Eval: 1024_h1=0.0159, 1024_l2=0.0107
[52] time=4.06, avg_loss=0.0142, train_err=0.2252
Eval: 1024_h1=0.0146, 1024_l2=0.0124
[53] time=4.04, avg_loss=0.0123, train_err=0.1945
Eval: 1024_h1=0.0164, 1024_l2=0.0103
[54] time=4.03, avg_loss=0.0159, train_err=0.2529
Eval: 1024_h1=0.0138, 1024_l2=0.0117
[55] time=4.03, avg_loss=0.0137, train_err=0.2167
Eval: 1024_h1=0.0329, 1024_l2=0.0287
[56] time=4.03, avg_loss=0.0209, train_err=0.3320
Eval: 1024_h1=0.0158, 1024_l2=0.0102
[57] time=4.04, avg_loss=0.0126, train_err=0.2000
Eval: 1024_h1=0.0209, 1024_l2=0.0147
[58] time=4.04, avg_loss=0.0142, train_err=0.2259
Eval: 1024_h1=0.0142, 1024_l2=0.0091
[59] time=4.04, avg_loss=0.0147, train_err=0.2336
Eval: 1024_h1=0.0160, 1024_l2=0.0142
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=4.03, avg_loss=0.0131, train_err=0.2085
Eval: 1024_h1=0.0177, 1024_l2=0.0138
[61] time=4.03, avg_loss=0.0136, train_err=0.2164
Eval: 1024_h1=0.0184, 1024_l2=0.0130
[62] time=4.03, avg_loss=0.0113, train_err=0.1798
Eval: 1024_h1=0.0116, 1024_l2=0.0099
[63] time=4.04, avg_loss=0.0134, train_err=0.2132
Eval: 1024_h1=0.0254, 1024_l2=0.0214
[64] time=4.03, avg_loss=0.0179, train_err=0.2837
Eval: 1024_h1=0.0134, 1024_l2=0.0113
[65] time=4.04, avg_loss=0.0137, train_err=0.2171
Eval: 1024_h1=0.0118, 1024_l2=0.0089
[66] time=4.03, avg_loss=0.0153, train_err=0.2431
Eval: 1024_h1=0.0174, 1024_l2=0.0143
[67] time=4.03, avg_loss=0.0167, train_err=0.2646
Eval: 1024_h1=0.0144, 1024_l2=0.0114
[68] time=4.03, avg_loss=0.0151, train_err=0.2392
Eval: 1024_h1=0.0129, 1024_l2=0.0095
[69] time=4.04, avg_loss=0.0125, train_err=0.1983
Eval: 1024_h1=0.0192, 1024_l2=0.0154
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=4.04, avg_loss=0.0135, train_err=0.2147
Eval: 1024_h1=0.0157, 1024_l2=0.0089
[71] time=4.04, avg_loss=0.0129, train_err=0.2043
Eval: 1024_h1=0.0117, 1024_l2=0.0099
[72] time=4.03, avg_loss=0.0131, train_err=0.2080
Eval: 1024_h1=0.0100, 1024_l2=0.0060
[73] time=4.03, avg_loss=0.0125, train_err=0.1984
Eval: 1024_h1=0.0114, 1024_l2=0.0076
[74] time=4.04, avg_loss=0.0130, train_err=0.2064
Eval: 1024_h1=0.0139, 1024_l2=0.0095
[75] time=4.03, avg_loss=0.0139, train_err=0.2210
Eval: 1024_h1=0.0155, 1024_l2=0.0113
[76] time=4.03, avg_loss=0.0120, train_err=0.1912
Eval: 1024_h1=0.0144, 1024_l2=0.0143
[77] time=4.04, avg_loss=0.0127, train_err=0.2011
Eval: 1024_h1=0.0088, 1024_l2=0.0077
[78] time=4.03, avg_loss=0.0125, train_err=0.1990
Eval: 1024_h1=0.0241, 1024_l2=0.0169
[79] time=4.04, avg_loss=0.0170, train_err=0.2704
Eval: 1024_h1=0.0262, 1024_l2=0.0222
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=4.04, avg_loss=0.0147, train_err=0.2336
Eval: 1024_h1=0.0085, 1024_l2=0.0058
[81] time=4.03, avg_loss=0.0115, train_err=0.1833
Eval: 1024_h1=0.0178, 1024_l2=0.0125
[82] time=4.04, avg_loss=0.0144, train_err=0.2281
Eval: 1024_h1=0.0116, 1024_l2=0.0069
[83] time=4.03, avg_loss=0.0151, train_err=0.2398
Eval: 1024_h1=0.0126, 1024_l2=0.0096
[84] time=4.04, avg_loss=0.0099, train_err=0.1569
Eval: 1024_h1=0.0099, 1024_l2=0.0078
[85] time=4.04, avg_loss=0.0141, train_err=0.2237
Eval: 1024_h1=0.0218, 1024_l2=0.0185
[86] time=4.03, avg_loss=0.0144, train_err=0.2282
Eval: 1024_h1=0.0094, 1024_l2=0.0064
[87] time=4.04, avg_loss=0.0122, train_err=0.1932
Eval: 1024_h1=0.0395, 1024_l2=0.0325
[88] time=4.04, avg_loss=0.0237, train_err=0.3763
Eval: 1024_h1=0.0190, 1024_l2=0.0119
[89] time=4.03, avg_loss=0.0165, train_err=0.2625
Eval: 1024_h1=0.0368, 1024_l2=0.0327
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=4.03, avg_loss=0.0245, train_err=0.3891
Eval: 1024_h1=0.0136, 1024_l2=0.0105
[91] time=4.03, avg_loss=0.0108, train_err=0.1707
Eval: 1024_h1=0.0151, 1024_l2=0.0096
[92] time=4.04, avg_loss=0.0134, train_err=0.2119
Eval: 1024_h1=0.0197, 1024_l2=0.0129
[93] time=4.03, avg_loss=0.0157, train_err=0.2495
Eval: 1024_h1=0.0162, 1024_l2=0.0123
[94] time=4.04, avg_loss=0.0138, train_err=0.2186
Eval: 1024_h1=0.0177, 1024_l2=0.0115
[95] time=4.04, avg_loss=0.0102, train_err=0.1624
Eval: 1024_h1=0.0136, 1024_l2=0.0100
[96] time=4.03, avg_loss=0.0121, train_err=0.1922
Eval: 1024_h1=0.0103, 1024_l2=0.0066
[97] time=4.05, avg_loss=0.0114, train_err=0.1805
Eval: 1024_h1=0.0128, 1024_l2=0.0074
[98] time=4.03, avg_loss=0.0114, train_err=0.1807
Eval: 1024_h1=0.0099, 1024_l2=0.0068
[99] time=4.03, avg_loss=0.0100, train_err=0.1585
Eval: 1024_h1=0.0158, 1024_l2=0.0093
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=4.04, avg_loss=0.0073, train_err=0.1156
Eval: 1024_h1=0.0118, 1024_l2=0.0103
[Rank 0]: saved training state to save/1d_burgers/pure/w-f-l
[101] time=4.06, avg_loss=0.0079, train_err=0.1253
Eval: 1024_h1=0.0065, 1024_l2=0.0049
[102] time=4.04, avg_loss=0.0059, train_err=0.0944
Eval: 1024_h1=0.0067, 1024_l2=0.0036
[103] time=4.03, avg_loss=0.0064, train_err=0.1018
Eval: 1024_h1=0.0117, 1024_l2=0.0101
[104] time=4.04, avg_loss=0.0070, train_err=0.1118
Eval: 1024_h1=0.0057, 1024_l2=0.0040
[105] time=4.03, avg_loss=0.0057, train_err=0.0910
Eval: 1024_h1=0.0078, 1024_l2=0.0059
[106] time=4.04, avg_loss=0.0058, train_err=0.0919
Eval: 1024_h1=0.0072, 1024_l2=0.0046
[107] time=4.04, avg_loss=0.0063, train_err=0.0996
Eval: 1024_h1=0.0068, 1024_l2=0.0046
[108] time=4.03, avg_loss=0.0057, train_err=0.0907
Eval: 1024_h1=0.0165, 1024_l2=0.0132
[109] time=4.03, avg_loss=0.0076, train_err=0.1202
Eval: 1024_h1=0.0056, 1024_l2=0.0037
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=4.04, avg_loss=0.0072, train_err=0.1137
Eval: 1024_h1=0.0060, 1024_l2=0.0044
[111] time=4.04, avg_loss=0.0067, train_err=0.1065
Eval: 1024_h1=0.0098, 1024_l2=0.0066
[112] time=4.02, avg_loss=0.0082, train_err=0.1297
Eval: 1024_h1=0.0096, 1024_l2=0.0075
[113] time=4.04, avg_loss=0.0070, train_err=0.1109
Eval: 1024_h1=0.0051, 1024_l2=0.0041
[114] time=4.03, avg_loss=0.0070, train_err=0.1115
Eval: 1024_h1=0.0064, 1024_l2=0.0037
[115] time=4.03, avg_loss=0.0081, train_err=0.1280
Eval: 1024_h1=0.0078, 1024_l2=0.0065
[116] time=4.04, avg_loss=0.0077, train_err=0.1218
Eval: 1024_h1=0.0106, 1024_l2=0.0074
[117] time=4.03, avg_loss=0.0068, train_err=0.1073
Eval: 1024_h1=0.0078, 1024_l2=0.0056
[118] time=4.03, avg_loss=0.0058, train_err=0.0928
Eval: 1024_h1=0.0066, 1024_l2=0.0053
[119] time=4.04, avg_loss=0.0067, train_err=0.1057
Eval: 1024_h1=0.0067, 1024_l2=0.0051
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=4.03, avg_loss=0.0052, train_err=0.0819
Eval: 1024_h1=0.0054, 1024_l2=0.0035
[121] time=4.04, avg_loss=0.0066, train_err=0.1042
Eval: 1024_h1=0.0062, 1024_l2=0.0044
[122] time=4.03, avg_loss=0.0065, train_err=0.1024
Eval: 1024_h1=0.0063, 1024_l2=0.0067
[123] time=4.04, avg_loss=0.0054, train_err=0.0858
Eval: 1024_h1=0.0083, 1024_l2=0.0058
[124] time=4.04, avg_loss=0.0066, train_err=0.1050
Eval: 1024_h1=0.0079, 1024_l2=0.0063
[125] time=4.03, avg_loss=0.0077, train_err=0.1215
Eval: 1024_h1=0.0152, 1024_l2=0.0128
[126] time=4.04, avg_loss=0.0080, train_err=0.1272
Eval: 1024_h1=0.0066, 1024_l2=0.0055
[127] time=4.03, avg_loss=0.0056, train_err=0.0883
Eval: 1024_h1=0.0069, 1024_l2=0.0063
[128] time=4.04, avg_loss=0.0077, train_err=0.1229
Eval: 1024_h1=0.0124, 1024_l2=0.0101
[129] time=4.04, avg_loss=0.0076, train_err=0.1206
Eval: 1024_h1=0.0073, 1024_l2=0.0048
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=4.03, avg_loss=0.0064, train_err=0.1019
Eval: 1024_h1=0.0096, 1024_l2=0.0056
[131] time=4.05, avg_loss=0.0066, train_err=0.1044
Eval: 1024_h1=0.0086, 1024_l2=0.0076
[132] time=4.03, avg_loss=0.0067, train_err=0.1067
Eval: 1024_h1=0.0099, 1024_l2=0.0065
[133] time=4.04, avg_loss=0.0080, train_err=0.1270
Eval: 1024_h1=0.0093, 1024_l2=0.0057
[134] time=4.04, avg_loss=0.0063, train_err=0.1000
Eval: 1024_h1=0.0077, 1024_l2=0.0050
[135] time=4.03, avg_loss=0.0058, train_err=0.0925
Eval: 1024_h1=0.0051, 1024_l2=0.0037
[136] time=4.04, avg_loss=0.0065, train_err=0.1034
Eval: 1024_h1=0.0078, 1024_l2=0.0058
[137] time=4.04, avg_loss=0.0053, train_err=0.0838
Eval: 1024_h1=0.0064, 1024_l2=0.0038
[138] time=4.03, avg_loss=0.0071, train_err=0.1128
Eval: 1024_h1=0.0082, 1024_l2=0.0069
[139] time=4.03, avg_loss=0.0078, train_err=0.1239
Eval: 1024_h1=0.0079, 1024_l2=0.0053
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=4.03, avg_loss=0.0059, train_err=0.0939
Eval: 1024_h1=0.0074, 1024_l2=0.0058
[141] time=4.04, avg_loss=0.0064, train_err=0.1014
Eval: 1024_h1=0.0068, 1024_l2=0.0043
[142] time=4.04, avg_loss=0.0069, train_err=0.1092
Eval: 1024_h1=0.0121, 1024_l2=0.0081
[143] time=4.05, avg_loss=0.0071, train_err=0.1130
Eval: 1024_h1=0.0046, 1024_l2=0.0027
[144] time=4.04, avg_loss=0.0057, train_err=0.0898
Eval: 1024_h1=0.0067, 1024_l2=0.0051
[145] time=4.05, avg_loss=0.0059, train_err=0.0937
Eval: 1024_h1=0.0056, 1024_l2=0.0030
[146] time=4.03, avg_loss=0.0059, train_err=0.0937
Eval: 1024_h1=0.0115, 1024_l2=0.0069
[147] time=4.04, avg_loss=0.0079, train_err=0.1247
Eval: 1024_h1=0.0172, 1024_l2=0.0149
[148] time=4.03, avg_loss=0.0089, train_err=0.1413
Eval: 1024_h1=0.0073, 1024_l2=0.0060
[149] time=4.04, avg_loss=0.0075, train_err=0.1189
Eval: 1024_h1=0.0090, 1024_l2=0.0060
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=4.03, avg_loss=0.0069, train_err=0.1095
Eval: 1024_h1=0.0080, 1024_l2=0.0050
[Rank 0]: saved training state to save/1d_burgers/pure/w-f-l
[151] time=4.03, avg_loss=0.0068, train_err=0.1074
Eval: 1024_h1=0.0060, 1024_l2=0.0049
[152] time=4.04, avg_loss=0.0071, train_err=0.1124
Eval: 1024_h1=0.0140, 1024_l2=0.0092
[153] time=4.04, avg_loss=0.0064, train_err=0.1016
Eval: 1024_h1=0.0078, 1024_l2=0.0059
[154] time=4.03, avg_loss=0.0080, train_err=0.1264
Eval: 1024_h1=0.0058, 1024_l2=0.0047
[155] time=4.05, avg_loss=0.0052, train_err=0.0831
Eval: 1024_h1=0.0071, 1024_l2=0.0052
[156] time=4.03, avg_loss=0.0078, train_err=0.1244
Eval: 1024_h1=0.0082, 1024_l2=0.0066
[157] time=4.03, avg_loss=0.0074, train_err=0.1179
Eval: 1024_h1=0.0065, 1024_l2=0.0042
[158] time=4.04, avg_loss=0.0056, train_err=0.0882
Eval: 1024_h1=0.0080, 1024_l2=0.0062
[159] time=4.04, avg_loss=0.0080, train_err=0.1265
Eval: 1024_h1=0.0078, 1024_l2=0.0063
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=4.04, avg_loss=0.0068, train_err=0.1082
Eval: 1024_h1=0.0055, 1024_l2=0.0031
[161] time=4.03, avg_loss=0.0079, train_err=0.1260
Eval: 1024_h1=0.0101, 1024_l2=0.0074
[162] time=4.04, avg_loss=0.0065, train_err=0.1036
Eval: 1024_h1=0.0060, 1024_l2=0.0041
[163] time=4.04, avg_loss=0.0073, train_err=0.1154
Eval: 1024_h1=0.0074, 1024_l2=0.0049
[164] time=4.04, avg_loss=0.0077, train_err=0.1219
Eval: 1024_h1=0.0087, 1024_l2=0.0056
[165] time=4.03, avg_loss=0.0060, train_err=0.0949
Eval: 1024_h1=0.0052, 1024_l2=0.0035
[166] time=4.03, avg_loss=0.0070, train_err=0.1110
Eval: 1024_h1=0.0080, 1024_l2=0.0070
[167] time=4.03, avg_loss=0.0060, train_err=0.0959
Eval: 1024_h1=0.0148, 1024_l2=0.0125
[168] time=4.04, avg_loss=0.0069, train_err=0.1102
Eval: 1024_h1=0.0062, 1024_l2=0.0044
[169] time=4.04, avg_loss=0.0060, train_err=0.0947
Eval: 1024_h1=0.0116, 1024_l2=0.0063
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=4.04, avg_loss=0.0072, train_err=0.1150
Eval: 1024_h1=0.0081, 1024_l2=0.0064
[171] time=4.03, avg_loss=0.0066, train_err=0.1050
Eval: 1024_h1=0.0046, 1024_l2=0.0029
[172] time=4.03, avg_loss=0.0058, train_err=0.0923
Eval: 1024_h1=0.0096, 1024_l2=0.0067
[173] time=4.04, avg_loss=0.0068, train_err=0.1072
Eval: 1024_h1=0.0052, 1024_l2=0.0036
[174] time=4.03, avg_loss=0.0054, train_err=0.0865
Eval: 1024_h1=0.0073, 1024_l2=0.0057
[175] time=4.04, avg_loss=0.0075, train_err=0.1194
Eval: 1024_h1=0.0059, 1024_l2=0.0036
[176] time=4.03, avg_loss=0.0059, train_err=0.0934
Eval: 1024_h1=0.0076, 1024_l2=0.0043
[177] time=4.03, avg_loss=0.0079, train_err=0.1261
Eval: 1024_h1=0.0118, 1024_l2=0.0076
[178] time=4.04, avg_loss=0.0084, train_err=0.1331
Eval: 1024_h1=0.0086, 1024_l2=0.0066
[179] time=4.03, avg_loss=0.0075, train_err=0.1186
Eval: 1024_h1=0.0087, 1024_l2=0.0051
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=4.04, avg_loss=0.0055, train_err=0.0869
Eval: 1024_h1=0.0081, 1024_l2=0.0056
[181] time=4.03, avg_loss=0.0056, train_err=0.0883
Eval: 1024_h1=0.0057, 1024_l2=0.0037
[182] time=4.04, avg_loss=0.0059, train_err=0.0939
Eval: 1024_h1=0.0072, 1024_l2=0.0055
[183] time=4.04, avg_loss=0.0069, train_err=0.1091
Eval: 1024_h1=0.0102, 1024_l2=0.0080
[184] time=4.03, avg_loss=0.0080, train_err=0.1271
Eval: 1024_h1=0.0070, 1024_l2=0.0054
[185] time=4.04, avg_loss=0.0053, train_err=0.0841
Eval: 1024_h1=0.0075, 1024_l2=0.0047
[186] time=4.04, avg_loss=0.0064, train_err=0.1014
Eval: 1024_h1=0.0080, 1024_l2=0.0065
[187] time=4.03, avg_loss=0.0076, train_err=0.1208
Eval: 1024_h1=0.0096, 1024_l2=0.0061
[188] time=4.04, avg_loss=0.0068, train_err=0.1075
Eval: 1024_h1=0.0061, 1024_l2=0.0034
[189] time=4.04, avg_loss=0.0081, train_err=0.1290
Eval: 1024_h1=0.0244, 1024_l2=0.0210
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=4.03, avg_loss=0.0083, train_err=0.1321
Eval: 1024_h1=0.0082, 1024_l2=0.0065
[191] time=4.04, avg_loss=0.0059, train_err=0.0937
Eval: 1024_h1=0.0061, 1024_l2=0.0051
[192] time=4.03, avg_loss=0.0068, train_err=0.1077
Eval: 1024_h1=0.0100, 1024_l2=0.0080
[193] time=4.03, avg_loss=0.0074, train_err=0.1182
Eval: 1024_h1=0.0062, 1024_l2=0.0038
[194] time=4.03, avg_loss=0.0056, train_err=0.0881
Eval: 1024_h1=0.0061, 1024_l2=0.0042
[195] time=4.03, avg_loss=0.0056, train_err=0.0882
Eval: 1024_h1=0.0067, 1024_l2=0.0051
[196] time=4.04, avg_loss=0.0074, train_err=0.1177
Eval: 1024_h1=0.0066, 1024_l2=0.0046
[197] time=4.04, avg_loss=0.0059, train_err=0.0944
Eval: 1024_h1=0.0103, 1024_l2=0.0091
[198] time=4.03, avg_loss=0.0078, train_err=0.1242
Eval: 1024_h1=0.0067, 1024_l2=0.0050
[199] time=4.03, avg_loss=0.0068, train_err=0.1083
Eval: 1024_h1=0.0078, 1024_l2=0.0046
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=4.04, avg_loss=0.0044, train_err=0.0694
Eval: 1024_h1=0.0054, 1024_l2=0.0043
[Rank 0]: saved training state to save/1d_burgers/pure/w-f-l
[201] time=4.03, avg_loss=0.0034, train_err=0.0540
Eval: 1024_h1=0.0041, 1024_l2=0.0028
[202] time=4.04, avg_loss=0.0032, train_err=0.0503
Eval: 1024_h1=0.0034, 1024_l2=0.0023
[203] time=4.04, avg_loss=0.0035, train_err=0.0556
Eval: 1024_h1=0.0043, 1024_l2=0.0036
[204] time=4.04, avg_loss=0.0038, train_err=0.0598
Eval: 1024_h1=0.0035, 1024_l2=0.0021
[205] time=4.03, avg_loss=0.0033, train_err=0.0517
Eval: 1024_h1=0.0037, 1024_l2=0.0027
[206] time=4.05, avg_loss=0.0028, train_err=0.0445
Eval: 1024_h1=0.0065, 1024_l2=0.0059
[207] time=4.03, avg_loss=0.0039, train_err=0.0623
Eval: 1024_h1=0.0064, 1024_l2=0.0045
[208] time=4.04, avg_loss=0.0037, train_err=0.0583
Eval: 1024_h1=0.0035, 1024_l2=0.0027
[209] time=4.03, avg_loss=0.0035, train_err=0.0551
Eval: 1024_h1=0.0051, 1024_l2=0.0045
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=4.04, avg_loss=0.0037, train_err=0.0584
Eval: 1024_h1=0.0054, 1024_l2=0.0037
[211] time=4.03, avg_loss=0.0036, train_err=0.0574
Eval: 1024_h1=0.0037, 1024_l2=0.0030
[212] time=4.03, avg_loss=0.0037, train_err=0.0593
Eval: 1024_h1=0.0059, 1024_l2=0.0043
[213] time=4.04, avg_loss=0.0059, train_err=0.0941
Eval: 1024_h1=0.0065, 1024_l2=0.0046
[214] time=4.05, avg_loss=0.0032, train_err=0.0506
Eval: 1024_h1=0.0036, 1024_l2=0.0024
[215] time=4.03, avg_loss=0.0032, train_err=0.0503
Eval: 1024_h1=0.0034, 1024_l2=0.0024
[216] time=4.02, avg_loss=0.0036, train_err=0.0572
Eval: 1024_h1=0.0034, 1024_l2=0.0025
[217] time=4.04, avg_loss=0.0036, train_err=0.0565
Eval: 1024_h1=0.0047, 1024_l2=0.0041
[218] time=4.04, avg_loss=0.0031, train_err=0.0489
Eval: 1024_h1=0.0048, 1024_l2=0.0035
[219] time=4.04, avg_loss=0.0044, train_err=0.0691
Eval: 1024_h1=0.0055, 1024_l2=0.0033
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=4.04, avg_loss=0.0043, train_err=0.0678
Eval: 1024_h1=0.0036, 1024_l2=0.0023
[221] time=4.03, avg_loss=0.0043, train_err=0.0687
Eval: 1024_h1=0.0058, 1024_l2=0.0044
[222] time=4.03, avg_loss=0.0040, train_err=0.0636
Eval: 1024_h1=0.0052, 1024_l2=0.0033
[223] time=4.03, avg_loss=0.0038, train_err=0.0598
Eval: 1024_h1=0.0040, 1024_l2=0.0024
[224] time=4.03, avg_loss=0.0031, train_err=0.0500
Eval: 1024_h1=0.0035, 1024_l2=0.0020
[225] time=4.04, avg_loss=0.0029, train_err=0.0467
Eval: 1024_h1=0.0037, 1024_l2=0.0029
[226] time=4.03, avg_loss=0.0031, train_err=0.0496
Eval: 1024_h1=0.0036, 1024_l2=0.0023
[227] time=4.03, avg_loss=0.0047, train_err=0.0740
Eval: 1024_h1=0.0064, 1024_l2=0.0048
[228] time=4.03, avg_loss=0.0037, train_err=0.0580
Eval: 1024_h1=0.0035, 1024_l2=0.0019
[229] time=4.04, avg_loss=0.0039, train_err=0.0614
Eval: 1024_h1=0.0051, 1024_l2=0.0029
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=4.05, avg_loss=0.0045, train_err=0.0713
Eval: 1024_h1=0.0050, 1024_l2=0.0036
[231] time=4.05, avg_loss=0.0045, train_err=0.0711
Eval: 1024_h1=0.0040, 1024_l2=0.0024
[232] time=4.03, avg_loss=0.0041, train_err=0.0655
Eval: 1024_h1=0.0063, 1024_l2=0.0042
[233] time=4.04, avg_loss=0.0043, train_err=0.0676
Eval: 1024_h1=0.0071, 1024_l2=0.0056
[234] time=4.04, avg_loss=0.0041, train_err=0.0655
Eval: 1024_h1=0.0035, 1024_l2=0.0025
[235] time=4.04, avg_loss=0.0036, train_err=0.0578
Eval: 1024_h1=0.0066, 1024_l2=0.0064
[236] time=4.04, avg_loss=0.0037, train_err=0.0589
Eval: 1024_h1=0.0064, 1024_l2=0.0051
[237] time=4.04, avg_loss=0.0041, train_err=0.0645
Eval: 1024_h1=0.0055, 1024_l2=0.0037
[238] time=4.03, avg_loss=0.0037, train_err=0.0580
Eval: 1024_h1=0.0050, 1024_l2=0.0040
[239] time=4.04, avg_loss=0.0035, train_err=0.0549
Eval: 1024_h1=0.0037, 1024_l2=0.0033
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=4.03, avg_loss=0.0032, train_err=0.0511
Eval: 1024_h1=0.0051, 1024_l2=0.0039
[241] time=4.03, avg_loss=0.0037, train_err=0.0584
Eval: 1024_h1=0.0049, 1024_l2=0.0033
[242] time=4.03, avg_loss=0.0036, train_err=0.0577
Eval: 1024_h1=0.0033, 1024_l2=0.0019
[243] time=4.05, avg_loss=0.0032, train_err=0.0501
Eval: 1024_h1=0.0038, 1024_l2=0.0029
[244] time=4.03, avg_loss=0.0042, train_err=0.0665
Eval: 1024_h1=0.0040, 1024_l2=0.0038
[245] time=4.04, avg_loss=0.0030, train_err=0.0482
Eval: 1024_h1=0.0035, 1024_l2=0.0023
[246] time=4.04, avg_loss=0.0039, train_err=0.0615
Eval: 1024_h1=0.0044, 1024_l2=0.0025
[247] time=4.02, avg_loss=0.0034, train_err=0.0545
Eval: 1024_h1=0.0069, 1024_l2=0.0060
[248] time=4.03, avg_loss=0.0043, train_err=0.0682
Eval: 1024_h1=0.0037, 1024_l2=0.0029
[249] time=4.02, avg_loss=0.0036, train_err=0.0576
Eval: 1024_h1=0.0055, 1024_l2=0.0042
{'train_err': 0.057636815522398264, 'avg_loss': 0.003631119377911091, 'avg_lasso_loss': None, 'epoch_train_time': 4.024498423561454, '1024_h1': tensor(0.0055, device='cuda:0'), '1024_l2': tensor(0.0042, device='cuda:0')}
