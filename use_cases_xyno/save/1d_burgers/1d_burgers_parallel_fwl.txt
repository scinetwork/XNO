
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Wavelet Neural Operator (WNO) Kernel ]
>>> Overview:
The WNO uses wavelet transformations to extract multi-resolution features from input signals.
Wavelet decomposition offers a unique advantage in capturing localized features in both spatial
and frequency domains.

>>> Key Features:
- Multi-resolution analysis via wavelet decomposition.
- Supports both compressive sensing and hierarchical learning.

>>> Reference:
Tripura, T. et al. 'Wavelet neural operator: a neural operator for parametric partial differential equations'.
Link: https://arxiv.org/pdf/2205.02191
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Fourier Neural Operator (FNO) Kernel ]
>>> Overview:
The FNO leverages Fourier Transform to map input data into the spectral domain, where
convolutional operations are performed by truncating high-frequency modes.

>>> Key Features:
- Effective for parameterized Partial Differential Equations (PDEs).
- Reduces computational complexity by retaining only significant modes.

>>> Reference:
Li, Z. et al. 'Fourier Neural Operator for Parametric Partial Differential Equations' (ICLR 2021).
Link: https://arxiv.org/pdf/2010.08895
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 2475585

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7f550fdc4d10>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7f550fcd6ba0>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7f550fcd6ba0>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7f5534882180>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=9.04, avg_loss=0.4724, train_err=7.4980
Eval: 1024_h1=0.1662, 1024_l2=0.1279
[Rank 0]: saved training state to save/1d_burgers/parallel/fwl
[1] time=8.50, avg_loss=0.1513, train_err=2.4008
Eval: 1024_h1=0.2743, 1024_l2=0.2378
[2] time=8.50, avg_loss=0.0888, train_err=1.4100
Eval: 1024_h1=0.0768, 1024_l2=0.0558
[3] time=8.51, avg_loss=0.0766, train_err=1.2160
Eval: 1024_h1=0.0636, 1024_l2=0.0383
[4] time=8.51, avg_loss=0.0614, train_err=0.9743
Eval: 1024_h1=0.0566, 1024_l2=0.0371
[5] time=8.49, avg_loss=0.0609, train_err=0.9665
Eval: 1024_h1=0.0854, 1024_l2=0.0483
[6] time=8.48, avg_loss=0.0526, train_err=0.8349
Eval: 1024_h1=0.0645, 1024_l2=0.0452
[7] time=8.49, avg_loss=0.0519, train_err=0.8242
Eval: 1024_h1=0.0523, 1024_l2=0.0410
[8] time=8.49, avg_loss=0.0820, train_err=1.3016
Eval: 1024_h1=0.1352, 1024_l2=0.0694
[9] time=8.51, avg_loss=0.0673, train_err=1.0683
Eval: 1024_h1=0.0728, 1024_l2=0.0572
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=14.59, avg_loss=0.0523, train_err=0.8295
Eval: 1024_h1=0.0462, 1024_l2=0.0374
[11] time=14.57, avg_loss=0.0412, train_err=0.6533
Eval: 1024_h1=0.0738, 1024_l2=0.0757
[12] time=14.55, avg_loss=0.0467, train_err=0.7414
Eval: 1024_h1=0.0542, 1024_l2=0.0443
[13] time=14.56, avg_loss=0.0564, train_err=0.8958
Eval: 1024_h1=0.0745, 1024_l2=0.0576
[14] time=14.55, avg_loss=0.0562, train_err=0.8926
Eval: 1024_h1=0.1283, 1024_l2=0.0600
[15] time=14.56, avg_loss=0.1813, train_err=2.8776
Eval: 1024_h1=0.1338, 1024_l2=0.0636
[16] time=14.54, avg_loss=0.2737, train_err=4.3441
Eval: 1024_h1=0.2299, 1024_l2=0.2546
[17] time=14.55, avg_loss=0.2638, train_err=4.1876
Eval: 1024_h1=0.2336, 1024_l2=0.1245
[18] time=14.55, avg_loss=0.2463, train_err=3.9100
Eval: 1024_h1=0.1590, 1024_l2=0.0909
[19] time=14.55, avg_loss=0.2247, train_err=3.5672
Eval: 1024_h1=0.1871, 1024_l2=0.0830
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=14.57, avg_loss=0.1754, train_err=2.7835
Eval: 1024_h1=0.1496, 1024_l2=0.0712
[21] time=14.57, avg_loss=0.2052, train_err=3.2564
Eval: 1024_h1=0.1792, 1024_l2=0.0841
[22] time=14.55, avg_loss=0.1411, train_err=2.2401
Eval: 1024_h1=0.1354, 1024_l2=0.0509
[23] time=14.56, avg_loss=0.1720, train_err=2.7297
Eval: 1024_h1=0.2034, 1024_l2=0.1530
[24] time=14.55, avg_loss=0.2138, train_err=3.3932
Eval: 1024_h1=0.2743, 1024_l2=0.2173
[25] time=14.57, avg_loss=0.2339, train_err=3.7134
Eval: 1024_h1=0.1733, 1024_l2=0.0886
[26] time=14.58, avg_loss=0.1649, train_err=2.6172
Eval: 1024_h1=0.2076, 1024_l2=0.3743
[27] time=14.54, avg_loss=0.1803, train_err=2.8614
Eval: 1024_h1=0.1938, 1024_l2=0.0946
[28] time=14.56, avg_loss=0.1852, train_err=2.9403
Eval: 1024_h1=0.1532, 1024_l2=0.3386
[29] time=14.56, avg_loss=0.2828, train_err=4.4887
Eval: 1024_h1=0.3358, 1024_l2=0.2698
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=14.54, avg_loss=0.1950, train_err=3.0957
Eval: 1024_h1=0.2168, 1024_l2=0.4123
[31] time=14.57, avg_loss=0.1636, train_err=2.5968
Eval: 1024_h1=0.1536, 1024_l2=0.2949
[32] time=14.56, avg_loss=0.1522, train_err=2.4166
Eval: 1024_h1=0.2136, 1024_l2=0.6302
[33] time=14.56, avg_loss=0.2346, train_err=3.7244
Eval: 1024_h1=0.2010, 1024_l2=0.2724
[34] time=14.56, avg_loss=0.3334, train_err=5.2921
Eval: 1024_h1=0.1848, 1024_l2=0.0703
[35] time=14.54, avg_loss=0.1476, train_err=2.3422
Eval: 1024_h1=0.1248, 1024_l2=0.0754
[36] time=14.57, avg_loss=0.1640, train_err=2.6036
Eval: 1024_h1=0.3874, 1024_l2=2.5472
[37] time=14.57, avg_loss=0.2067, train_err=3.2816
Eval: 1024_h1=0.1711, 1024_l2=0.1735
[38] time=14.54, avg_loss=0.1951, train_err=3.0976
Eval: 1024_h1=0.2047, 1024_l2=0.1184
[39] time=14.54, avg_loss=0.1910, train_err=3.0317
Eval: 1024_h1=0.2018, 1024_l2=0.2384
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=14.54, avg_loss=0.3525, train_err=5.5946
Eval: 1024_h1=0.3708, 1024_l2=0.3550
[41] time=14.56, avg_loss=0.3751, train_err=5.9541
Eval: 1024_h1=0.3359, 1024_l2=0.5397
[42] time=14.56, avg_loss=0.2270, train_err=3.6027
Eval: 1024_h1=0.2088, 1024_l2=0.5481
[43] time=14.55, avg_loss=0.2225, train_err=3.5311
Eval: 1024_h1=0.2501, 1024_l2=0.5008
[44] time=14.57, avg_loss=0.2188, train_err=3.4725
Eval: 1024_h1=0.2158, 1024_l2=0.4403
[45] time=14.55, avg_loss=0.6611, train_err=10.4936
Eval: 1024_h1=1.0015, 1024_l2=1.1081
[46] time=14.49, avg_loss=1.0017, train_err=15.8998
Eval: 1024_h1=1.0012, 1024_l2=1.0895
[47] time=14.22, avg_loss=1.0014, train_err=15.8947
Eval: 1024_h1=1.0010, 1024_l2=1.0727
[48] time=14.24, avg_loss=1.0011, train_err=15.8904
Eval: 1024_h1=1.0008, 1024_l2=1.0591
[49] time=14.24, avg_loss=1.0009, train_err=15.8869
Eval: 1024_h1=1.0006, 1024_l2=1.0473
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=14.23, avg_loss=1.0007, train_err=15.8839
Eval: 1024_h1=1.0005, 1024_l2=1.0374
[Rank 0]: saved training state to save/1d_burgers/parallel/fwl
[51] time=14.24, avg_loss=1.0005, train_err=15.8816
Eval: 1024_h1=1.0004, 1024_l2=1.0295
[52] time=14.22, avg_loss=1.0004, train_err=15.8797
Eval: 1024_h1=1.0003, 1024_l2=1.0229
[53] time=14.21, avg_loss=1.0003, train_err=15.8781
Eval: 1024_h1=1.0002, 1024_l2=1.0178
[54] time=14.21, avg_loss=1.0002, train_err=15.8769
Eval: 1024_h1=1.0002, 1024_l2=1.0135
[55] time=14.23, avg_loss=1.0002, train_err=15.8760
Eval: 1024_h1=1.0001, 1024_l2=1.0102
[56] time=14.23, avg_loss=1.0001, train_err=15.8752
Eval: 1024_h1=1.0001, 1024_l2=1.0076
[57] time=14.24, avg_loss=1.0001, train_err=15.8747
Eval: 1024_h1=1.0001, 1024_l2=1.0056
[58] time=14.23, avg_loss=1.0001, train_err=15.8742
Eval: 1024_h1=1.0001, 1024_l2=1.0041
[59] time=14.24, avg_loss=1.0001, train_err=15.8739
Eval: 1024_h1=1.0000, 1024_l2=1.0030
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=14.25, avg_loss=1.0000, train_err=15.8737
Eval: 1024_h1=1.0000, 1024_l2=1.0021
[61] time=14.23, avg_loss=1.0000, train_err=15.8735
Eval: 1024_h1=1.0000, 1024_l2=1.0015
[62] time=14.24, avg_loss=1.0000, train_err=15.8733
Eval: 1024_h1=1.0000, 1024_l2=1.0011
[63] time=14.22, avg_loss=1.0000, train_err=15.8732
Eval: 1024_h1=1.0000, 1024_l2=1.0007
[64] time=14.23, avg_loss=1.0000, train_err=15.8732
Eval: 1024_h1=1.0000, 1024_l2=1.0005
[65] time=14.23, avg_loss=1.0000, train_err=15.8731
Eval: 1024_h1=1.0000, 1024_l2=1.0003
[66] time=14.22, avg_loss=1.0000, train_err=15.8731
Eval: 1024_h1=1.0000, 1024_l2=1.0002
[67] time=14.23, avg_loss=1.0000, train_err=15.8731
Eval: 1024_h1=1.0000, 1024_l2=1.0001
[68] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0001
[69] time=14.25, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0001
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=14.26, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[71] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[72] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[73] time=14.22, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[74] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[75] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[76] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[77] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[78] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[79] time=14.25, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=14.25, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[81] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[82] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[83] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[84] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[85] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[86] time=14.25, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[87] time=14.25, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[88] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[89] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[91] time=14.23, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[92] time=14.43, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[93] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[94] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[95] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[96] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[97] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[98] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[99] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[Rank 0]: saved training state to save/1d_burgers/parallel/fwl
[101] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[102] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[103] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[104] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[105] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[106] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[107] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[108] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[109] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[111] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[112] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[113] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[114] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[115] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[116] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[117] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[118] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[119] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[121] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[122] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[123] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[124] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[125] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[126] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[127] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[128] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[129] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[131] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[132] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[133] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[134] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[135] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[136] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[137] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[138] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[139] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[141] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[142] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[143] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[144] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[145] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[146] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[147] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[148] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[149] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[Rank 0]: saved training state to save/1d_burgers/parallel/fwl
[151] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[152] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[153] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[154] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[155] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[156] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[157] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[158] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[159] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[161] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[162] time=14.55, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[163] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[164] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[165] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[166] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[167] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[168] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[169] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[171] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[172] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[173] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[174] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[175] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[176] time=14.36, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[177] time=14.24, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[178] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[179] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[181] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[182] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[183] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[184] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[185] time=14.49, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[186] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[187] time=14.49, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[188] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[189] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[191] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[192] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[193] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[194] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[195] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[196] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[197] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[198] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[199] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[Rank 0]: saved training state to save/1d_burgers/parallel/fwl
[201] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[202] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[203] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[204] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[205] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[206] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[207] time=14.49, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[208] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[209] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[211] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[212] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[213] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[214] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[215] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[216] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[217] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[218] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[219] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[221] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[222] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[223] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[224] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[225] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[226] time=14.53, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[227] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[228] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[229] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=14.49, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[231] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[232] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[233] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[234] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[235] time=14.52, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[236] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[237] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[238] time=14.51, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[239] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=14.49, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[241] time=14.49, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[242] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[243] time=14.50, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[244] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[245] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[246] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[247] time=14.57, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[248] time=14.54, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
[249] time=14.56, avg_loss=1.0000, train_err=15.8730
Eval: 1024_h1=1.0000, 1024_l2=1.0000
{'train_err': 15.873015873015873, 'avg_loss': 1.0, 'avg_lasso_loss': None, 'epoch_train_time': 14.560226367786527, '1024_h1': tensor(1., device='cuda:0'), '1024_l2': tensor(1., device='cuda:0')}
