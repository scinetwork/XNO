
=== Pure data structure ===

X_Train Shape: torch.Size([1000, 1024, 1])
Y_Train Shape: torch.Size([1000, 1024])
X_Test Shape: torch.Size([100, 1024, 1])
Y_Test Shape: torch.Size([100, 1024])

=== Reshape data structure ===

X_Train Shape: torch.Size([1000, 1, 1024])
Y_Train Shape: torch.Size([1000, 1, 1024])
X_Test Shape: torch.Size([100, 1, 1024])
Y_Test Shape: torch.Size([100, 1, 1024])

=== One batch of the Train Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== One batch of the Test Loader ===

Loader Type: <class 'torch.utils.data.dataloader.DataLoader'>
Batch Type: <class 'dict'>
Batch['x'].shape: torch.Size([16, 1, 1024])
Batch['y'].shape: torch.Size([16, 1, 1024])

=== Device: cuda ===

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Wavelet Neural Operator (WNO) Kernel ]
>>> Overview:
The WNO uses wavelet transformations to extract multi-resolution features from input signals.
Wavelet decomposition offers a unique advantage in capturing localized features in both spatial
and frequency domains.

>>> Key Features:
- Multi-resolution analysis via wavelet decomposition.
- Supports both compressive sensing and hierarchical learning.

>>> Reference:
Tripura, T. et al. 'Wavelet neural operator: a neural operator for parametric partial differential equations'.
Link: https://arxiv.org/pdf/2205.02191
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Fourier Neural Operator (FNO) Kernel ]
>>> Overview:
The FNO leverages Fourier Transform to map input data into the spectral domain, where
convolutional operations are performed by truncating high-frequency modes.

>>> Key Features:
- Effective for parameterized Partial Differential Equations (PDEs).
- Reduces computational complexity by retaining only significant modes.

>>> Reference:
Li, Z. et al. 'Fourier Neural Operator for Parametric Partial Differential Equations' (ICLR 2021).
Link: https://arxiv.org/pdf/2010.08895
============================================

================== Config ==================
>>> Normaliztion: None
>>> Activation Function: 
============================================

======== Selected Kernel Description =======
Dimentionality: 1D
Transformation: [ Laplace Neural Operator (LNO) Kernel ]
>>> Overview:
The LNO uses a pole-residue formulation to compute solutions to PDEs in the Laplace domain.
This kernel is highly effective for problems requiring stability and steady-state solutions.

>>> Key Features:
- Specially designed for systems dominated by Laplacian dynamics.
- Balances transient and steady-state components.

>>> Reference:
Cao, Q. et al. 'LNO: Laplace Neural Operator for Solving Differential Equations'.
Link: https://arxiv.org/pdf/2303.10528
============================================

================== Config ==================
>>> Normaliztion: group_norm
>>> Activation Function: 
============================================

Original Incre Res: change index to 0
Original Incre Res: change sub to 2
Original Incre Res: change res to 512

### N PARAMS ###
 2475585

### OPTIMIZER ###
 AdamW (
Parameter Group 0
    betas: (0.9, 0.999)
    correct_bias: True
    eps: 1e-06
    initial_lr: 0.001
    lr: 0.001
    weight_decay: 0.0001
)

### SCHEDULER ###
 <torch.optim.lr_scheduler.StepLR object at 0x7faf177ee720>

### LOSSES ###

### INCREMENTAL RESOLUTION + GRADIENT EXPLAINED ###

 * Train: <xno.losses.data_losses.H1Loss object at 0x7faeeddf64b0>

 * Test: {'h1': <xno.losses.data_losses.H1Loss object at 0x7faeeddf64b0>, 'l2': <xno.losses.data_losses.LpLoss object at 0x7faf19aac890>}
Training on 1000 samples
Testing on [100] samples         on resolutions [1024].
Raw outputs of shape torch.Size([16, 1, 512])
[0] time=3.02, avg_loss=0.5162, train_err=8.1941
Eval: 1024_h1=0.1812, 1024_l2=0.1347
[Rank 0]: saved training state to save/1d_burgers/pure/f-l-w
[1] time=2.50, avg_loss=0.1117, train_err=1.7735
Eval: 1024_h1=0.0722, 1024_l2=0.0518
[2] time=2.49, avg_loss=0.0573, train_err=0.9092
Eval: 1024_h1=0.0672, 1024_l2=0.0414
[3] time=2.47, avg_loss=0.0459, train_err=0.7283
Eval: 1024_h1=0.0411, 1024_l2=0.0232
[4] time=2.49, avg_loss=0.0361, train_err=0.5735
Eval: 1024_h1=0.0394, 1024_l2=0.0267
[5] time=2.47, avg_loss=0.0327, train_err=0.5183
Eval: 1024_h1=0.0327, 1024_l2=0.0218
[6] time=2.47, avg_loss=0.0276, train_err=0.4384
Eval: 1024_h1=0.0271, 1024_l2=0.0176
[7] time=2.47, avg_loss=0.0298, train_err=0.4727
Eval: 1024_h1=0.0308, 1024_l2=0.0182
[8] time=2.48, avg_loss=0.0233, train_err=0.3696
Eval: 1024_h1=0.0304, 1024_l2=0.0212
[9] time=2.48, avg_loss=0.0220, train_err=0.3485
Eval: 1024_h1=0.0395, 1024_l2=0.0244
Incre Res Update: change index to 1
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[10] time=4.01, avg_loss=0.0273, train_err=0.4337
Eval: 1024_h1=0.0281, 1024_l2=0.0173
[11] time=3.99, avg_loss=0.0247, train_err=0.3921
Eval: 1024_h1=0.0308, 1024_l2=0.0240
[12] time=3.98, avg_loss=0.0273, train_err=0.4330
Eval: 1024_h1=0.0250, 1024_l2=0.0202
[13] time=3.98, avg_loss=0.0235, train_err=0.3734
Eval: 1024_h1=0.0308, 1024_l2=0.0121
[14] time=3.99, avg_loss=0.0259, train_err=0.4105
Eval: 1024_h1=0.0404, 1024_l2=0.0326
[15] time=4.02, avg_loss=0.0260, train_err=0.4127
Eval: 1024_h1=0.0269, 1024_l2=0.0170
[16] time=3.98, avg_loss=0.0271, train_err=0.4299
Eval: 1024_h1=0.0448, 1024_l2=0.0375
[17] time=3.99, avg_loss=0.0273, train_err=0.4328
Eval: 1024_h1=0.0209, 1024_l2=0.0128
[18] time=3.98, avg_loss=0.0206, train_err=0.3267
Eval: 1024_h1=0.0386, 1024_l2=0.0310
[19] time=3.99, avg_loss=0.0201, train_err=0.3186
Eval: 1024_h1=0.0224, 1024_l2=0.0095
Incre Res Update: change index to 2
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[20] time=3.99, avg_loss=0.0180, train_err=0.2858
Eval: 1024_h1=0.0237, 1024_l2=0.0162
[21] time=4.00, avg_loss=0.0205, train_err=0.3248
Eval: 1024_h1=0.0240, 1024_l2=0.0134
[22] time=4.00, avg_loss=0.0201, train_err=0.3186
Eval: 1024_h1=0.0348, 1024_l2=0.0316
[23] time=3.99, avg_loss=0.0204, train_err=0.3237
Eval: 1024_h1=0.0223, 1024_l2=0.0125
[24] time=3.98, avg_loss=0.0180, train_err=0.2853
Eval: 1024_h1=0.0179, 1024_l2=0.0117
[25] time=3.98, avg_loss=0.0183, train_err=0.2907
Eval: 1024_h1=0.0183, 1024_l2=0.0146
[26] time=3.99, avg_loss=0.0173, train_err=0.2739
Eval: 1024_h1=0.0194, 1024_l2=0.0112
[27] time=3.99, avg_loss=0.0183, train_err=0.2897
Eval: 1024_h1=0.0137, 1024_l2=0.0093
[28] time=3.99, avg_loss=0.0160, train_err=0.2545
Eval: 1024_h1=0.0244, 1024_l2=0.0156
[29] time=3.99, avg_loss=0.0153, train_err=0.2435
Eval: 1024_h1=0.0185, 1024_l2=0.0130
Incre Res Update: change index to 3
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[30] time=4.00, avg_loss=0.0167, train_err=0.2652
Eval: 1024_h1=0.0153, 1024_l2=0.0085
[31] time=4.01, avg_loss=0.0176, train_err=0.2797
Eval: 1024_h1=0.0205, 1024_l2=0.0085
[32] time=3.99, avg_loss=0.0182, train_err=0.2886
Eval: 1024_h1=0.0159, 1024_l2=0.0127
[33] time=3.99, avg_loss=0.0154, train_err=0.2442
Eval: 1024_h1=0.0171, 1024_l2=0.0109
[34] time=3.99, avg_loss=0.0209, train_err=0.3316
Eval: 1024_h1=0.0210, 1024_l2=0.0145
[35] time=3.99, avg_loss=0.0167, train_err=0.2648
Eval: 1024_h1=0.0139, 1024_l2=0.0122
[36] time=4.00, avg_loss=0.0143, train_err=0.2277
Eval: 1024_h1=0.0194, 1024_l2=0.0128
[37] time=3.98, avg_loss=0.0176, train_err=0.2789
Eval: 1024_h1=0.0398, 1024_l2=0.0281
[38] time=3.98, avg_loss=0.0205, train_err=0.3260
Eval: 1024_h1=0.0186, 1024_l2=0.0111
[39] time=3.99, avg_loss=0.0187, train_err=0.2967
Eval: 1024_h1=0.0223, 1024_l2=0.0167
Incre Res Update: change index to 4
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[40] time=3.99, avg_loss=0.0211, train_err=0.3353
Eval: 1024_h1=0.0237, 1024_l2=0.0185
[41] time=4.00, avg_loss=0.0170, train_err=0.2699
Eval: 1024_h1=0.0285, 1024_l2=0.0217
[42] time=3.99, avg_loss=0.0198, train_err=0.3144
Eval: 1024_h1=0.0220, 1024_l2=0.0165
[43] time=3.98, avg_loss=0.0185, train_err=0.2942
Eval: 1024_h1=0.0174, 1024_l2=0.0125
[44] time=3.99, avg_loss=0.0165, train_err=0.2618
Eval: 1024_h1=0.0204, 1024_l2=0.0162
[45] time=3.98, avg_loss=0.0151, train_err=0.2391
Eval: 1024_h1=0.0278, 1024_l2=0.0209
[46] time=4.00, avg_loss=0.0189, train_err=0.2993
Eval: 1024_h1=0.0182, 1024_l2=0.0148
[47] time=3.99, avg_loss=0.0142, train_err=0.2260
Eval: 1024_h1=0.0196, 1024_l2=0.0157
[48] time=3.99, avg_loss=0.0137, train_err=0.2168
Eval: 1024_h1=0.0122, 1024_l2=0.0086
[49] time=3.99, avg_loss=0.0139, train_err=0.2201
Eval: 1024_h1=0.0141, 1024_l2=0.0090
Incre Res Update: change index to 5
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[50] time=3.98, avg_loss=0.0162, train_err=0.2571
Eval: 1024_h1=0.0141, 1024_l2=0.0083
[Rank 0]: saved training state to save/1d_burgers/pure/f-l-w
[51] time=3.99, avg_loss=0.0124, train_err=0.1976
Eval: 1024_h1=0.0207, 1024_l2=0.0122
[52] time=4.00, avg_loss=0.0172, train_err=0.2730
Eval: 1024_h1=0.0152, 1024_l2=0.0095
[53] time=4.00, avg_loss=0.0153, train_err=0.2422
Eval: 1024_h1=0.0155, 1024_l2=0.0128
[54] time=3.99, avg_loss=0.0182, train_err=0.2895
Eval: 1024_h1=0.0123, 1024_l2=0.0084
[55] time=3.99, avg_loss=0.0162, train_err=0.2574
Eval: 1024_h1=0.0137, 1024_l2=0.0106
[56] time=3.99, avg_loss=0.0151, train_err=0.2391
Eval: 1024_h1=0.0217, 1024_l2=0.0160
[57] time=3.98, avg_loss=0.0156, train_err=0.2477
Eval: 1024_h1=0.0196, 1024_l2=0.0147
[58] time=3.98, avg_loss=0.0176, train_err=0.2786
Eval: 1024_h1=0.0187, 1024_l2=0.0150
[59] time=3.98, avg_loss=0.0140, train_err=0.2229
Eval: 1024_h1=0.0114, 1024_l2=0.0081
Incre Res Update: change index to 6
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[60] time=3.99, avg_loss=0.0140, train_err=0.2222
Eval: 1024_h1=0.0160, 1024_l2=0.0112
[61] time=3.99, avg_loss=0.0135, train_err=0.2140
Eval: 1024_h1=0.0239, 1024_l2=0.0142
[62] time=3.98, avg_loss=0.0153, train_err=0.2425
Eval: 1024_h1=0.0126, 1024_l2=0.0097
[63] time=4.00, avg_loss=0.0170, train_err=0.2697
Eval: 1024_h1=0.0258, 1024_l2=0.0168
[64] time=3.99, avg_loss=0.0216, train_err=0.3424
Eval: 1024_h1=0.0160, 1024_l2=0.0131
[65] time=3.98, avg_loss=0.0139, train_err=0.2209
Eval: 1024_h1=0.0180, 1024_l2=0.0121
[66] time=4.00, avg_loss=0.0126, train_err=0.2002
Eval: 1024_h1=0.0126, 1024_l2=0.0085
[67] time=3.99, avg_loss=0.0140, train_err=0.2217
Eval: 1024_h1=0.0304, 1024_l2=0.0236
[68] time=3.98, avg_loss=0.0172, train_err=0.2726
Eval: 1024_h1=0.0154, 1024_l2=0.0107
[69] time=3.98, avg_loss=0.0160, train_err=0.2542
Eval: 1024_h1=0.0220, 1024_l2=0.0202
Incre Res Update: change index to 7
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[70] time=4.00, avg_loss=0.0158, train_err=0.2504
Eval: 1024_h1=0.0147, 1024_l2=0.0096
[71] time=4.00, avg_loss=0.0125, train_err=0.1981
Eval: 1024_h1=0.0141, 1024_l2=0.0092
[72] time=4.01, avg_loss=0.0138, train_err=0.2189
Eval: 1024_h1=0.0196, 1024_l2=0.0118
[73] time=3.99, avg_loss=0.0153, train_err=0.2427
Eval: 1024_h1=0.0180, 1024_l2=0.0144
[74] time=3.98, avg_loss=0.0158, train_err=0.2508
Eval: 1024_h1=0.0235, 1024_l2=0.0196
[75] time=3.98, avg_loss=0.0156, train_err=0.2474
Eval: 1024_h1=0.0147, 1024_l2=0.0147
[76] time=4.01, avg_loss=0.0127, train_err=0.2008
Eval: 1024_h1=0.0123, 1024_l2=0.0081
[77] time=4.00, avg_loss=0.0140, train_err=0.2215
Eval: 1024_h1=0.0178, 1024_l2=0.0161
[78] time=3.98, avg_loss=0.0164, train_err=0.2605
Eval: 1024_h1=0.0199, 1024_l2=0.0128
[79] time=3.99, avg_loss=0.0154, train_err=0.2447
Eval: 1024_h1=0.0160, 1024_l2=0.0103
Incre Res Update: change index to 8
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[80] time=4.00, avg_loss=0.0168, train_err=0.2665
Eval: 1024_h1=0.0201, 1024_l2=0.0196
[81] time=3.99, avg_loss=0.0139, train_err=0.2204
Eval: 1024_h1=0.0119, 1024_l2=0.0066
[82] time=3.99, avg_loss=0.0156, train_err=0.2484
Eval: 1024_h1=0.0185, 1024_l2=0.0131
[83] time=3.98, avg_loss=0.0151, train_err=0.2398
Eval: 1024_h1=0.0113, 1024_l2=0.0065
[84] time=3.99, avg_loss=0.0113, train_err=0.1789
Eval: 1024_h1=0.0097, 1024_l2=0.0052
[85] time=4.00, avg_loss=0.0143, train_err=0.2263
Eval: 1024_h1=0.0159, 1024_l2=0.0129
[86] time=4.00, avg_loss=0.0143, train_err=0.2271
Eval: 1024_h1=0.0116, 1024_l2=0.0058
[87] time=3.99, avg_loss=0.0134, train_err=0.2133
Eval: 1024_h1=0.0173, 1024_l2=0.0113
[88] time=4.00, avg_loss=0.0124, train_err=0.1976
Eval: 1024_h1=0.0146, 1024_l2=0.0160
[89] time=3.99, avg_loss=0.0141, train_err=0.2240
Eval: 1024_h1=0.0109, 1024_l2=0.0068
Incre Res Update: change index to 9
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[90] time=3.99, avg_loss=0.0135, train_err=0.2141
Eval: 1024_h1=0.0152, 1024_l2=0.0119
[91] time=3.99, avg_loss=0.0169, train_err=0.2683
Eval: 1024_h1=0.0126, 1024_l2=0.0090
[92] time=3.99, avg_loss=0.0125, train_err=0.1990
Eval: 1024_h1=0.0089, 1024_l2=0.0051
[93] time=3.99, avg_loss=0.0123, train_err=0.1948
Eval: 1024_h1=0.0147, 1024_l2=0.0100
[94] time=4.00, avg_loss=0.0137, train_err=0.2170
Eval: 1024_h1=0.0162, 1024_l2=0.0106
[95] time=3.99, avg_loss=0.0134, train_err=0.2125
Eval: 1024_h1=0.0172, 1024_l2=0.0103
[96] time=3.99, avg_loss=0.0169, train_err=0.2689
Eval: 1024_h1=0.0142, 1024_l2=0.0110
[97] time=3.98, avg_loss=0.0120, train_err=0.1903
Eval: 1024_h1=0.0142, 1024_l2=0.0127
[98] time=3.98, avg_loss=0.0107, train_err=0.1704
Eval: 1024_h1=0.0167, 1024_l2=0.0132
[99] time=3.99, avg_loss=0.0126, train_err=0.2003
Eval: 1024_h1=0.0099, 1024_l2=0.0057
Incre Res Update: change index to 10
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[100] time=3.98, avg_loss=0.0067, train_err=0.1071
Eval: 1024_h1=0.0090, 1024_l2=0.0054
[Rank 0]: saved training state to save/1d_burgers/pure/f-l-w
[101] time=3.98, avg_loss=0.0061, train_err=0.0968
Eval: 1024_h1=0.0067, 1024_l2=0.0039
[102] time=4.00, avg_loss=0.0069, train_err=0.1097
Eval: 1024_h1=0.0082, 1024_l2=0.0066
[103] time=3.99, avg_loss=0.0064, train_err=0.1019
Eval: 1024_h1=0.0093, 1024_l2=0.0057
[104] time=3.98, avg_loss=0.0069, train_err=0.1097
Eval: 1024_h1=0.0071, 1024_l2=0.0041
[105] time=4.00, avg_loss=0.0068, train_err=0.1079
Eval: 1024_h1=0.0086, 1024_l2=0.0059
[106] time=3.99, avg_loss=0.0082, train_err=0.1306
Eval: 1024_h1=0.0067, 1024_l2=0.0044
[107] time=3.98, avg_loss=0.0063, train_err=0.0997
Eval: 1024_h1=0.0084, 1024_l2=0.0046
[108] time=3.98, avg_loss=0.0067, train_err=0.1060
Eval: 1024_h1=0.0063, 1024_l2=0.0045
[109] time=3.99, avg_loss=0.0083, train_err=0.1312
Eval: 1024_h1=0.0115, 1024_l2=0.0077
Incre Res Update: change index to 11
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[110] time=3.98, avg_loss=0.0072, train_err=0.1141
Eval: 1024_h1=0.0067, 1024_l2=0.0045
[111] time=3.99, avg_loss=0.0060, train_err=0.0957
Eval: 1024_h1=0.0075, 1024_l2=0.0044
[112] time=3.99, avg_loss=0.0069, train_err=0.1095
Eval: 1024_h1=0.0103, 1024_l2=0.0091
[113] time=3.99, avg_loss=0.0076, train_err=0.1209
Eval: 1024_h1=0.0117, 1024_l2=0.0068
[114] time=3.99, avg_loss=0.0065, train_err=0.1027
Eval: 1024_h1=0.0082, 1024_l2=0.0055
[115] time=4.01, avg_loss=0.0070, train_err=0.1114
Eval: 1024_h1=0.0099, 1024_l2=0.0077
[116] time=3.99, avg_loss=0.0083, train_err=0.1320
Eval: 1024_h1=0.0078, 1024_l2=0.0045
[117] time=3.99, avg_loss=0.0081, train_err=0.1292
Eval: 1024_h1=0.0064, 1024_l2=0.0059
[118] time=4.00, avg_loss=0.0066, train_err=0.1041
Eval: 1024_h1=0.0071, 1024_l2=0.0043
[119] time=4.01, avg_loss=0.0073, train_err=0.1166
Eval: 1024_h1=0.0094, 1024_l2=0.0069
Incre Res Update: change index to 12
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[120] time=3.98, avg_loss=0.0077, train_err=0.1223
Eval: 1024_h1=0.0082, 1024_l2=0.0043
[121] time=4.00, avg_loss=0.0081, train_err=0.1293
Eval: 1024_h1=0.0126, 1024_l2=0.0096
[122] time=3.99, avg_loss=0.0081, train_err=0.1290
Eval: 1024_h1=0.0080, 1024_l2=0.0058
[123] time=3.99, avg_loss=0.0069, train_err=0.1094
Eval: 1024_h1=0.0082, 1024_l2=0.0050
[124] time=3.99, avg_loss=0.0071, train_err=0.1123
Eval: 1024_h1=0.0136, 1024_l2=0.0112
[125] time=3.99, avg_loss=0.0078, train_err=0.1243
Eval: 1024_h1=0.0090, 1024_l2=0.0069
[126] time=3.98, avg_loss=0.0080, train_err=0.1273
Eval: 1024_h1=0.0142, 1024_l2=0.0109
[127] time=3.98, avg_loss=0.0084, train_err=0.1328
Eval: 1024_h1=0.0106, 1024_l2=0.0089
[128] time=3.99, avg_loss=0.0079, train_err=0.1252
Eval: 1024_h1=0.0122, 1024_l2=0.0090
[129] time=3.99, avg_loss=0.0075, train_err=0.1194
Eval: 1024_h1=0.0097, 1024_l2=0.0071
Incre Res Update: change index to 13
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[130] time=4.00, avg_loss=0.0064, train_err=0.1021
Eval: 1024_h1=0.0076, 1024_l2=0.0045
[131] time=3.98, avg_loss=0.0078, train_err=0.1243
Eval: 1024_h1=0.0057, 1024_l2=0.0043
[132] time=3.99, avg_loss=0.0063, train_err=0.0995
Eval: 1024_h1=0.0071, 1024_l2=0.0047
[133] time=3.99, avg_loss=0.0064, train_err=0.1020
Eval: 1024_h1=0.0081, 1024_l2=0.0046
[134] time=3.98, avg_loss=0.0077, train_err=0.1221
Eval: 1024_h1=0.0080, 1024_l2=0.0057
[135] time=4.00, avg_loss=0.0082, train_err=0.1308
Eval: 1024_h1=0.0081, 1024_l2=0.0070
[136] time=3.98, avg_loss=0.0078, train_err=0.1238
Eval: 1024_h1=0.0080, 1024_l2=0.0054
[137] time=3.98, avg_loss=0.0066, train_err=0.1047
Eval: 1024_h1=0.0068, 1024_l2=0.0045
[138] time=3.98, avg_loss=0.0075, train_err=0.1183
Eval: 1024_h1=0.0094, 1024_l2=0.0067
[139] time=4.00, avg_loss=0.0075, train_err=0.1198
Eval: 1024_h1=0.0084, 1024_l2=0.0076
Incre Res Update: change index to 14
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[140] time=3.99, avg_loss=0.0071, train_err=0.1120
Eval: 1024_h1=0.0109, 1024_l2=0.0052
[141] time=3.99, avg_loss=0.0073, train_err=0.1158
Eval: 1024_h1=0.0074, 1024_l2=0.0044
[142] time=3.99, avg_loss=0.0076, train_err=0.1201
Eval: 1024_h1=0.0076, 1024_l2=0.0058
[143] time=3.99, avg_loss=0.0062, train_err=0.0977
Eval: 1024_h1=0.0075, 1024_l2=0.0047
[144] time=3.98, avg_loss=0.0071, train_err=0.1128
Eval: 1024_h1=0.0080, 1024_l2=0.0049
[145] time=3.98, avg_loss=0.0064, train_err=0.1010
Eval: 1024_h1=0.0068, 1024_l2=0.0042
[146] time=4.00, avg_loss=0.0057, train_err=0.0903
Eval: 1024_h1=0.0058, 1024_l2=0.0039
[147] time=4.00, avg_loss=0.0067, train_err=0.1068
Eval: 1024_h1=0.0112, 1024_l2=0.0056
[148] time=3.98, avg_loss=0.0070, train_err=0.1116
Eval: 1024_h1=0.0054, 1024_l2=0.0032
[149] time=4.00, avg_loss=0.0060, train_err=0.0960
Eval: 1024_h1=0.0097, 1024_l2=0.0064
Incre Res Update: change index to 15
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[150] time=3.99, avg_loss=0.0069, train_err=0.1102
Eval: 1024_h1=0.0076, 1024_l2=0.0063
[Rank 0]: saved training state to save/1d_burgers/pure/f-l-w
[151] time=3.97, avg_loss=0.0073, train_err=0.1153
Eval: 1024_h1=0.0081, 1024_l2=0.0050
[152] time=4.00, avg_loss=0.0065, train_err=0.1030
Eval: 1024_h1=0.0111, 1024_l2=0.0085
[153] time=3.98, avg_loss=0.0076, train_err=0.1203
Eval: 1024_h1=0.0085, 1024_l2=0.0069
[154] time=4.00, avg_loss=0.0076, train_err=0.1212
Eval: 1024_h1=0.0105, 1024_l2=0.0066
[155] time=3.99, avg_loss=0.0083, train_err=0.1325
Eval: 1024_h1=0.0071, 1024_l2=0.0043
[156] time=3.99, avg_loss=0.0070, train_err=0.1105
Eval: 1024_h1=0.0078, 1024_l2=0.0053
[157] time=3.99, avg_loss=0.0078, train_err=0.1233
Eval: 1024_h1=0.0070, 1024_l2=0.0039
[158] time=3.98, avg_loss=0.0076, train_err=0.1210
Eval: 1024_h1=0.0089, 1024_l2=0.0051
[159] time=3.97, avg_loss=0.0082, train_err=0.1306
Eval: 1024_h1=0.0112, 1024_l2=0.0067
Incre Res Update: change index to 16
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[160] time=3.99, avg_loss=0.0061, train_err=0.0964
Eval: 1024_h1=0.0065, 1024_l2=0.0043
[161] time=3.99, avg_loss=0.0078, train_err=0.1241
Eval: 1024_h1=0.0082, 1024_l2=0.0089
[162] time=3.99, avg_loss=0.0087, train_err=0.1382
Eval: 1024_h1=0.0091, 1024_l2=0.0097
[163] time=3.98, avg_loss=0.0059, train_err=0.0937
Eval: 1024_h1=0.0074, 1024_l2=0.0042
[164] time=4.00, avg_loss=0.0064, train_err=0.1019
Eval: 1024_h1=0.0056, 1024_l2=0.0034
[165] time=3.99, avg_loss=0.0073, train_err=0.1166
Eval: 1024_h1=0.0076, 1024_l2=0.0056
[166] time=4.00, avg_loss=0.0062, train_err=0.0983
Eval: 1024_h1=0.0085, 1024_l2=0.0054
[167] time=3.98, avg_loss=0.0071, train_err=0.1132
Eval: 1024_h1=0.0057, 1024_l2=0.0035
[168] time=3.98, avg_loss=0.0066, train_err=0.1048
Eval: 1024_h1=0.0094, 1024_l2=0.0070
[169] time=3.99, avg_loss=0.0086, train_err=0.1365
Eval: 1024_h1=0.0124, 1024_l2=0.0101
Incre Res Update: change index to 17
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[170] time=3.99, avg_loss=0.0090, train_err=0.1434
Eval: 1024_h1=0.0096, 1024_l2=0.0059
[171] time=3.99, avg_loss=0.0095, train_err=0.1512
Eval: 1024_h1=0.0120, 1024_l2=0.0100
[172] time=3.98, avg_loss=0.0073, train_err=0.1155
Eval: 1024_h1=0.0075, 1024_l2=0.0053
[173] time=3.99, avg_loss=0.0069, train_err=0.1099
Eval: 1024_h1=0.0091, 1024_l2=0.0058
[174] time=4.00, avg_loss=0.0071, train_err=0.1128
Eval: 1024_h1=0.0070, 1024_l2=0.0063
[175] time=3.98, avg_loss=0.0063, train_err=0.1002
Eval: 1024_h1=0.0108, 1024_l2=0.0053
[176] time=3.98, avg_loss=0.0067, train_err=0.1059
Eval: 1024_h1=0.0094, 1024_l2=0.0068
[177] time=3.99, avg_loss=0.0071, train_err=0.1130
Eval: 1024_h1=0.0072, 1024_l2=0.0043
[178] time=3.99, avg_loss=0.0073, train_err=0.1166
Eval: 1024_h1=0.0062, 1024_l2=0.0035
[179] time=4.00, avg_loss=0.0075, train_err=0.1196
Eval: 1024_h1=0.0171, 1024_l2=0.0130
Incre Res Update: change index to 18
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[180] time=3.99, avg_loss=0.0095, train_err=0.1509
Eval: 1024_h1=0.0082, 1024_l2=0.0051
[181] time=4.00, avg_loss=0.0087, train_err=0.1376
Eval: 1024_h1=0.0084, 1024_l2=0.0051
[182] time=3.99, avg_loss=0.0068, train_err=0.1073
Eval: 1024_h1=0.0066, 1024_l2=0.0035
[183] time=3.99, avg_loss=0.0062, train_err=0.0983
Eval: 1024_h1=0.0094, 1024_l2=0.0065
[184] time=3.99, avg_loss=0.0065, train_err=0.1032
Eval: 1024_h1=0.0075, 1024_l2=0.0050
[185] time=3.99, avg_loss=0.0058, train_err=0.0927
Eval: 1024_h1=0.0101, 1024_l2=0.0069
[186] time=3.98, avg_loss=0.0076, train_err=0.1206
Eval: 1024_h1=0.0080, 1024_l2=0.0075
[187] time=3.99, avg_loss=0.0059, train_err=0.0933
Eval: 1024_h1=0.0077, 1024_l2=0.0040
[188] time=3.98, avg_loss=0.0072, train_err=0.1144
Eval: 1024_h1=0.0121, 1024_l2=0.0109
[189] time=3.98, avg_loss=0.0079, train_err=0.1249
Eval: 1024_h1=0.0065, 1024_l2=0.0046
Incre Res Update: change index to 19
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[190] time=3.98, avg_loss=0.0068, train_err=0.1083
Eval: 1024_h1=0.0072, 1024_l2=0.0062
[191] time=3.99, avg_loss=0.0072, train_err=0.1151
Eval: 1024_h1=0.0095, 1024_l2=0.0070
[192] time=3.99, avg_loss=0.0091, train_err=0.1441
Eval: 1024_h1=0.0067, 1024_l2=0.0040
[193] time=3.99, avg_loss=0.0059, train_err=0.0936
Eval: 1024_h1=0.0076, 1024_l2=0.0047
[194] time=3.99, avg_loss=0.0074, train_err=0.1173
Eval: 1024_h1=0.0077, 1024_l2=0.0045
[195] time=3.99, avg_loss=0.0078, train_err=0.1242
Eval: 1024_h1=0.0063, 1024_l2=0.0033
[196] time=4.00, avg_loss=0.0061, train_err=0.0970
Eval: 1024_h1=0.0069, 1024_l2=0.0063
[197] time=3.99, avg_loss=0.0086, train_err=0.1372
Eval: 1024_h1=0.0096, 1024_l2=0.0085
[198] time=3.99, avg_loss=0.0067, train_err=0.1063
Eval: 1024_h1=0.0077, 1024_l2=0.0057
[199] time=3.97, avg_loss=0.0062, train_err=0.0989
Eval: 1024_h1=0.0065, 1024_l2=0.0034
Incre Res Update: change index to 20
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[200] time=3.98, avg_loss=0.0039, train_err=0.0627
Eval: 1024_h1=0.0047, 1024_l2=0.0023
[Rank 0]: saved training state to save/1d_burgers/pure/f-l-w
[201] time=4.00, avg_loss=0.0034, train_err=0.0533
Eval: 1024_h1=0.0046, 1024_l2=0.0023
[202] time=4.00, avg_loss=0.0041, train_err=0.0645
Eval: 1024_h1=0.0049, 1024_l2=0.0027
[203] time=3.99, avg_loss=0.0035, train_err=0.0550
Eval: 1024_h1=0.0044, 1024_l2=0.0024
[204] time=3.98, avg_loss=0.0036, train_err=0.0573
Eval: 1024_h1=0.0080, 1024_l2=0.0060
[205] time=3.99, avg_loss=0.0039, train_err=0.0620
Eval: 1024_h1=0.0064, 1024_l2=0.0040
[206] time=3.98, avg_loss=0.0035, train_err=0.0548
Eval: 1024_h1=0.0044, 1024_l2=0.0032
[207] time=4.00, avg_loss=0.0035, train_err=0.0556
Eval: 1024_h1=0.0061, 1024_l2=0.0037
[208] time=3.98, avg_loss=0.0041, train_err=0.0653
Eval: 1024_h1=0.0048, 1024_l2=0.0026
[209] time=3.98, avg_loss=0.0039, train_err=0.0617
Eval: 1024_h1=0.0040, 1024_l2=0.0022
Incre Res Update: change index to 21
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[210] time=3.98, avg_loss=0.0042, train_err=0.0663
Eval: 1024_h1=0.0045, 1024_l2=0.0035
[211] time=3.99, avg_loss=0.0038, train_err=0.0601
Eval: 1024_h1=0.0052, 1024_l2=0.0035
[212] time=3.99, avg_loss=0.0035, train_err=0.0561
Eval: 1024_h1=0.0046, 1024_l2=0.0026
[213] time=3.98, avg_loss=0.0035, train_err=0.0563
Eval: 1024_h1=0.0047, 1024_l2=0.0031
[214] time=3.98, avg_loss=0.0036, train_err=0.0576
Eval: 1024_h1=0.0048, 1024_l2=0.0026
[215] time=3.98, avg_loss=0.0038, train_err=0.0600
Eval: 1024_h1=0.0064, 1024_l2=0.0043
[216] time=3.99, avg_loss=0.0044, train_err=0.0698
Eval: 1024_h1=0.0067, 1024_l2=0.0045
[217] time=3.99, avg_loss=0.0043, train_err=0.0690
Eval: 1024_h1=0.0058, 1024_l2=0.0031
[218] time=4.00, avg_loss=0.0038, train_err=0.0605
Eval: 1024_h1=0.0046, 1024_l2=0.0030
[219] time=3.99, avg_loss=0.0038, train_err=0.0606
Eval: 1024_h1=0.0058, 1024_l2=0.0038
Incre Res Update: change index to 22
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[220] time=3.99, avg_loss=0.0038, train_err=0.0597
Eval: 1024_h1=0.0060, 1024_l2=0.0042
[221] time=3.98, avg_loss=0.0039, train_err=0.0617
Eval: 1024_h1=0.0064, 1024_l2=0.0034
[222] time=3.98, avg_loss=0.0041, train_err=0.0646
Eval: 1024_h1=0.0047, 1024_l2=0.0021
[223] time=3.99, avg_loss=0.0035, train_err=0.0561
Eval: 1024_h1=0.0054, 1024_l2=0.0027
[224] time=3.99, avg_loss=0.0033, train_err=0.0529
Eval: 1024_h1=0.0047, 1024_l2=0.0029
[225] time=3.98, avg_loss=0.0043, train_err=0.0675
Eval: 1024_h1=0.0049, 1024_l2=0.0032
[226] time=3.98, avg_loss=0.0038, train_err=0.0599
Eval: 1024_h1=0.0065, 1024_l2=0.0048
[227] time=3.98, avg_loss=0.0038, train_err=0.0603
Eval: 1024_h1=0.0052, 1024_l2=0.0031
[228] time=3.98, avg_loss=0.0034, train_err=0.0542
Eval: 1024_h1=0.0082, 1024_l2=0.0065
[229] time=3.99, avg_loss=0.0039, train_err=0.0623
Eval: 1024_h1=0.0050, 1024_l2=0.0030
Incre Res Update: change index to 23
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[230] time=3.98, avg_loss=0.0041, train_err=0.0655
Eval: 1024_h1=0.0069, 1024_l2=0.0042
[231] time=3.98, avg_loss=0.0046, train_err=0.0724
Eval: 1024_h1=0.0065, 1024_l2=0.0041
[232] time=3.98, avg_loss=0.0047, train_err=0.0750
Eval: 1024_h1=0.0067, 1024_l2=0.0045
[233] time=3.98, avg_loss=0.0037, train_err=0.0581
Eval: 1024_h1=0.0046, 1024_l2=0.0024
[234] time=3.99, avg_loss=0.0034, train_err=0.0547
Eval: 1024_h1=0.0075, 1024_l2=0.0052
[235] time=3.97, avg_loss=0.0043, train_err=0.0686
Eval: 1024_h1=0.0055, 1024_l2=0.0036
[236] time=3.99, avg_loss=0.0045, train_err=0.0713
Eval: 1024_h1=0.0045, 1024_l2=0.0024
[237] time=3.98, avg_loss=0.0034, train_err=0.0535
Eval: 1024_h1=0.0045, 1024_l2=0.0031
[238] time=3.98, avg_loss=0.0040, train_err=0.0633
Eval: 1024_h1=0.0039, 1024_l2=0.0021
[239] time=3.98, avg_loss=0.0029, train_err=0.0462
Eval: 1024_h1=0.0043, 1024_l2=0.0023
Incre Res Update: change index to 24
Incre Res Update: change sub to 1
Incre Res Update: change res to 1024
[240] time=3.98, avg_loss=0.0036, train_err=0.0569
Eval: 1024_h1=0.0051, 1024_l2=0.0034
[241] time=3.99, avg_loss=0.0040, train_err=0.0638
Eval: 1024_h1=0.0065, 1024_l2=0.0036
[242] time=4.00, avg_loss=0.0032, train_err=0.0511
Eval: 1024_h1=0.0059, 1024_l2=0.0049
[243] time=4.00, avg_loss=0.0041, train_err=0.0648
Eval: 1024_h1=0.0053, 1024_l2=0.0034
[244] time=3.98, avg_loss=0.0032, train_err=0.0507
Eval: 1024_h1=0.0053, 1024_l2=0.0038
[245] time=3.99, avg_loss=0.0032, train_err=0.0504
Eval: 1024_h1=0.0043, 1024_l2=0.0037
[246] time=3.99, avg_loss=0.0030, train_err=0.0482
Eval: 1024_h1=0.0049, 1024_l2=0.0030
[247] time=3.98, avg_loss=0.0034, train_err=0.0532
Eval: 1024_h1=0.0042, 1024_l2=0.0024
[248] time=3.98, avg_loss=0.0035, train_err=0.0548
Eval: 1024_h1=0.0056, 1024_l2=0.0030
[249] time=3.99, avg_loss=0.0038, train_err=0.0601
Eval: 1024_h1=0.0050, 1024_l2=0.0027
{'train_err': 0.06011755779267303, 'avg_loss': 0.0037874061409384012, 'avg_lasso_loss': None, 'epoch_train_time': 3.9947498915717006, '1024_h1': tensor(0.0050, device='cuda:0'), '1024_l2': tensor(0.0027, device='cuda:0')}
